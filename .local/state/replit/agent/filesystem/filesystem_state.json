{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# JusValida\n\n## Overview\n\nJusValida is a legal document analysis platform that uses AI providers (OpenAI, Anthropic, Google Gemini) to analyze legal documents and contracts. The application is built as a full-stack TypeScript solution with a React frontend and Express backend, using a credit-based system for AI analysis services integrated with Stripe for payments.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **UI Components**: shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Authentication**: Context-based authentication provider with session management\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Server Structure**: RESTful API with route-based organization\n- **Session Management**: Express sessions for authentication state\n- **File Handling**: Multer middleware for document uploads (PDF, DOC, DOCX, TXT)\n- **Error Handling**: Centralized error handling middleware\n- **Development Tools**: Hot reload with Vite integration in development\n\n### Database Layer\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema Design**: \n  - Users table with credit system and Stripe customer integration\n  - AI providers table for user-specific API key management\n  - Document analyses table storing analysis results and metadata\n  - Credit transactions for billing tracking\n  - Support system with tickets and messages\n- **Storage Interface**: Abstract storage interface (IStorage) with in-memory implementation for development\n\n### AI Integration\n- **Multi-Provider Support**: OpenAI (GPT-4, GPT-5), Anthropic (Claude Sonnet 4), Google Gemini\n- **Service Architecture**: Centralized AIService class managing multiple AI provider clients\n- **Analysis Types**: General, contract, legal, and compliance analysis modes\n- **Credit System**: Different models consume different credit amounts based on complexity\n\n### Authentication & Authorization\n- **Session-based Authentication**: Express sessions with user state persistence\n- **Password Security**: bcrypt for password hashing\n- **User Management**: Registration, login, and profile management\n- **API Key Management**: Secure storage and management of user AI provider keys\n\n### Payment Integration\n- **Stripe Integration**: Full payment processing with webhooks\n- **Credit Packages**: Multiple credit tiers with volume discounts\n- **Transaction Tracking**: Complete audit trail of credit purchases and usage\n- **Customer Management**: Automatic Stripe customer creation and management\n\n## External Dependencies\n\n### Payment Processing\n- **Stripe**: Complete payment infrastructure including React Stripe.js components, server-side payment processing, and webhook handling\n\n### AI Services\n- **OpenAI**: GPT-4 and GPT-5 models for document analysis\n- **Anthropic**: Claude Sonnet 4 for specialized legal document processing\n- **Google Generative AI**: Gemini Pro for cost-effective analysis options\n\n### Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL with connection pooling\n- **Drizzle Kit**: Database migration and schema management tools\n\n### UI & Styling\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Replit Integration**: Development environment plugins for debugging and development banners\n- **ESBuild**: Fast bundling for production server builds\n- **TypeScript**: Full type safety across frontend, backend, and shared schemas","size_bytes":3859},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        float: \"float 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2249},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import dotenv from \"dotenv\";\n\n// SECURITY: Load environment variables first, before any other imports\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { validateEncryptionStartup } from \"./lib/encryption\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst app = express();\n// SECURITY: Set body size limits to prevent payload attacks\n// Regular JSON requests limited to 50MB for batch metadata\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// SECURITY FIX: Ensure upload directories exist on startup\nasync function createUploadDirectories() {\n  const uploadDirs = ['/tmp/uploads', '/tmp/batch-uploads'];\n  \n  for (const dir of uploadDirs) {\n    try {\n      await fs.promises.mkdir(dir, { recursive: true });\n      log(`✅ Upload directory ensured: ${dir}`);\n    } catch (error: any) {\n      log(`❌ Failed to create upload directory ${dir}: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n// SECURITY FIX: Periodic cleanup of orphaned temporary files\nasync function cleanupOrphanedFiles() {\n  const uploadDirs = ['/tmp/uploads', '/tmp/batch-uploads'];\n  const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n  \n  for (const dir of uploadDirs) {\n    try {\n      const files = await fs.promises.readdir(dir);\n      const now = Date.now();\n      \n      for (const file of files) {\n        const filePath = path.join(dir, file);\n        try {\n          const stats = await fs.promises.stat(filePath);\n          const age = now - stats.mtime.getTime();\n          \n          if (age > maxAge) {\n            await fs.promises.unlink(filePath);\n            log(`🗑️ Cleaned up orphaned file: ${filePath}`);\n          }\n        } catch (fileError: any) {\n          // File might have been deleted already, ignore\n          if (fileError.code !== 'ENOENT') {\n            log(`⚠️ Error checking file ${filePath}: ${fileError.message}`);\n          }\n        }\n      }\n    } catch (dirError: any) {\n      if (dirError.code !== 'ENOENT') {\n        log(`⚠️ Error cleaning directory ${dir}: ${dirError.message}`);\n      }\n    }\n  }\n}\n\n// Start periodic cleanup every hour\nsetInterval(cleanupOrphanedFiles, 60 * 60 * 1000);\n// Run initial cleanup after 5 minutes\nsetTimeout(cleanupOrphanedFiles, 5 * 60 * 1000);\n\n// Automatic cleanup of deleted analyses older than 7 days\nasync function cleanupExpiredAnalyses() {\n  try {\n    const deletedCount = await storage.cleanupExpiredAnalyses();\n    if (deletedCount > 0) {\n      log(`🗑️ Cleaned up ${deletedCount} expired analysis/analyses from trash`);\n    }\n  } catch (error: any) {\n    log(`❌ Error during analysis cleanup: ${error.message}`);\n  }\n}\n\n// Run analysis cleanup daily at 2 AM (if server is running continuously)\n// Otherwise run every 24 hours from server start\nsetInterval(cleanupExpiredAnalyses, 24 * 60 * 60 * 1000); // 24 hours\n// Run initial cleanup after 10 minutes\nsetTimeout(cleanupExpiredAnalyses, 10 * 60 * 1000);\n\n// Secure admin user creation function\nasync function createInitialAdminUser() {\n  try {\n    // Check if any admin users exist\n    const existingAdminUsers = await storage.getUsersByRole(\"admin\");\n    \n    if (existingAdminUsers.length === 0) {\n      // No admin users exist, check for environment variables\n      const adminEmail = process.env.INITIAL_ADMIN_EMAIL;\n      const adminPassword = process.env.INITIAL_ADMIN_PASSWORD;\n      \n      if (adminEmail && adminPassword) {\n        // Create the first admin user\n        const hashedPassword = await bcrypt.hash(adminPassword, 10);\n        \n        const adminUser = await storage.createUser({\n          username: adminEmail.split('@')[0] + '_admin',\n          email: adminEmail,\n          password: hashedPassword,\n          firstName: 'Admin',\n          lastName: 'User',\n          credits: 100, // Give admin user extra credits\n        });\n        \n        // Set the role to admin (this bypasses normal role assignment restrictions)\n        await storage.updateUserRole(adminUser.id, \"admin\");\n        \n        log(`✅ Initial admin user created with email: ${adminEmail}`);\n      } else {\n        log(`⚠️  No admin users found. Set INITIAL_ADMIN_EMAIL and INITIAL_ADMIN_PASSWORD environment variables to create the first admin user.`);\n      }\n    }\n  } catch (error) {\n    log(`❌ Error creating initial admin user: ${error}`);\n  }\n}\n\n(async () => {\n  // SECURITY: Validate encryption system at startup\n  validateEncryptionStartup();\n  \n  // SECURITY FIX: Create upload directories before routes registration\n  await createUploadDirectories();\n  \n  // SECURITY: Perform one-time migration after encryption validation\n  try {\n    await storage.performOneTimeMigration();\n  } catch (error) {\n    log(`❌ CRITICAL: Security migration failed: ${error}`);\n    process.exit(1);\n  }\n  \n  const server = await registerRoutes(app);\n  \n  // Create initial admin user if needed\n  await createInitialAdminUser();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":6867},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { aiService } from \"./services/ai\";\nimport { batchProcessor } from \"./services/batchProcessor\";\nimport { emailService } from \"./services/email\";\nimport { requireSupabaseAuth, requireSupabaseAdmin, type AuthenticatedRequest } from \"./middleware/supabase-auth\";\nimport { insertDocumentAnalysisSchema, insertSupportTicketSchema, insertTicketMessageSchema, adminTicketMessageSchema, adminUserUpdateSchema, insertAiProviderConfigSchema, insertCreditPackageSchema, insertDocumentTemplateSchema, insertLegalClauseSchema, insertTemplatePromptSchema, insertTemplateAnalysisRuleSchema, insertBatchJobSchema, insertBatchDocumentSchema, insertQueueJobSchema, insertSystemAiProviderSchema, users, creditTransactions, contactFormSchema, insertSiteConfigSchema, insertSmtpConfigSchema, insertAdminNotificationSchema, smtpTestSchema, insertStripeConfigSchema } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { sql, eq, desc, count, sum, gte, and } from \"drizzle-orm\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n// Note: @types/pdf-parse package is now installed\n\n// Helper function to ensure user is authenticated (for TypeScript)\nfunction ensureAuthenticated(req: AuthenticatedRequest): asserts req is AuthenticatedRequest & { user: NonNullable<AuthenticatedRequest['user']> } {\n  if (!req.user) {\n    throw new Error('User not authenticated');\n  }\n}\n\n// Global types cleaned up - using Supabase Auth instead of sessions\n\n// Utility function to sanitize user data for API responses\nfunction toSafeUser(user: any) {\n  const { password, ...safeUser } = user;\n  return safeUser;\n}\n\n// Helper function to validate file types\nfunction validateFileType(file: Express.Multer.File): boolean {\n  const allowedTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain'\n  ];\n  return allowedTypes.includes(file.mimetype);\n}\n\n// Stripe configuration - support both test and live modes\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\n// Initialize Stripe instances\nconst stripeTest = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n});\n\n// For live mode, fallback to test credentials if live not available\nconst stripeLive = new Stripe(process.env.STRIPE_LIVE_SECRET_KEY || process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n});\n\n// Function to get correct Stripe instance based on user's mode preference\nfunction getStripeInstance(stripeMode: 'test' | 'live'): Stripe {\n  return stripeMode === 'live' ? stripeLive : stripeTest;\n}\n\n// Helper function to check if user can use free analysis (3 per month)\nasync function checkFreeAnalysisLimit(userId: string): Promise<boolean> {\n  try {\n    const startOfMonth = new Date();\n    startOfMonth.setDate(1);\n    startOfMonth.setHours(0, 0, 0, 0);\n    \n    const freeAnalysesThisMonth = await storage.getDocumentAnalyses(userId)\n      .then(analyses => analyses.filter(analysis => \n        analysis.aiProvider === 'free' && \n        new Date(analysis.createdAt) >= startOfMonth\n      ));\n    \n    return freeAnalysesThisMonth.length < 3;\n  } catch (error) {\n    console.error('Error checking free analysis limit:', error);\n    return false;\n  }\n}\n\n// Helper function removed - no longer needed with Supabase Auth\n\n// Configure multer for file uploads - SECURE: Using disk storage to prevent memory exhaustion\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, '/tmp/uploads');\n    },\n    filename: (req, file, cb) => {\n      // SECURITY FIX: Sanitize filename to prevent path traversal attacks\n      const safeBasename = path.basename(file.originalname);\n      const sanitizedName = safeBasename.replace(/[^a-zA-Z0-9._-]/g, \"_\");\n      const randomString = Math.random().toString(36).substring(2);\n      const uniqueName = `${Date.now()}-${randomString}-${sanitizedName}`;\n      \n      // Additional security: reject if any path separators remain\n      if (uniqueName.includes('/') || uniqueName.includes('\\\\') || uniqueName.includes('..')) {\n        return cb(new Error('Invalid filename detected'), '');\n      }\n      \n      cb(null, uniqueName);\n    }\n  }),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit for single file uploads\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];\n    cb(null, allowedTypes.includes(file.mimetype));\n  }\n});\n\n// Configure dedicated multer for batch uploads with 50MB per file limit\nconst batchUpload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, '/tmp/batch-uploads');\n    },\n    filename: (req, file, cb) => {\n      // SECURITY FIX: Sanitize filename to prevent path traversal attacks\n      const safeBasename = path.basename(file.originalname);\n      const sanitizedName = safeBasename.replace(/[^a-zA-Z0-9._-]/g, \"_\");\n      const randomString = Math.random().toString(36).substring(2);\n      const uniqueName = `${Date.now()}-${randomString}-${sanitizedName}`;\n      \n      // Additional security: reject if any path separators remain\n      if (uniqueName.includes('/') || uniqueName.includes('\\\\') || uniqueName.includes('..')) {\n        return cb(new Error('Invalid filename detected'), '');\n      }\n      \n      cb(null, uniqueName);\n    }\n  }),\n  limits: { \n    fileSize: 50 * 1024 * 1024, // 50MB per file for batch uploads\n    files: 25 // Maximum 25 files per batch\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];\n    cb(null, allowedTypes.includes(file.mimetype));\n  }\n}).array('files', 25);\n\n// Middleware to validate total batch size (max 500MB)\nasync function validateBatchSize(req: AuthenticatedRequest, res: express.Response, next: express.NextFunction) {\n  if (!req.files || !Array.isArray(req.files)) {\n    return res.status(400).json({ message: 'No files provided' });\n  }\n\n  const totalSize = req.files.reduce((acc: number, file: Express.Multer.File) => acc + file.size, 0);\n  const maxTotalSize = 500 * 1024 * 1024; // 500MB total\n\n  if (totalSize > maxTotalSize) {\n    // Cleanup uploaded files before rejecting\n    await cleanupUploadedFiles(req.files as Express.Multer.File[]);\n    return res.status(413).json({ \n      message: 'Total batch size exceeds 500MB limit',\n      totalSize: Math.round(totalSize / 1024 / 1024),\n      maxSize: 500\n    });\n  }\n\n  next();\n}\n\n// Helper function to cleanup uploaded files (async version defined later)\n\n// Handle successful payment processing from Stripe webhook\nasync function handleSuccessfulPayment(paymentIntent: Stripe.PaymentIntent) {\n  try {\n    console.log(`💳 Processing successful payment: ${paymentIntent.id}`);\n    \n    const { userId, packageId } = paymentIntent.metadata;\n    \n    if (!userId || !packageId) {\n      console.error(\"❌ Missing metadata in payment intent:\", paymentIntent.id);\n      return;\n    }\n\n    // Check if this payment has already been processed\n    const existingTransaction = await storage.getCreditTransactionByStripeId(paymentIntent.id);\n    if (existingTransaction) {\n      console.log(`⚠️  Payment already processed: ${paymentIntent.id}`);\n      return;\n    }\n\n    // Get the user\n    const user = await storage.getUser(userId);\n    if (!user) {\n      console.error(`❌ User not found: ${userId}`);\n      return;\n    }\n\n    // SECURITY: Validate customer ID matches user\n    if (user.stripeCustomerId && paymentIntent.customer !== user.stripeCustomerId) {\n      console.error(`❌ Customer ID mismatch for payment ${paymentIntent.id}: user has ${user.stripeCustomerId}, payment has ${paymentIntent.customer}`);\n      return;\n    }\n\n    // Get package details from database (trusted source)\n    const creditPackage = await storage.getCreditPackage(packageId);\n    if (!creditPackage) {\n      console.error(`❌ Package not found: ${packageId}`);\n      return;\n    }\n\n    // Validate payment amount matches package price\n    const expectedAmount = Math.round(parseFloat(creditPackage.price) * 100);\n    if (paymentIntent.amount !== expectedAmount) {\n      console.error(`❌ Amount mismatch for payment ${paymentIntent.id}: expected ${expectedAmount}, got ${paymentIntent.amount}`);\n      return;\n    }\n\n    // ATOMIC: Credit the user account in a single transaction to prevent race conditions\n    const credits = creditPackage.credits;\n    const newCredits = user.credits + credits;\n    \n    // Use storage method that handles atomicity\n    const result = await storage.processPaymentTransaction(userId, {\n      type: \"purchase\",\n      amount: credits,\n      description: `Webhook: Purchase of ${credits} credits (${creditPackage.name})`,\n      stripePaymentIntentId: paymentIntent.id,\n      newCreditBalance: newCredits\n    });\n\n    console.log(`✅ Successfully processed payment ${paymentIntent.id}: ${credits} credits added to user ${userId}`);\n    \n  } catch (error: any) {\n    console.error(`❌ Error processing payment ${paymentIntent.id}:`, error);\n  }\n}\n\n// Helper function to clean up uploaded files\nasync function cleanupUploadedFiles(files: Express.Multer.File[]) {\n  for (const file of files) {\n    try {\n      if (file.path && fs.existsSync(file.path)) {\n        await fs.promises.unlink(file.path);\n        console.log(`🗑️ Cleaned up temp file: ${file.path}`);\n      }\n    } catch (error) {\n      console.error(`❌ Failed to cleanup file ${file.path}:`, error);\n    }\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Stripe webhook endpoint - needs to be before body parsing middleware\n  app.post(\"/api/webhooks/stripe\", express.raw({ type: \"application/json\" }), async (req, res) => {\n    const sig = req.headers[\"stripe-signature\"];\n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n    \n    // SECURITY: Webhook signature verification is MANDATORY for production security\n    if (!webhookSecret) {\n      console.error(\"❌ STRIPE_WEBHOOK_SECRET is required for webhook security\");\n      return res.status(500).send(\"Webhook secret not configured\");\n    }\n    \n    if (!sig) {\n      console.error(\"❌ Stripe signature header missing\");\n      return res.status(400).send(\"Stripe signature header missing\");\n    }\n    \n    let event;\n\n    try {\n      // MANDATORY signature verification for security - try both test and live instances\n      try {\n        event = stripeTest.webhooks.constructEvent(req.body, sig as string, webhookSecret);\n        console.log(`✅ Webhook signature verified (test mode) for event: ${event.type}`);\n      } catch (testErr) {\n        // If test fails, try live instance\n        event = stripeLive.webhooks.constructEvent(req.body, sig as string, webhookSecret);\n        console.log(`✅ Webhook signature verified (live mode) for event: ${event.type}`);\n      }\n    } catch (err: any) {\n      console.error(\"❌ Webhook signature verification failed:\", err.message);\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n\n    // Handle the event\n    switch (event.type) {\n      case \"payment_intent.succeeded\":\n        const paymentIntent = event.data.object as Stripe.PaymentIntent;\n        await handleSuccessfulPayment(paymentIntent);\n        break;\n      \n      case \"payment_intent.payment_failed\":\n        const failedPayment = event.data.object as Stripe.PaymentIntent;\n        console.error(\"💳 Payment failed:\", failedPayment.id, failedPayment.last_payment_error?.message);\n        break;\n      \n      default:\n        console.log(`🔔 Unhandled event type: ${event.type}`);\n    }\n\n    res.json({ received: true });\n  });\n\n  // Express setup for Supabase Auth - no sessions needed\n\n\n  app.get(\"/api/auth/me\", requireSupabaseAuth, (req: AuthenticatedRequest, res) => {\n    // Prevent caching to avoid 304 responses that break JSON parsing\n    res.set({\n      'Cache-Control': 'no-store, no-cache, must-revalidate',\n      'Pragma': 'no-cache',\n      'Expires': '0',\n      'ETag': ''\n    });\n    res.json({ user: req.user });\n  });\n\n  app.get(\"/api/user/profile\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get user from local database to get credits and other local data\n      const localUser = await storage.getUser(req.user.id);\n      \n      // Combine Supabase user data with local database data\n      const userProfile = {\n        id: req.user.id,\n        email: req.user.email,\n        firstName: req.user?.firstName || req.user?.email?.split('@')[0] || '',\n        lastName: req.user?.lastName || '',\n        username: req.user?.username || req.user?.email?.split('@')[0] || '',\n        credits: localUser?.credits || 0,\n        role: req.user?.role || 'user',\n        stripeCustomerId: localUser?.stripeCustomerId || null,\n        stripeMode: localUser?.stripeMode || 'test',\n        createdAt: req.user?.createdAt || new Date().toISOString(),\n        updatedAt: req.user?.updatedAt || new Date().toISOString()\n      };\n\n      res.set({\n        'Cache-Control': 'no-store, no-cache, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n        'ETag': ''\n      });\n      \n      res.json({ userProfile });\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      res.status(500).json({ message: 'Error fetching user profile' });\n    }\n  });\n\n  // Update user's Stripe mode preference\n  app.patch(\"/api/user/stripe-mode\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { stripeMode } = req.body;\n      \n      // Validate stripe mode\n      if (!stripeMode || !['test', 'live'].includes(stripeMode)) {\n        return res.status(400).json({ message: \"Invalid stripe mode. Must be 'test' or 'live'\" });\n      }\n      \n      // Update user's stripe mode preference\n      const updatedUser = await storage.updateUserStripeMode(req.user.id, stripeMode);\n      \n      res.json({ \n        message: `Stripe mode updated to ${stripeMode}`,\n        stripeMode: updatedUser.stripeMode\n      });\n    } catch (error: any) {\n      console.error('Error updating stripe mode:', error);\n      res.status(500).json({ message: 'Error updating stripe mode: ' + error.message });\n    }\n  });\n\n  // Document analysis routes\n  app.post(\"/api/analyze\", requireSupabaseAuth, upload.single('file'), async (req: AuthenticatedRequest, res) => {\n    try {\n      let content = '';\n      \n      if (req.file) {\n        // Proper file processing for different formats\n        try {\n          if (req.file.mimetype === 'application/pdf') {\n            const pdfParse = await import('pdf-parse');\n            const pdfData = await pdfParse.default(req.file.buffer);\n            content = pdfData.text;\n          } else if (req.file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n            const mammoth = await import('mammoth');\n            const result = await mammoth.extractRawText({ buffer: req.file.buffer });\n            content = result.value;\n          } else if (req.file.mimetype === 'application/msword') {\n            // For older DOC files, try mammoth but fallback to buffer if needed\n            try {\n              const mammoth = await import('mammoth');\n              const result = await mammoth.extractRawText({ buffer: req.file.buffer });\n              content = result.value;\n            } catch (docError) {\n              content = req.file.buffer.toString('utf-8');\n            }\n          } else if (req.file.mimetype === 'text/plain') {\n            content = req.file.buffer.toString('utf-8');\n          } else {\n            return res.status(400).json({ message: \"Tipo de arquivo não suportado\" });\n          }\n        } catch (parseError) {\n          console.error(\"Erro no processamento do arquivo:\", parseError);\n          return res.status(400).json({ message: \"Erro ao processar arquivo. Tente um formato diferente.\" });\n        }\n      } else if (req.body.content) {\n        content = req.body.content;\n      } else {\n        return res.status(400).json({ message: \"No content provided\" });\n      }\n\n      const { analysisType, aiProvider, aiModel, templateId } = req.body;\n      \n      // Validate template if provided\n      let templateData = null;\n      if (templateId) {\n        templateData = await storage.getTemplateWithPrompts(templateId);\n        if (!templateData) {\n          return res.status(404).json({ message: \"Template not found\" });\n        }\n      }\n      \n      // Check if user can use free analysis (3 per month) or needs credits\n      const canUseFreeAnalysis = await checkFreeAnalysisLimit(req.user.id);\n      const needsCredits = !canUseFreeAnalysis && req.user.credits === 0;\n      \n      if (needsCredits) {\n        return res.status(402).json({ \n          message: \"Você atingiu o limite de 3 análises gratuitas por mês. Compre créditos para continuar.\" \n        });\n      }\n\n      // Get user's API key for the provider if needed\n      let userApiKey;\n      if (aiProvider !== 'free') {\n        const providerConfig = await storage.getAiProvider(req.user.id, aiProvider);\n        userApiKey = providerConfig?.apiKey;\n      }\n\n      // Calculate credits needed - free users can use 'free' provider\n      let actualProvider = aiProvider;\n      let actualModel = aiModel;\n      let creditsNeeded = 0;\n      \n      if (canUseFreeAnalysis && (req.user.credits === 0 || aiProvider === 'free')) {\n        // Force free analysis for users without credits or explicitly choosing free\n        actualProvider = 'free';\n        actualModel = 'basic';\n        creditsNeeded = 0;\n      } else {\n        creditsNeeded = aiService.getProviderCredits(`${aiProvider}-${aiModel}`, analysisType);\n        if (req.user.credits < creditsNeeded) {\n          return res.status(402).json({ \n            message: `Créditos insuficientes. Necessário: ${creditsNeeded}, disponível: ${req.user.credits}` \n          });\n        }\n      }\n\n      // Create analysis record with template reference\n      const analysis = await storage.createDocumentAnalysis(req.user.id, {\n        title: req.body.title || `Document Analysis ${new Date().toISOString()}`,\n        content,\n        aiProvider,\n        aiModel,\n        analysisType,\n        templateId: templateData?.template.id || null,\n        result: {},\n        creditsUsed: creditsNeeded,\n      });\n\n      try {\n        // Perform AI analysis with template support\n        const result = await aiService.analyzeDocument(\n          content,\n          analysisType,\n          actualProvider,\n          actualModel,\n          userApiKey,\n          templateId\n        );\n\n        // Update analysis with result\n        await storage.updateDocumentAnalysisResult(analysis.id, result, \"completed\");\n\n        // Deduct credits and create transaction\n        const newCredits = req.user.credits - creditsNeeded;\n        await storage.updateUserCredits(req.user.id, newCredits);\n        await storage.createCreditTransaction(\n          req.user.id,\n          \"usage\",\n          -creditsNeeded,\n          `Document analysis using ${aiProvider} ${aiModel}`\n        );\n\n        // Credits updated in database - no session to update\n\n        res.json({\n          analysisId: analysis.id,\n          result,\n          creditsUsed: creditsNeeded,\n          remainingCredits: newCredits,\n        });\n      } catch (error: any) {\n        // Mark analysis as failed\n        await storage.updateDocumentAnalysisResult(analysis.id, { error: error.message }, \"failed\");\n        throw error;\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/analyses\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const analyses = await storage.getDocumentAnalyses(req.user.id, limit);\n      res.json(analyses);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/analyses/:id\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const analysis = await storage.getDocumentAnalysis(req.params.id, req.user.id);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n      res.json(analysis);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Soft delete analysis (move to trash)\n  app.delete(\"/api/analyses/:id\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const analysis = await storage.softDeleteAnalysis(req.params.id, req.user.id, req.user.id);\n      res.json({ \n        message: \"Análise movida para lixeira com sucesso\",\n        analysis \n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get deleted analyses (trash)\n  app.get(\"/api/analyses/trash/list\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const deletedAnalyses = await storage.getDeletedAnalyses(req.user.id);\n      res.json(deletedAnalyses);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Restore analysis from trash\n  app.post(\"/api/analyses/:id/restore\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const analysis = await storage.restoreAnalysis(req.params.id, req.user.id);\n      res.json({ \n        message: \"Análise restaurada com sucesso\",\n        analysis \n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // AI Provider management routes\n  app.get(\"/api/ai-providers\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const providers = await storage.getAiProviders(req.user.id);\n      // Don't return API keys in the response\n      const sanitizedProviders = providers.map(p => ({\n        ...p,\n        apiKey: p.apiKey ? '****' : null\n      }));\n      res.json(sanitizedProviders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/ai-providers\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { provider, apiKey } = req.body;\n      \n      // Check if provider already exists\n      const existingProvider = await storage.getAiProvider(req.user.id, provider);\n      if (existingProvider) {\n        // Update existing\n        const updated = await storage.updateAiProvider(existingProvider.id, { apiKey });\n        res.json({ ...updated, apiKey: '****' });\n      } else {\n        // Create new\n        const newProvider = await storage.createAiProvider(req.user.id, {\n          provider,\n          apiKey,\n          isActive: true,\n        });\n        res.json({ ...newProvider, apiKey: '****' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/ai-providers/:id\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Verify that the provider belongs to the authenticated user\n      const providers = await storage.getAiProviders(req.user.id);\n      const providerToDelete = providers.find(p => p.id === id);\n      \n      if (!providerToDelete) {\n        return res.status(404).json({ message: \"AI provider not found\" });\n      }\n      \n      await storage.deleteAiProvider(id);\n      res.json({ message: \"AI provider deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Credit purchase routes\n  app.post(\"/api/create-payment-intent\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { packageId } = req.body;\n      \n      if (!packageId) {\n        return res.status(400).json({ message: \"Package ID is required\" });\n      }\n\n      // Get user's stripe mode preference\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get correct Stripe instance based on user's mode preference\n      const stripe = getStripeInstance(user.stripeMode || 'test');\n\n      // Get package details from database (trusted source)\n      const creditPackage = await storage.getCreditPackage(packageId);\n      \n      if (!creditPackage || !creditPackage.isActive) {\n        return res.status(404).json({ message: \"Credit package not found or inactive\" });\n      }\n\n      // Use server-side price (prevent client tampering)\n      const amount = parseFloat(creditPackage.price);\n      \n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"brl\",\n        metadata: {\n          userId: req.user.id,\n          packageId: packageId, // Store packageId instead of credits\n          stripeMode: user.stripeMode || 'test', // Store mode for webhook processing\n        },\n      });\n\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  // Stripe webhook endpoint (no auth required - Stripe handles verification)\n  app.post(\"/api/stripe-webhook\", express.raw({ type: 'application/json' }), async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n    if (!endpointSecret) {\n      console.error('❌ Missing STRIPE_WEBHOOK_SECRET environment variable');\n      return res.status(400).json({ error: 'Webhook secret not configured' });\n    }\n\n    let event: Stripe.Event;\n\n    try {\n      // Try to verify webhook with test instance first, then live\n      try {\n        event = stripeTest.webhooks.constructEvent(req.body, sig as string, endpointSecret);\n      } catch (testErr) {\n        // If test fails, try live instance\n        event = stripeLive.webhooks.constructEvent(req.body, sig as string, endpointSecret);\n      }\n    } catch (err: any) {\n      console.error(`❌ Webhook signature verification failed: ${err.message}`);\n      return res.status(400).json({ error: `Webhook Error: ${err.message}` });\n    }\n\n    console.log(`🎯 Received Stripe webhook: ${event.type}`);\n\n    // Handle the event\n    switch (event.type) {\n      case 'payment_intent.succeeded':\n        const paymentIntent = event.data.object as Stripe.PaymentIntent;\n        await handleSuccessfulPayment(paymentIntent);\n        break;\n      case 'payment_intent.payment_failed':\n        console.log(`💳 Payment failed: ${event.data.object.id}`);\n        break;\n      default:\n        console.log(`🤷 Unhandled event type: ${event.type}`);\n    }\n\n    res.json({ received: true });\n  });\n\n  app.post(\"/api/confirm-payment\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { paymentIntentId } = req.body;\n      \n      // Get user's stripe mode preference to use correct instance\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      const stripe = getStripeInstance(user.stripeMode || 'test');\n      \n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      \n      if (paymentIntent.status === 'succeeded' && paymentIntent.metadata.userId === req.user.id) {\n        const { packageId } = paymentIntent.metadata;\n        \n        if (!packageId) {\n          return res.status(400).json({ message: \"Invalid payment: no package ID found\" });\n        }\n\n        // Get package details from database (trusted source)\n        const creditPackage = await storage.getCreditPackage(packageId);\n        \n        if (!creditPackage) {\n          return res.status(400).json({ message: \"Invalid payment: package not found\" });\n        }\n\n        // Validate payment amount matches package price\n        const expectedAmount = Math.round(parseFloat(creditPackage.price) * 100);\n        if (paymentIntent.amount !== expectedAmount) {\n          return res.status(400).json({ message: \"Invalid payment: amount mismatch\" });\n        }\n\n        const credits = creditPackage.credits;\n        const newCredits = req.user.credits + credits;\n        \n        await storage.updateUserCredits(req.user.id, newCredits);\n        await storage.createCreditTransaction(\n          req.user.id,\n          \"purchase\",\n          credits,\n          `Purchase of ${credits} credits (${creditPackage.name})`,\n          paymentIntentId\n        );\n\n        // Credits updated in database - no session to update\n        \n        res.json({ success: true, newCredits });\n      } else {\n        res.status(400).json({ message: \"Payment not completed\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/credit-transactions\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const transactions = await storage.getCreditTransactions(req.user.id);\n      res.json(transactions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Credit analytics for users\n  app.get(\"/api/credit-analytics\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const [transactions, analyses] = await Promise.all([\n        storage.getCreditTransactions(req.user.id),\n        storage.getDocumentAnalyses(req.user.id)\n      ]);\n\n      // Calculate spending by AI provider\n      const providerSpending: Record<string, number> = {};\n      const monthlySpending: Record<string, number> = {};\n      \n      analyses.forEach(analysis => {\n        const provider = `${analysis.aiProvider}-${analysis.aiModel}`;\n        providerSpending[provider] = (providerSpending[provider] || 0) + analysis.creditsUsed;\n        \n        const month = analysis.createdAt.toISOString().slice(0, 7); // YYYY-MM\n        monthlySpending[month] = (monthlySpending[month] || 0) + analysis.creditsUsed;\n      });\n\n      // Calculate total spending and purchases\n      let totalSpent = 0;\n      let totalPurchased = 0;\n      \n      transactions.forEach(tx => {\n        if (tx.type === 'usage') {\n          totalSpent += Math.abs(tx.amount);\n        } else if (tx.type === 'purchase') {\n          totalPurchased += tx.amount;\n        }\n      });\n\n      res.json({\n        summary: {\n          totalSpent,\n          totalPurchased,\n          currentBalance: req.user.credits,\n          totalAnalyses: analyses.length\n        },\n        providerSpending: Object.entries(providerSpending).map(([provider, amount]) => ({\n          provider,\n          amount\n        })),\n        monthlySpending: Object.entries(monthlySpending).map(([month, amount]) => ({\n          month,\n          amount\n        })).sort((a, b) => a.month.localeCompare(b.month)),\n        recentTransactions: transactions.slice(0, 5)\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Support ticket routes\n  app.get(\"/api/support/tickets\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tickets = await storage.getSupportTickets(req.user.id);\n      res.json(tickets);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/support/tickets\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const ticketData = insertSupportTicketSchema.parse(req.body);\n      const ticket = await storage.createSupportTicket(req.user.id, ticketData);\n      \n      // Create initial message\n      await storage.createTicketMessage({\n        ticketId: ticket.id,\n        userId: req.user.id,\n        message: ticketData.message,\n        isFromSupport: false,\n      });\n      \n      res.json(ticket);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/support/tickets/:id\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const ticket = await storage.getSupportTicket(req.params.id, req.user.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      const messages = await storage.getTicketMessages(ticket.id);\n      res.json({ ticket, messages });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/support/tickets/:id/messages\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const ticket = await storage.getSupportTicket(req.params.id, req.user.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const messageData = insertTicketMessageSchema.parse({\n        ...req.body,\n        ticketId: req.params.id,\n        userId: req.user.id,\n      });\n      \n      const message = await storage.createTicketMessage(messageData);\n      res.json(message);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update ticket status (limited for users)\n  app.patch(\"/api/support/tickets/:id\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const ticket = await storage.getSupportTicket(req.params.id, req.user.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const { status } = req.body;\n      \n      // Users can only close/reopen their own tickets\n      if (!['closed', 'open'].includes(status)) {\n        return res.status(400).json({ message: \"Users can only close or reopen tickets\" });\n      }\n\n      const updatedTicket = await storage.updateSupportTicketStatus(ticket.id, status);\n      res.json(updatedTicket);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Dynamic data endpoints for frontend components\n  app.get(\"/api/ai-provider-configs\", async (req, res) => {\n    try {\n      const configs = await storage.getAiProviderConfigs();\n      res.json(configs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/credit-packages\", async (req, res) => {\n    try {\n      const packages = await storage.getCreditPackages();\n      res.json(packages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/platform-stats\", async (req, res) => {\n    try {\n      let stats = await storage.getPlatformStats();\n      \n      // If no stats exist or stats are older than 1 hour, recompute them\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      if (!stats || new Date(stats.lastUpdated) < oneHourAgo) {\n        stats = await storage.computeAndUpdatePlatformStats();\n      }\n      \n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin middleware (legacy - removed in favor of Supabase Auth with role metadata)\n\n  // Admin routes\n  app.get(\"/api/admin/tickets\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get all tickets from all users (admin view)\n      const { userId } = req.query;\n      let tickets;\n      \n      if (userId) {\n        tickets = await storage.getSupportTickets(userId as string);\n      } else {\n        // For now, get tickets for all users - in production you'd optimize this query\n        tickets = await storage.getAllSupportTickets();\n      }\n      \n      res.json(tickets);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/tickets/:id/messages\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Admin can reply to any ticket\n      const { id } = req.params;\n      \n      // Validate request body using proper schema\n      const { message } = adminTicketMessageSchema.parse(req.body);\n\n      const messageData = {\n        ticketId: id,\n        userId: null, // Admin messages don't have a userId\n        message,\n        isFromSupport: true,\n      };\n      \n      const newMessage = await storage.createTicketMessage(messageData);\n      \n      // Auto-update ticket status to pending if it was closed\n      const ticket = await storage.getSupportTicketById(id);\n      if (ticket && ticket.status === 'closed') {\n        await storage.updateSupportTicketStatus(id, 'pending');\n      }\n      \n      res.json(newMessage);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/tickets/:id/status\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      // Admin can set any status\n      const allowedStatuses = ['open', 'pending', 'resolved', 'closed'];\n      if (!allowedStatuses.includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const updatedTicket = await storage.updateSupportTicketStatus(id, status);\n      res.json(updatedTicket);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin user management routes\n  app.get(\"/api/admin/users\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      \n      const result = await storage.getAllUsers(page, limit);\n      // Sanitize user objects to remove password fields\n      const sanitizedResult = {\n        ...result,\n        users: result.users.map(toSafeUser)\n      };\n      res.json(sanitizedResult);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body using Zod schema\n      const validatedData = adminUserUpdateSchema.parse(req.body);\n      const { role, credits } = validatedData;\n      \n      let updatedUser;\n      \n      if (role !== undefined) {\n        updatedUser = await storage.updateUserRole(id, role);\n      }\n      \n      if (credits !== undefined) {\n        updatedUser = await storage.updateUserCredits(id, credits);\n      }\n      \n      if (!updatedUser) {\n        // If no specific update was made, just get the user\n        updatedUser = await storage.getUser(id);\n        if (!updatedUser) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n      }\n      \n      res.json(toSafeUser(updatedUser));\n    } catch (error: any) {\n      // Handle Zod validation errors\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin analytics routes\n  app.get(\"/api/admin/analytics\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const analytics = await storage.getPlatformAnalytics();\n      res.json(analytics);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/ai-usage\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const aiUsage = await storage.getAiUsageAnalytics();\n      res.json(aiUsage);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin financial analytics endpoints\n  app.get(\"/api/admin/financial-details\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const [\n        transactions, \n        packages, \n        userStats,\n        recentTransactions\n      ] = await Promise.all([\n        db.select({\n          date: sql<string>`DATE(${creditTransactions.createdAt})`,\n          type: creditTransactions.type,\n          amount: sum(creditTransactions.amount),\n          count: count()\n        }).from(creditTransactions)\n         .groupBy(sql`DATE(${creditTransactions.createdAt})`, creditTransactions.type)\n         .orderBy(sql`DATE(${creditTransactions.createdAt}) DESC`)\n         .limit(30),\n        \n        storage.getCreditPackages(),\n        \n        db.select({\n          totalUsers: count(),\n          averageCredits: sql<number>`ROUND(AVG(${users.credits}), 2)`,\n          maxCredits: sql<number>`MAX(${users.credits})`,\n          usersWithCredits: sql<number>`COUNT(CASE WHEN ${users.credits} > 0 THEN 1 END)`\n        }).from(users),\n        \n        db.select({\n          id: creditTransactions.id,\n          userId: creditTransactions.userId,\n          type: creditTransactions.type,\n          amount: creditTransactions.amount,\n          description: creditTransactions.description,\n          createdAt: creditTransactions.createdAt,\n          userEmail: users.email,\n          userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`\n        }).from(creditTransactions)\n         .innerJoin(users, eq(creditTransactions.userId, users.id))\n         .orderBy(desc(creditTransactions.createdAt))\n         .limit(20)\n      ]);\n\n      // Process package popularity\n      const packageSales: Record<string, number> = {};\n      recentTransactions.forEach((tx: any) => {\n        if (tx.type === 'purchase') {\n          const packageName = tx.description.match(/\\(([^)]+)\\)$/)?.[1] || 'Unknown';\n          packageSales[packageName] = (packageSales[packageName] || 0) + 1;\n        }\n      });\n\n      res.json({\n        dailyTransactions: transactions,\n        packagePopularity: Object.entries(packageSales).map(([name, sales]) => ({\n          name,\n          sales\n        })).sort((a, b) => b.sales - a.sales),\n        userStatistics: userStats[0],\n        recentTransactions,\n        totalPackages: packages.length,\n        activePackages: packages.filter(p => p.isActive).length\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/credit-trends\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const days = parseInt(req.query.days as string) || 30;\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n\n      const [creditTrends, topSpenders, hourlyUsage] = await Promise.all([\n        // Daily credit trends\n        db.select({\n          date: sql<string>`DATE(${creditTransactions.createdAt})`,\n          purchases: sql<number>`COALESCE(SUM(CASE WHEN ${creditTransactions.type} = 'purchase' THEN ${creditTransactions.amount} ELSE 0 END), 0)`,\n          usage: sql<number>`COALESCE(ABS(SUM(CASE WHEN ${creditTransactions.type} = 'usage' THEN ${creditTransactions.amount} ELSE 0 END)), 0)`,\n          net: sql<number>`SUM(${creditTransactions.amount})`\n        }).from(creditTransactions)\n         .where(gte(creditTransactions.createdAt, startDate))\n         .groupBy(sql`DATE(${creditTransactions.createdAt})`)\n         .orderBy(sql`DATE(${creditTransactions.createdAt})`),\n\n        // Top spending users\n        db.select({\n          userId: creditTransactions.userId,\n          userEmail: users.email,\n          userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n          totalSpent: sql<number>`ABS(SUM(CASE WHEN ${creditTransactions.type} = 'usage' THEN ${creditTransactions.amount} ELSE 0 END))`,\n          totalPurchased: sql<number>`SUM(CASE WHEN ${creditTransactions.type} = 'purchase' THEN ${creditTransactions.amount} ELSE 0 END)`,\n          transactionCount: count()\n        }).from(creditTransactions)\n         .innerJoin(users, eq(creditTransactions.userId, users.id))\n         .where(gte(creditTransactions.createdAt, startDate))\n         .groupBy(creditTransactions.userId, users.email, users.firstName, users.lastName)\n         .orderBy(sql`ABS(SUM(CASE WHEN ${creditTransactions.type} = 'usage' THEN ${creditTransactions.amount} ELSE 0 END)) DESC`)\n         .limit(10),\n\n        // Hourly usage patterns\n        db.select({\n          hour: sql<number>`EXTRACT(HOUR FROM ${creditTransactions.createdAt})`,\n          transactions: count(),\n          credits: sql<number>`ABS(SUM(CASE WHEN ${creditTransactions.type} = 'usage' THEN ${creditTransactions.amount} ELSE 0 END))`\n        }).from(creditTransactions)\n         .where(and(\n           gte(creditTransactions.createdAt, startDate),\n           eq(creditTransactions.type, 'usage')\n         ))\n         .groupBy(sql`EXTRACT(HOUR FROM ${creditTransactions.createdAt})`)\n         .orderBy(sql`EXTRACT(HOUR FROM ${creditTransactions.createdAt})`)\n      ]);\n\n      res.json({\n        creditTrends,\n        topSpenders,\n        hourlyUsage,\n        period: {\n          days,\n          startDate: startDate.toISOString(),\n          endDate: new Date().toISOString()\n        }\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin data seeding endpoints\n  app.post(\"/api/admin/seed-data\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Seed AI Provider Configs\n      const aiProviderConfigsData = [\n        {\n          providerId: 'openai-gpt5',\n          name: 'OpenAI',\n          model: 'GPT-5',\n          provider: 'openai',\n          credits: 3,\n          description: 'Modelo mais avançado para análise jurídica detalhada',\n          iconName: 'Bot',\n          isPopular: true,\n          isFree: false,\n          isActive: true,\n          sortOrder: 1,\n        },\n        {\n          providerId: 'anthropic-claude',\n          name: 'Anthropic',\n          model: 'Claude Sonnet 4',\n          provider: 'anthropic',\n          credits: 3,\n          description: 'Especializado em análise de documentos legais',\n          iconName: 'Brain',\n          isPopular: false,\n          isFree: false,\n          isActive: true,\n          sortOrder: 2,\n        },\n        {\n          providerId: 'openai-gpt4',\n          name: 'OpenAI',\n          model: 'GPT-4',\n          provider: 'openai',\n          credits: 2,\n          description: 'Análise confiável com boa precisão',\n          iconName: 'Bot',\n          isPopular: false,\n          isFree: false,\n          isActive: true,\n          sortOrder: 3,\n        },\n        {\n          providerId: 'gemini-pro',\n          name: 'Google',\n          model: 'Gemini Pro',\n          provider: 'gemini',\n          credits: 1,\n          description: 'Análise rápida e eficiente',\n          iconName: 'Sparkles',\n          isPopular: false,\n          isFree: false,\n          isActive: true,\n          sortOrder: 4,\n        },\n        {\n          providerId: 'openrouter',\n          name: 'OpenRouter',\n          model: 'Multiple Models',\n          provider: 'openrouter',\n          credits: 2,\n          description: 'Acesso a múltiplos modelos de IA',\n          iconName: 'Route',\n          isPopular: false,\n          isFree: false,\n          isActive: true,\n          sortOrder: 5,\n        },\n        {\n          providerId: 'free-ai',\n          name: 'IA Gratuita',\n          model: 'Basic Analysis',\n          provider: 'free',\n          credits: 0,\n          description: 'Análise básica para usuários gratuitos',\n          iconName: 'Gift',\n          isPopular: false,\n          isFree: true,\n          isActive: true,\n          sortOrder: 6,\n        }\n      ];\n\n      // Seed Credit Packages\n      const creditPackagesData = [\n        {\n          packageId: 'credits_50',\n          name: '50 Créditos',\n          credits: 50,\n          price: '47.00',\n          isPopular: false,\n          description: 'Ideal para uso básico',\n          features: ['Análises básicas', 'Todos os provedores de IA', 'Suporte por email'],\n          isActive: true,\n          sortOrder: 1,\n        },\n        {\n          packageId: 'credits_100',\n          name: '100 Créditos',\n          credits: 100,\n          price: '87.00',\n          isPopular: true,\n          description: 'Melhor custo-benefício',\n          features: ['Análises ilimitadas', 'Todos os provedores de IA', 'Suporte prioritário', '15% de desconto'],\n          isActive: true,\n          sortOrder: 2,\n        },\n        {\n          packageId: 'credits_500',\n          name: '500 Créditos',\n          credits: 500,\n          price: '397.00',\n          isPopular: false,\n          description: 'Para uso profissional',\n          features: ['Volume profissional', 'Todos os provedores de IA', 'Suporte dedicado', '20% de desconto'],\n          isActive: true,\n          sortOrder: 3,\n        }\n      ];\n\n      // Check if data already exists to avoid duplicates\n      const existingConfigs = await storage.getAiProviderConfigs();\n      const existingPackages = await storage.getCreditPackages();\n\n      if (existingConfigs.length === 0) {\n        for (const config of aiProviderConfigsData) {\n          await storage.createAiProviderConfig(config);\n        }\n      }\n\n      if (existingPackages.length === 0) {\n        for (const pkg of creditPackagesData) {\n          await storage.createCreditPackage(pkg);\n        }\n      }\n\n      // Seed initial platform stats\n      await storage.computeAndUpdatePlatformStats();\n\n      res.json({ \n        message: \"Database seeded successfully\",\n        aiProviderConfigs: existingConfigs.length === 0 ? aiProviderConfigsData.length : 0,\n        creditPackages: existingPackages.length === 0 ? creditPackagesData.length : 0,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ============================================================================\n  // TEMPLATE MANAGEMENT API ROUTES\n  // ============================================================================\n\n  // Document Templates Routes\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const templates = await storage.getDocumentTemplates();\n      res.json(templates);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/templates/:templateId\", async (req, res) => {\n    try {\n      const { templateId } = req.params;\n      const templateData = await storage.getTemplateWithPrompts(templateId);\n      if (!templateData) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json(templateData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/templates/category/:category\", async (req, res) => {\n    try {\n      const { category } = req.params;\n      const templates = await storage.getDocumentTemplatesByCategory(category);\n      res.json(templates);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/templates\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const templateData = insertDocumentTemplateSchema.parse(req.body);\n      const template = await storage.createDocumentTemplate(templateData);\n      res.status(201).json(template);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid template data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/templates/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const templateData = insertDocumentTemplateSchema.partial().parse(req.body);\n      const template = await storage.updateDocumentTemplate(id, templateData);\n      res.json(template);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid template data\", errors: error.errors });\n      }\n      if (error.message === \"Document Template not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/templates/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteDocumentTemplate(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Legal Clauses Routes\n  app.get(\"/api/legal-clauses\", async (req, res) => {\n    try {\n      const clauses = await storage.getLegalClauses();\n      res.json(clauses);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/legal-clauses/category/:category\", async (req, res) => {\n    try {\n      const { category } = req.params;\n      const clauses = await storage.getLegalClausesByCategory(category);\n      res.json(clauses);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/legal-clauses/template/:templateId\", async (req, res) => {\n    try {\n      const { templateId } = req.params;\n      const clauses = await storage.getLegalClausesByTemplate(templateId);\n      res.json(clauses);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/legal-clauses\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const clauseData = insertLegalClauseSchema.parse(req.body);\n      const clause = await storage.createLegalClause(clauseData);\n      res.status(201).json(clause);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid clause data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/legal-clauses/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const clauseData = insertLegalClauseSchema.partial().parse(req.body);\n      const clause = await storage.updateLegalClause(id, clauseData);\n      res.json(clause);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid clause data\", errors: error.errors });\n      }\n      if (error.message === \"Legal Clause not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/legal-clauses/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteLegalClause(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Template Prompts Routes\n  app.get(\"/api/templates/:templateId/prompts\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { templateId } = req.params;\n      const template = await storage.getDocumentTemplateById(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      const prompts = await storage.getTemplatePrompts(templateId);\n      res.json(prompts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/template-prompts\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const promptData = insertTemplatePromptSchema.parse(req.body);\n      const prompt = await storage.createTemplatePrompt(promptData);\n      res.status(201).json(prompt);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid prompt data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/template-prompts/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const promptData = insertTemplatePromptSchema.partial().parse(req.body);\n      const prompt = await storage.updateTemplatePrompt(id, promptData);\n      res.json(prompt);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid prompt data\", errors: error.errors });\n      }\n      if (error.message === \"Template Prompt not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/template-prompts/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTemplatePrompt(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Template Analysis Rules Routes\n  app.get(\"/api/templates/:templateId/analysis-rules\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { templateId } = req.params;\n      const template = await storage.getDocumentTemplateById(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      const rules = await storage.getTemplateAnalysisRules(templateId);\n      res.json(rules);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/template-analysis-rules\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const ruleData = insertTemplateAnalysisRuleSchema.parse(req.body);\n      const rule = await storage.createTemplateAnalysisRule(ruleData);\n      res.status(201).json(rule);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid rule data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/template-analysis-rules/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const ruleData = insertTemplateAnalysisRuleSchema.partial().parse(req.body);\n      const rule = await storage.updateTemplateAnalysisRule(id, ruleData);\n      res.json(rule);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid rule data\", errors: error.errors });\n      }\n      if (error.message === \"Template Analysis Rule not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/template-analysis-rules/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTemplateAnalysisRule(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ===============================\n  // BATCH PROCESSING ENDPOINTS\n  // ===============================\n\n  // Enhanced MIME type validation for security\n  function validateFileType(file: Express.Multer.File): boolean {\n    const allowedTypes = {\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'text/plain': ['.txt']\n    };\n    \n    // Check MIME type\n    if (!allowedTypes[file.mimetype as keyof typeof allowedTypes]) {\n      return false;\n    }\n    \n    // Check file extension matches MIME type\n    const validExtensions = allowedTypes[file.mimetype as keyof typeof allowedTypes];\n    const fileExtension = path.extname(file.originalname).toLowerCase();\n    \n    return validExtensions.includes(fileExtension);\n  }\n\n  // SECURITY FIX: Configure multer for batch uploads with comprehensive limits\n  const batchUpload = multer({\n    storage: multer.diskStorage({\n      destination: (req, file, cb) => {\n        cb(null, '/tmp/batch-uploads');\n      },\n      filename: (req, file, cb) => {\n        // SECURITY FIX: Sanitize filename to prevent path traversal attacks\n        const safeBasename = path.basename(file.originalname);\n        const sanitizedName = safeBasename.replace(/[^a-zA-Z0-9._-]/g, \"_\");\n        const randomString = Math.random().toString(36).substring(2);\n        const uniqueName = `${Date.now()}-${randomString}-${sanitizedName}`;\n        \n        // Additional security: reject if any path separators remain\n        if (uniqueName.includes('/') || uniqueName.includes('\\\\') || uniqueName.includes('..')) {\n          return cb(new Error('Invalid filename detected'), '');\n        }\n        \n        cb(null, uniqueName);\n      }\n    }),\n    limits: { \n      fileSize: 50 * 1024 * 1024, // 50MB per file for batch processing\n      files: 25, // Maximum 25 files per batch to prevent resource exhaustion\n      fieldSize: 1024 * 1024, // 1MB limit for form fields\n      fieldNameSize: 100, // Limit field name length\n      fields: 20 // Limit number of form fields\n    },\n    fileFilter: (req, file, cb) => {\n      // Enhanced validation with both MIME type and extension check\n      if (!validateFileType(file)) {\n        return cb(new Error(`Invalid file type: ${file.mimetype}. Only PDF, DOC, DOCX, and TXT files are allowed.`) as any, false);\n      }\n      \n      cb(null, true);\n    }\n  });\n\n  // Middleware to validate total batch size before processing\n  const validateBatchSizeLocal = (req: AuthenticatedRequest, res: express.Response, next: express.NextFunction) => {\n    if (req.files && Array.isArray(req.files)) {\n      const totalSize = req.files.reduce((sum: number, file: Express.Multer.File) => sum + file.size, 0);\n      const maxTotalSize = 500 * 1024 * 1024; // 500MB total batch limit\n      \n      if (totalSize > maxTotalSize) {\n        // CLEANUP: Remove uploaded files on rejection\n        cleanupUploadedFiles(req.files as Express.Multer.File[]);\n        return res.status(413).json({ \n          message: `Total batch size exceeds limit. Maximum: ${maxTotalSize / (1024 * 1024)}MB, Received: ${(totalSize / (1024 * 1024)).toFixed(2)}MB`,\n          maxTotalSize,\n          actualSize: totalSize\n        });\n      }\n      \n      // Validate file count on server side (double-check multer limit)\n      if (req.files.length > 25) {\n        // CLEANUP: Remove uploaded files on rejection\n        cleanupUploadedFiles(req.files as Express.Multer.File[]);\n        return res.status(413).json({ \n          message: `Too many files. Maximum: 25, Received: ${req.files.length}`,\n          maxFiles: 25,\n          actualFiles: req.files.length\n        });\n      }\n    }\n    next();\n  };\n\n  // Create batch job with multiple files - SECURE: Disk-based storage with atomic credit reservation\n  app.post(\"/api/batch/create\", requireSupabaseAuth, batchUpload.array('files', 25), validateBatchSizeLocal, async (req: AuthenticatedRequest, res) => {\n    let uploadedFiles: Express.Multer.File[] = [];\n    let batchJobCreated = false;\n    \n    try {\n      const files = req.files as Express.Multer.File[];\n      uploadedFiles = files || [];\n      \n      if (!files || files.length === 0) {\n        // CLEANUP: Remove uploaded files on no files error\n        cleanupUploadedFiles(uploadedFiles);\n        return res.status(400).json({ message: \"No files provided for batch processing\" });\n      }\n\n      const { name, description, analysisType, aiProvider, aiModel, templateId } = req.body;\n\n      // Validate required fields\n      if (!name || !analysisType || !aiProvider || !aiModel) {\n        // CLEANUP: Remove uploaded files on validation error\n        cleanupUploadedFiles(uploadedFiles);\n        return res.status(400).json({ message: \"Missing required fields: name, analysisType, aiProvider, aiModel\" });\n      }\n\n      // Validate template if provided\n      let templateData = null;\n      if (templateId) {\n        templateData = await storage.getTemplateWithPrompts(templateId);\n        if (!templateData) {\n          // CLEANUP: Remove uploaded files on template not found error\n          cleanupUploadedFiles(uploadedFiles);\n          return res.status(404).json({ message: \"Template not found\" });\n        }\n      }\n\n      // Calculate total credits needed based on analysis type\n      const creditsPerDocument = aiService.getProviderCredits(`${aiProvider}-${aiModel}`, analysisType);\n      const totalCreditsNeeded = creditsPerDocument * files.length;\n      \n      // RACE CONDITION FIX: Atomic credit check and reservation\n      // Deduct credits immediately to prevent race conditions\n      try {\n        await storage.deductUserCredits(req.user.id, totalCreditsNeeded, `Batch processing reservation: ${name}`);\n        console.log(`✅ Reserved ${totalCreditsNeeded} credits for batch: ${name}`);\n      } catch (creditError: any) {\n        // Clean up uploaded files if credit deduction fails\n        await cleanupUploadedFiles(files);\n        \n        if (creditError.message.includes(\"Insufficient credits\")) {\n          return res.status(402).json({ \n            message: \"Insufficient credits for batch processing\",\n            creditsNeeded: totalCreditsNeeded,\n            creditsAvailable: req.user.credits,\n            documentsCount: files.length\n          });\n        }\n        throw creditError;\n      }\n\n      // Create batch job\n      const batchJob = await storage.createBatchJob(req.user.id, {\n        name,\n        description,\n        analysisType,\n        templateId: templateData?.template.id || null,\n        aiProvider,\n        aiModel,\n        totalDocuments: files.length,\n        totalCreditsEstimated: totalCreditsNeeded,\n        metadata: {}\n      });\n      batchJobCreated = true;\n\n      // Create batch documents with file paths (not buffers) - SECURE: No more base64 in database\n      const batchDocuments = await Promise.all(\n        files.map(async (file, index) => {\n          return await storage.createBatchDocument({\n            batchJobId: batchJob.id,\n            originalFileName: file.originalname,\n            fileSize: file.size,\n            fileMimeType: file.mimetype,\n            sortOrder: index,\n            metadata: { \n              filePath: file.path, // Store disk path instead of buffer\n              tempFile: true // Mark for cleanup after processing\n            }\n          });\n        })\n      );\n\n      // Create queue job for batch processing\n      await storage.createQueueJob({\n        jobType: 'batch_processing',\n        jobData: {\n          batchJobId: batchJob.id,\n          userId: req.user.id,\n          aiProvider,\n          aiModel,\n          analysisType,\n          templateId\n        },\n        priority: 1\n      });\n\n      res.status(201).json({\n        batchJob,\n        documents: batchDocuments,\n        estimatedCredits: totalCreditsNeeded\n      });\n      \n      console.log(`✅ Batch job created: ${batchJob.id} with ${files.length} files`);\n      \n    } catch (error: any) {\n      console.error('❌ Batch creation error:', error);\n      \n      // CLEANUP: If batch creation fails, clean up uploaded files and refund credits\n      if (uploadedFiles.length > 0) {\n        await cleanupUploadedFiles(uploadedFiles);\n      }\n      \n      // If credits were deducted but batch creation failed, refund them\n      if (!batchJobCreated && uploadedFiles.length > 0) {\n        try {\n          // Reconstruct aiProvider and aiModel from request body for refund calculation\n          const { aiProvider: refundAiProvider, aiModel: refundAiModel } = req.body;\n          const creditsPerDocument = aiService.getProviderCredits(`${refundAiProvider}-${refundAiModel}`);\n          const totalCreditsNeeded = creditsPerDocument * uploadedFiles.length;\n          await storage.createCreditTransaction(\n            req.user.id, \n            \"refund\", \n            totalCreditsNeeded, \n            `Batch creation failed - refund for: ${name || 'unnamed batch'}`\n          );\n          console.log(`✅ Refunded ${totalCreditsNeeded} credits due to batch creation failure`);\n        } catch (refundError) {\n          console.error('❌ Failed to refund credits after batch creation failure:', refundError);\n        }\n      }\n      \n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get user's batch jobs\n  app.get(\"/api/batch/jobs\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const batchJobs = await storage.getBatchJobs(req.user.id, limit);\n      res.json(batchJobs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get specific batch job with details\n  app.get(\"/api/batch/jobs/:id\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const batchJob = await storage.getBatchJob(id, req.user.id);\n      if (!batchJob) {\n        return res.status(404).json({ message: \"Batch job not found\" });\n      }\n\n      const documents = await storage.getBatchDocuments(id);\n      res.json({ ...batchJob, documents });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get batch job statistics\n  app.get(\"/api/batch/statistics\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const statistics = await storage.getBatchJobStatistics(req.user.id);\n      res.json(statistics);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Cancel batch job (if still pending)\n  app.post(\"/api/batch/jobs/:id/cancel\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const batchJob = await storage.getBatchJob(id, req.user.id);\n      if (!batchJob) {\n        return res.status(404).json({ message: \"Batch job not found\" });\n      }\n\n      if (batchJob.status !== 'pending') {\n        return res.status(400).json({ message: \"Cannot cancel batch job that is already processing or completed\" });\n      }\n\n      const updatedJob = await storage.updateBatchJobStatus(id, 'cancelled');\n      res.json(updatedJob);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Delete batch job\n  app.delete(\"/api/batch/jobs/:id\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const batchJob = await storage.getBatchJob(id, req.user.id);\n      if (!batchJob) {\n        return res.status(404).json({ message: \"Batch job not found\" });\n      }\n\n      await storage.deleteBatchJob(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get batch processing results\n  app.get(\"/api/batch/jobs/:id/results\", requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const batchJob = await storage.getBatchJob(id, req.user.id);\n      if (!batchJob) {\n        return res.status(404).json({ message: \"Batch job not found\" });\n      }\n\n      const documents = await storage.getBatchDocuments(id);\n      \n      // Get analysis results for completed documents\n      const documentsWithResults = await Promise.all(\n        documents.map(async (doc) => {\n          if (doc.documentAnalysisId) {\n            const analysis = await storage.getDocumentAnalysis(doc.documentAnalysisId, req.user.id);\n            return { ...doc, analysis };\n          }\n          return doc;\n        })\n      );\n\n      // Calculate batch summary\n      const completedDocs = documentsWithResults.filter(doc => doc.status === 'completed');\n      const failedDocs = documentsWithResults.filter(doc => doc.status === 'failed');\n      \n      const summary = {\n        totalDocuments: documents.length,\n        completedDocuments: completedDocs.length,\n        failedDocuments: failedDocs.length,\n        totalCreditsUsed: batchJob.totalCreditsUsed,\n        overallRiskLevel: calculateBatchRiskLevel(completedDocs),\n        averageComplianceScore: calculateAverageCompliance(completedDocs)\n      };\n\n      res.json({\n        batchJob,\n        documents: documentsWithResults,\n        summary\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // System AI Provider management endpoints (Admin only)\n  app.get(\"/api/admin/system-api-keys\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // SECURITY: Use the new method that returns masked API keys only\n      const maskedProviders = await storage.getSystemAiProvidersForAdmin();\n      \n      // Add status information for each provider type\n      const providerStatus = ['openai', 'anthropic', 'gemini'].map(providerType => {\n        const provider = maskedProviders.find(p => p.provider === providerType);\n        return {\n          provider: providerType,\n          configured: !!provider,\n          isActive: provider?.isActive || false,\n          id: provider?.id || null,\n          maskedApiKey: provider?.maskedApiKey || '****',\n          createdAt: provider?.createdAt || null,\n          updatedAt: provider?.updatedAt || null\n        };\n      });\n      \n      // SECURITY: Return providers with masked keys, never full API keys\n      res.json({\n        providers: maskedProviders,\n        status: providerStatus\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/system-api-keys\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const validatedData = insertSystemAiProviderSchema.parse(req.body);\n      \n      // Check if provider already exists\n      const existingProvider = await storage.getSystemAiProvider(validatedData.provider);\n      if (existingProvider) {\n        return res.status(400).json({ message: `Chave para ${validatedData.provider} já existe. Use PUT para atualizar.` });\n      }\n      \n      const systemProvider = await storage.createSystemAiProvider(validatedData);\n      res.status(201).json(systemProvider);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/system-api-keys/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertSystemAiProviderSchema.partial().parse(req.body);\n      \n      const updatedProvider = await storage.updateSystemAiProvider(id, validatedData);\n      res.json(updatedProvider);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/system-api-keys/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSystemAiProvider(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/system-api-keys/:id/test\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get the system provider by ID\n      const providers = await storage.getSystemAiProviders();\n      const provider = providers.find(p => p.id === id);\n      \n      if (!provider || !provider.isActive) {\n        return res.status(404).json({ message: \"Provedor não encontrado ou inativo\" });\n      }\n      \n      // Test the API key connectivity\n      let testResult = { success: false, message: \"\", provider: provider.provider };\n      \n      try {\n        switch (provider.provider) {\n          case 'openai':\n            // Test OpenAI API key by making a simple request\n            const openaiTest = await fetch('https://api.openai.com/v1/models', {\n              headers: {\n                'Authorization': `Bearer ${provider.apiKey}`,\n                'Content-Type': 'application/json'\n              }\n            });\n            testResult.success = openaiTest.ok;\n            testResult.message = openaiTest.ok ? \"Conexão com OpenAI estabelecida com sucesso\" : `Erro OpenAI: ${openaiTest.statusText}`;\n            break;\n            \n          case 'anthropic':\n            // Test Anthropic API key\n            const anthropicTest = await fetch('https://api.anthropic.com/v1/messages', {\n              method: 'POST',\n              headers: {\n                'x-api-key': provider.apiKey,\n                'Content-Type': 'application/json',\n                'anthropic-version': '2023-06-01'\n              },\n              body: JSON.stringify({\n                model: \"claude-3-haiku-20240307\",\n                max_tokens: 1,\n                messages: [{ role: \"user\", content: \"test\" }]\n              })\n            });\n            testResult.success = anthropicTest.ok;\n            testResult.message = anthropicTest.ok ? \"Conexão com Anthropic estabelecida com sucesso\" : `Erro Anthropic: ${anthropicTest.statusText}`;\n            break;\n            \n          case 'gemini':\n            // Test Gemini API key\n            const geminiTest = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${provider.apiKey}`);\n            testResult.success = geminiTest.ok;\n            testResult.message = geminiTest.ok ? \"Conexão com Gemini estabelecida com sucesso\" : `Erro Gemini: ${geminiTest.statusText}`;\n            break;\n            \n          default:\n            testResult.message = \"Provedor não suportado para teste\";\n        }\n      } catch (networkError: any) {\n        testResult.success = false;\n        testResult.message = `Erro de conectividade: ${networkError.message}`;\n      }\n      \n      res.json(testResult);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin endpoints for batch management\n  app.get(\"/api/admin/batch/jobs\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const page = req.query.page ? parseInt(req.query.page as string) : 1;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const result = await storage.getAllBatchJobs(page, limit);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/batch/statistics\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const statistics = await storage.getBatchJobStatistics(); // No userId for admin view\n      res.json(statistics);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Queue management endpoints\n  app.get(\"/api/admin/queue/jobs\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const status = req.query.status as string;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const queueJobs = await storage.getQueueJobs(status, limit);\n      res.json(queueJobs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/queue/jobs/:id/retry\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const retryJob = await storage.retryFailedQueueJob(id);\n      res.json(retryJob);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/queue/jobs/:id\", requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteQueueJob(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Helper functions for batch processing\n  function calculateBatchRiskLevel(completedDocs: any[]): string {\n    if (completedDocs.length === 0) return 'unknown';\n    \n    const riskLevels = completedDocs.map(doc => doc.analysis?.result?.riskLevel).filter(Boolean);\n    const criticalCount = riskLevels.filter(level => level === 'critical').length;\n    const highCount = riskLevels.filter(level => level === 'high').length;\n    \n    if (criticalCount > 0) return 'critical';\n    if (highCount > riskLevels.length * 0.5) return 'high';\n    if (highCount > 0) return 'medium';\n    return 'low';\n  }\n\n  function calculateAverageCompliance(completedDocs: any[]): number {\n    const complianceScores = completedDocs\n      .map(doc => doc.analysis?.result?.legalCompliance?.score)\n      .filter(score => score !== undefined && score !== null);\n    \n    if (complianceScores.length === 0) return 0;\n    return Math.round(complianceScores.reduce((sum, score) => sum + score, 0) / complianceScores.length);\n  }\n\n  // Contact form endpoint with validation and email sending\n  app.post('/api/contact', async (req, res) => {\n    try {\n      // Validate request body with Zod schema\n      const validatedData = contactFormSchema.parse(req.body);\n      \n      // Send email using the email service\n      await emailService.sendContactEmail(validatedData);\n      \n      res.json({ \n        success: true, \n        message: 'Mensagem enviada com sucesso! Retornaremos em breve.' \n      });\n    } catch (error: any) {\n      console.error('Error processing contact form:', error);\n      \n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Dados inválidos', \n          errors: error.errors \n        });\n      }\n      \n      // Handle email service errors\n      if (error.message?.includes('SMTP') || error.message?.includes('configuração')) {\n        return res.status(503).json({ \n          message: 'Serviço de e-mail temporariamente indisponível. Tente novamente em alguns minutos.' \n        });\n      }\n      \n      res.status(500).json({ \n        message: 'Erro interno do servidor. Tente novamente.' \n      });\n    }\n  });\n\n  // Site configuration routes (Admin only)\n  app.get('/api/admin/site-config', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { section } = req.query;\n      const configs = await storage.getSiteConfigs(section as string);\n      res.json(configs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/site-config', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const validatedData = insertSiteConfigSchema.parse(req.body);\n      const config = await storage.createSiteConfig(validatedData);\n      res.json(config);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: 'Dados inválidos', errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/admin/site-config/:id', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertSiteConfigSchema.partial().parse(req.body);\n      const config = await storage.updateSiteConfig(id, validatedData);\n      res.json(config);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: 'Dados inválidos', errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/admin/site-config/:id', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSiteConfig(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // SMTP configuration routes (Admin only)\n  app.get('/api/admin/smtp-config', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const config = await storage.getSmtpConfig();\n      if (config) {\n        // Mask the password for security\n        const { password, ...safeConfig } = config;\n        res.json({ ...safeConfig, password: '********' });\n      } else {\n        res.json(null);\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/smtp-config', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const validatedData = insertSmtpConfigSchema.parse(req.body);\n      const config = await storage.createSmtpConfig(validatedData);\n      const { password, ...safeConfig } = config;\n      res.json({ ...safeConfig, password: '********' });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: 'Dados inválidos', errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/admin/smtp-config/:id', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const config = await storage.updateSmtpConfig(id, req.body);\n      const { password, ...safeConfig } = config;\n      res.json({ ...safeConfig, password: '********' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // SMTP test endpoint\n  app.post('/api/admin/smtp-test', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const validatedData = smtpTestSchema.parse(req.body);\n      await emailService.sendTestEmail(validatedData.testEmail);\n      res.json({ \n        success: true, \n        message: 'E-mail de teste enviado com sucesso!' \n      });\n    } catch (error: any) {\n      console.error('SMTP test error:', error);\n      \n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Dados inválidos', \n          errors: error.errors \n        });\n      }\n      \n      // Handle email service errors\n      if (error.message?.includes('SMTP') || error.message?.includes('configuração')) {\n        return res.status(503).json({ \n          message: 'Configuração SMTP inválida: ' + error.message \n        });\n      }\n      \n      res.status(500).json({ \n        message: 'Erro ao testar configuração SMTP: ' + error.message \n      });\n    }\n  });\n\n  // Stripe configuration routes (Admin only)\n  app.get('/api/admin/stripe-config', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const config = await storage.getStripeConfig();\n      if (config) {\n        // Mask sensitive keys for security\n        const { testSecretKey, liveSecretKey, webhookSecret, ...safeConfig } = config;\n        res.json({ \n          ...safeConfig, \n          testSecretKey: testSecretKey ? '********' : null,\n          liveSecretKey: liveSecretKey ? '********' : null,\n          webhookSecret: webhookSecret ? '********' : null,\n        });\n      } else {\n        res.json(null);\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/stripe-config', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const validatedData = insertStripeConfigSchema.parse(req.body);\n      const config = await storage.createStripeConfig(validatedData);\n      // Mask sensitive keys for security\n      const { testSecretKey, liveSecretKey, webhookSecret, ...safeConfig } = config;\n      res.json({ \n        ...safeConfig, \n        testSecretKey: testSecretKey ? '********' : null,\n        liveSecretKey: liveSecretKey ? '********' : null,\n        webhookSecret: webhookSecret ? '********' : null,\n      });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: 'Dados inválidos', errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/admin/stripe-config/:id', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const config = await storage.updateStripeConfig(id, req.body);\n      // Mask sensitive keys for security\n      const { testSecretKey, liveSecretKey, webhookSecret, ...safeConfig } = config;\n      res.json({ \n        ...safeConfig, \n        testSecretKey: testSecretKey ? '********' : null,\n        liveSecretKey: liveSecretKey ? '********' : null,\n        webhookSecret: webhookSecret ? '********' : null,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Stripe test endpoint\n  app.post('/api/admin/stripe-test', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { operationMode } = req.body;\n      \n      // Get the current Stripe configuration\n      const config = await storage.getStripeConfig();\n      if (!config) {\n        return res.status(400).json({ \n          success: false,\n          message: 'Configuração do Stripe não encontrada' \n        });\n      }\n\n      // Get the appropriate secret key based on operation mode\n      const secretKey = operationMode === 'live' ? config.liveSecretKey : config.testSecretKey;\n      if (!secretKey) {\n        return res.status(400).json({ \n          success: false,\n          message: `Chave secreta do Stripe não configurada para o modo ${operationMode}` \n        });\n      }\n\n      // Decrypt the secret key for testing\n      const { decryptApiKey } = await import('./lib/encryption');\n      const decryptedKey = await decryptApiKey(secretKey);\n      \n      // Create Stripe instance with the decrypted key\n      const stripe = new Stripe(decryptedKey, {\n        apiVersion: \"2025-08-27.basil\",\n      });\n\n      // Test the connection by retrieving account information\n      const account = await stripe.accounts.retrieve();\n      \n      res.json({ \n        success: true, \n        message: `Conexão com Stripe (${operationMode}) testada com sucesso!`,\n        accountId: account.id,\n        country: account.country\n      });\n    } catch (error: any) {\n      console.error('Stripe test error:', error);\n      \n      // Handle Stripe-specific errors\n      if (error.type === 'StripeInvalidRequestError') {\n        return res.status(400).json({ \n          success: false,\n          message: 'Chave do Stripe inválida: ' + error.message \n        });\n      }\n      \n      if (error.type === 'StripeAuthenticationError') {\n        return res.status(401).json({ \n          success: false,\n          message: 'Falha na autenticação do Stripe: Verifique suas chaves API' \n        });\n      }\n      \n      res.status(500).json({ \n        success: false,\n        message: 'Erro ao testar configuração do Stripe: ' + error.message \n      });\n    }\n  });\n\n  // Admin notifications routes\n  app.get('/api/admin/notifications', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { targetAudience } = req.query;\n      const notifications = await storage.getAdminNotifications(targetAudience as string);\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/notifications', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      ensureAuthenticated(req);\n      const notificationData = {\n        ...req.body,\n        createdBy: req.user.id\n      };\n      const notification = await storage.createAdminNotification(notificationData);\n      res.json(notification);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/admin/notifications/:id', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const notification = await storage.updateAdminNotification(id, req.body);\n      res.json(notification);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/admin/notifications/:id', requireSupabaseAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteAdminNotification(id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // User notifications (for regular users)\n  app.get('/api/notifications/unread', requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      ensureAuthenticated(req);\n      const notifications = await storage.getUnreadNotificationsForUser(req.user.id);\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/notifications/:id/view', requireSupabaseAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      ensureAuthenticated(req);\n      const { id } = req.params;\n      await storage.createUserNotificationView({\n        userId: req.user.id,\n        notificationId: id\n      });\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":94085},"server/storage.ts":{"content":"import { type User, type InsertUser, type LoginUser, type AiProvider, type InsertAiProvider, type SystemAiProvider, type InsertSystemAiProvider, type DocumentAnalysis, type InsertDocumentAnalysis, type CreditTransaction, type SupportTicket, type InsertSupportTicket, type TicketMessage, type InsertTicketMessage, type AiProviderConfig, type InsertAiProviderConfig, type CreditPackage, type InsertCreditPackage, type PlatformStats, type InsertPlatformStats, type DocumentTemplate, type InsertDocumentTemplate, type LegalClause, type InsertLegalClause, type TemplatePrompt, type InsertTemplatePrompt, type TemplateAnalysisRule, type InsertTemplateAnalysisRule, type BatchJob, type InsertBatchJob, type BatchDocument, type InsertBatchDocument, type QueueJob, type InsertQueueJob, type BatchDocumentMetadata, type SiteConfig, type InsertSiteConfig, type SmtpConfig, type InsertSmtpConfig, type AdminNotification, type InsertAdminNotification, type UserNotificationView, type InsertUserNotificationView, type StripeConfig, type InsertStripeConfig } from \"@shared/schema\";\nimport { encryptApiKey, decryptApiKey, migrateApiKey, isLegacyFormat, batchMigrateApiKeys } from \"./lib/encryption\";\nimport type { Express } from \"express\";\nimport { db } from \"./db\";\nimport { users, aiProviders, systemAiProviders, documentAnalyses, creditTransactions, supportTickets, ticketMessages, aiProviderConfigs, creditPackages, platformStats, documentTemplates, legalClauses, templatePrompts, templateAnalysisRules, batchJobs, batchDocuments, queueJobs, siteConfig, smtpConfig, adminNotifications, userNotificationViews, stripeConfig } from \"@shared/schema\";\nimport { eq, desc, and, count, sum, gte, sql, isNotNull, isNull, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUsersByRole(role: string): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  ensureUserBySupabase(supabaseId: string, email: string, supabaseUserData: any): Promise<User>;\n  updateUserCredits(id: string, credits: number): Promise<User>;\n  deductUserCredits(userId: string, amount: number, description: string): Promise<void>;\n  updateUserRole(id: string, role: string): Promise<User>;\n  updateStripeCustomerId(id: string, customerId: string): Promise<User>;\n  updateUserStripeMode(id: string, stripeMode: 'test' | 'live'): Promise<User>;\n\n  // Admin-specific user management\n  getAllUsers(page?: number, limit?: number): Promise<{users: User[], total: number}>;\n  getPlatformAnalytics(): Promise<{\n    totalUsers: number;\n    totalAnalyses: number;\n    totalCreditsUsed: number;\n    totalCreditsPurchased: number;\n    totalRevenue: number;\n    userGrowth: Array<{date: string, count: number}>;\n    analysisGrowth: Array<{date: string, count: number}>;\n    supportTicketsStats: {open: number, pending: number, resolved: number, closed: number};\n  }>;\n\n  // AI Provider management\n  getAiProviders(userId: string): Promise<AiProvider[]>;\n  getAiProvider(userId: string, provider: string): Promise<AiProvider | undefined>;\n  createAiProvider(userId: string, provider: InsertAiProvider): Promise<AiProvider>;\n  updateAiProvider(id: string, provider: Partial<InsertAiProvider>): Promise<AiProvider>;\n  deleteAiProvider(id: string): Promise<void>;\n\n  // System AI Provider management (Admin only)\n  getSystemAiProviders(): Promise<SystemAiProvider[]>;\n  getSystemAiProvider(provider: string): Promise<SystemAiProvider | undefined>;\n  createSystemAiProvider(provider: InsertSystemAiProvider): Promise<SystemAiProvider>;\n  updateSystemAiProvider(id: string, provider: Partial<InsertSystemAiProvider>): Promise<SystemAiProvider>;\n  deleteSystemAiProvider(id: string): Promise<void>;\n  getSystemApiKeyByProvider(provider: string): Promise<string | undefined>;\n  \n  // SECURITY: Get system providers with masked API keys for admin interface\n  getSystemAiProvidersForAdmin(): Promise<Array<Omit<SystemAiProvider, 'apiKey'> & { maskedApiKey: string }>>;\n\n  // AI Usage Analytics\n  getAiUsageAnalytics(): Promise<{\n    providerUsage: Array<{provider: string, model: string, count: number, totalCredits: number}>;\n    analysisTypes: Array<{type: string, count: number}>;\n    errorRates: Array<{provider: string, model: string, successRate: number}>;\n  }>;\n\n  // Credit Management\n  getCreditPackages(): Promise<CreditPackage[]>;\n  getCreditPackage(packageId: string): Promise<CreditPackage | undefined>;\n  createCreditPackage(pkg: InsertCreditPackage): Promise<CreditPackage>;\n  updateCreditPackage(id: string, pkg: Partial<InsertCreditPackage>): Promise<CreditPackage>;\n  deleteCreditPackage(id: string): Promise<void>;\n\n  // SECURITY: Migration functions for upgrading legacy encrypted keys\n  migrateSystemApiKeys(): Promise<{\n    total: number;\n    migrated: number;\n    alreadySecure: number;\n    errors: Array<{id: string, error: string}>;\n  }>;\n  performOneTimeMigration(): Promise<void>;\n\n  // Document Analysis\n  getDocumentAnalyses(userId: string, limit?: number): Promise<DocumentAnalysis[]>;\n  getDeletedAnalyses(userId: string): Promise<DocumentAnalysis[]>;\n  getDocumentAnalysis(id: string, userId: string): Promise<DocumentAnalysis | undefined>;\n  createDocumentAnalysis(userId: string, analysis: InsertDocumentAnalysis): Promise<DocumentAnalysis>;\n  updateDocumentAnalysisResult(id: string, result: any, status: string): Promise<DocumentAnalysis>;\n  softDeleteAnalysis(id: string, userId: string, deletedBy: string): Promise<DocumentAnalysis>;\n  restoreAnalysis(id: string, userId: string): Promise<DocumentAnalysis>;\n  hardDeleteAnalysis(id: string): Promise<void>;\n  cleanupExpiredAnalyses(): Promise<number>;\n\n  // Credit Transactions\n  getCreditTransactions(userId: string): Promise<CreditTransaction[]>;\n  getCreditTransactionByStripeId(stripePaymentIntentId: string): Promise<CreditTransaction | undefined>;\n  createCreditTransaction(userId: string, type: string, amount: number, description: string, stripePaymentIntentId?: string): Promise<CreditTransaction>;\n  \n  // Support Tickets\n  getSupportTickets(userId: string): Promise<SupportTicket[]>;\n  getAllSupportTickets(): Promise<SupportTicket[]>;\n  getSupportTicket(id: string, userId: string): Promise<SupportTicket | undefined>;\n  getSupportTicketById(id: string): Promise<SupportTicket | undefined>;\n  createSupportTicket(userId: string, ticket: InsertSupportTicket): Promise<SupportTicket>;\n  updateSupportTicketStatus(id: string, status: string): Promise<SupportTicket>;\n\n  // Ticket Messages\n  getTicketMessages(ticketId: string): Promise<TicketMessage[]>;\n  createTicketMessage(ticketMessage: InsertTicketMessage): Promise<TicketMessage>;\n\n  // Platform Stats\n  getPlatformStats(): Promise<PlatformStats | undefined>;\n  updatePlatformStats(stats: InsertPlatformStats): Promise<PlatformStats>;\n  computeAndUpdatePlatformStats(): Promise<PlatformStats>;\n\n  // Site Configuration\n  getSiteConfigs(section?: string): Promise<SiteConfig[]>;\n  getSiteConfig(section: string, key: string): Promise<SiteConfig | undefined>;\n  createSiteConfig(config: InsertSiteConfig): Promise<SiteConfig>;\n  updateSiteConfig(id: string, config: Partial<InsertSiteConfig>): Promise<SiteConfig>;\n  deleteSiteConfig(id: string): Promise<void>;\n\n  // SMTP Configuration\n  getSmtpConfig(): Promise<SmtpConfig | undefined>;\n  createSmtpConfig(config: InsertSmtpConfig): Promise<SmtpConfig>;\n  updateSmtpConfig(id: string, config: Partial<InsertSmtpConfig>): Promise<SmtpConfig>;\n  deleteSmtpConfig(id: string): Promise<void>;\n\n  // Stripe Configuration\n  getStripeConfig(): Promise<StripeConfig | undefined>;\n  createStripeConfig(config: InsertStripeConfig): Promise<StripeConfig>;\n  updateStripeConfig(id: string, config: Partial<InsertStripeConfig>): Promise<StripeConfig>;\n  deleteStripeConfig(id: string): Promise<void>;\n\n  // Admin Notifications\n  getAdminNotifications(targetAudience?: string): Promise<AdminNotification[]>;\n  getAdminNotification(id: string): Promise<AdminNotification | undefined>;\n  createAdminNotification(notification: InsertAdminNotification): Promise<AdminNotification>;\n  updateAdminNotification(id: string, notification: Partial<InsertAdminNotification>): Promise<AdminNotification>;\n  deleteAdminNotification(id: string): Promise<void>;\n\n  // User Notification Views\n  getUserNotificationViews(userId: string): Promise<UserNotificationView[]>;\n  createUserNotificationView(view: InsertUserNotificationView): Promise<UserNotificationView>;\n  getUnreadNotificationsForUser(userId: string): Promise<AdminNotification[]>;\n\n  // Payment processing\n  processPaymentTransaction(params: {\n    userId: string;\n    stripePaymentIntentId: string;\n    amount: number;\n    credits: number;\n    packageId: string;\n    stripeMode: 'test' | 'live';\n  }): Promise<void>;\n\n  // AI Provider Configs (aliases for existing methods)\n  getAiProviderConfigs(userId: string): Promise<AiProvider[]>;\n  getAiProviderConfig(id: string): Promise<AiProvider | undefined>;\n  createAiProviderConfig(userId: string, config: InsertAiProvider): Promise<AiProvider>;\n  updateAiProviderConfig(id: string, config: Partial<InsertAiProvider>): Promise<AiProvider>;\n  deleteAiProviderConfig(id: string): Promise<void>;\n\n  // Document Templates\n  getDocumentTemplates(): Promise<DocumentTemplate[]>;\n  getDocumentTemplatesByCategory(category: string): Promise<DocumentTemplate[]>;\n  getDocumentTemplateById(id: string): Promise<DocumentTemplate | undefined>;\n  createDocumentTemplate(template: InsertDocumentTemplate): Promise<DocumentTemplate>;\n  updateDocumentTemplate(id: string, template: Partial<InsertDocumentTemplate>): Promise<DocumentTemplate>;\n  deleteDocumentTemplate(id: string): Promise<void>;\n  getTemplateWithPrompts(templateId: string, aiProvider?: string): Promise<any>;\n\n  // Legal Clauses\n  getLegalClauses(): Promise<LegalClause[]>;\n  getLegalClausesByCategory(category: string): Promise<LegalClause[]>;\n  getLegalClausesByTemplate(templateId: string): Promise<LegalClause[]>;\n  createLegalClause(clause: InsertLegalClause): Promise<LegalClause>;\n  updateLegalClause(id: string, clause: Partial<InsertLegalClause>): Promise<LegalClause>;\n  deleteLegalClause(id: string): Promise<void>;\n\n  // Template Prompts\n  getTemplatePrompts(templateId: string): Promise<TemplatePrompt[]>;\n  createTemplatePrompt(prompt: InsertTemplatePrompt): Promise<TemplatePrompt>;\n  updateTemplatePrompt(id: string, prompt: Partial<InsertTemplatePrompt>): Promise<TemplatePrompt>;\n  deleteTemplatePrompt(id: string): Promise<void>;\n\n  // Template Analysis Rules\n  getTemplateAnalysisRules(templateId: string): Promise<TemplateAnalysisRule[]>;\n  createTemplateAnalysisRule(rule: InsertTemplateAnalysisRule): Promise<TemplateAnalysisRule>;\n  updateTemplateAnalysisRule(id: string, rule: Partial<InsertTemplateAnalysisRule>): Promise<TemplateAnalysisRule>;\n  deleteTemplateAnalysisRule(id: string): Promise<void>;\n\n  // Batch Jobs\n  getBatchJobs(userId: string): Promise<BatchJob[]>;\n  getAllBatchJobs(): Promise<BatchJob[]>;\n  getBatchJob(id: string, userId?: string): Promise<BatchJob | undefined>;\n  createBatchJob(job: InsertBatchJob): Promise<BatchJob>;\n  updateBatchJobStatus(id: string, status: string): Promise<void>;\n  deleteBatchJob(id: string): Promise<void>;\n  getBatchJobStatistics(userId: string): Promise<any>;\n\n  // Batch Documents\n  getBatchDocuments(batchJobId: string): Promise<BatchDocument[]>;\n  createBatchDocument(doc: InsertBatchDocument): Promise<BatchDocument>;\n\n  // Queue Jobs\n  getQueueJobs(): Promise<QueueJob[]>;\n  createQueueJob(job: InsertQueueJob): Promise<QueueJob>;\n  retryFailedQueueJob(id: string): Promise<void>;\n  deleteQueueJob(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User management\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    const usersByRole = await db.select().from(users).where(eq(users.role, role as \"user\" | \"admin\" | \"support\"));\n    return usersByRole;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async ensureUserBySupabase(supabaseId: string, email: string, supabaseUserData: any): Promise<User> {\n    const [userBySupabaseId] = await db\n      .select()\n      .from(users)\n      .where(eq(users.supabaseId, supabaseId))\n      .limit(1);\n    \n    if (userBySupabaseId) {\n      return userBySupabaseId;\n    }\n\n    const [userByEmail] = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n    \n    if (userByEmail) {\n      if (userByEmail.supabaseId !== supabaseId) {\n        const [updatedUser] = await db\n          .update(users)\n          .set({ supabaseId })\n          .where(eq(users.id, userByEmail.id))\n          .returning();\n        return updatedUser;\n      }\n      return userByEmail;\n    }\n\n    const [newUser] = await db\n      .insert(users)\n      .values({\n        id: crypto.randomUUID(),\n        email,\n        username: email.split('@')[0],\n        firstName: supabaseUserData.user_metadata?.first_name || email.split('@')[0],\n        lastName: supabaseUserData.user_metadata?.last_name || '',\n        password: 'supabase-auth',\n        supabaseId,\n        role: 'user',\n        credits: 5\n      })\n      .returning();\n    \n    return newUser;\n  }\n\n  async updateUserCredits(id: string, credits: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ credits, updatedAt: sql`CURRENT_TIMESTAMP` })\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error(\"User not found\");\n    return user;\n  }\n\n  async deductUserCredits(userId: string, amount: number, description: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      const [currentUser] = await tx\n        .select()\n        .from(users)\n        .where(eq(users.id, userId));\n      \n      if (!currentUser) {\n        throw new Error(`User not found: ${userId}`);\n      }\n\n      if (currentUser.credits < amount) {\n        throw new Error(`Insufficient credits: ${currentUser.credits} available, ${amount} required`);\n      }\n\n      const newCredits = currentUser.credits - amount;\n      await tx\n        .update(users)\n        .set({ \n          credits: newCredits,\n          updatedAt: sql`CURRENT_TIMESTAMP`\n        })\n        .where(eq(users.id, userId));\n\n      await tx\n        .insert(creditTransactions)\n        .values({\n          userId,\n          type: 'usage',\n          amount: -amount,\n          description,\n        });\n    });\n  }\n\n  async updateUserRole(id: string, role: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role: role as \"user\" | \"admin\" | \"support\", updatedAt: sql`CURRENT_TIMESTAMP` })\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error(\"User not found\");\n    return user;\n  }\n\n  async updateStripeCustomerId(id: string, customerId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ stripeCustomerId: customerId, updatedAt: sql`CURRENT_TIMESTAMP` })\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error(\"User not found\");\n    return user;\n  }\n\n  async updateUserStripeMode(id: string, stripeMode: 'test' | 'live'): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ stripeMode, updatedAt: sql`CURRENT_TIMESTAMP` })\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error(\"User not found\");\n    return user;\n  }\n\n  // AI Provider management\n  async getAiProviders(userId: string): Promise<AiProvider[]> {\n    return await db\n      .select()\n      .from(aiProviders)\n      .where(eq(aiProviders.userId, userId))\n      .orderBy(aiProviders.createdAt);\n  }\n\n  async getAiProvider(userId: string, provider: string): Promise<AiProvider | undefined> {\n    const [result] = await db\n      .select()\n      .from(aiProviders)\n      .where(and(eq(aiProviders.userId, userId), eq(aiProviders.provider, provider)));\n    return result || undefined;\n  }\n\n  async createAiProvider(userId: string, providerData: InsertAiProvider): Promise<AiProvider> {\n    const [provider] = await db\n      .insert(aiProviders)\n      .values({\n        ...providerData,\n        userId,\n      })\n      .returning();\n    return provider;\n  }\n\n  async updateAiProvider(id: string, providerData: Partial<InsertAiProvider>): Promise<AiProvider> {\n    const [provider] = await db\n      .update(aiProviders)\n      .set(providerData)\n      .where(eq(aiProviders.id, id))\n      .returning();\n    if (!provider) throw new Error(\"AI Provider not found\");\n    return provider;\n  }\n\n  async deleteAiProvider(id: string): Promise<void> {\n    await db.delete(aiProviders).where(eq(aiProviders.id, id));\n  }\n\n  // System AI Provider management (Admin only) - WITH ENCRYPTION\n  async getSystemAiProviders(): Promise<SystemAiProvider[]> {\n    return await db\n      .select()\n      .from(systemAiProviders)\n      .orderBy(systemAiProviders.createdAt);\n  }\n\n  // SECURITY: Get system providers with masked API keys for admin interface\n  async getSystemAiProvidersForAdmin(): Promise<Array<Omit<SystemAiProvider, 'apiKey'> & { maskedApiKey: string }>> {\n    const providers = await db\n      .select()\n      .from(systemAiProviders)\n      .orderBy(systemAiProviders.createdAt);\n\n    return providers.map(provider => {\n      const { apiKey, ...providerWithoutKey } = provider;\n      let maskedKey = '****';\n      \n      // SECURITY: Decrypt only to mask - never return full key\n      if (apiKey) {\n        try {\n          const decryptedKey = decryptApiKey(apiKey);\n          maskedKey = decryptedKey.length >= 4 ? `****${decryptedKey.slice(-4)}` : '****';\n        } catch (error) {\n          console.error('Failed to decrypt key for masking:', error);\n          maskedKey = '****';\n        }\n      }\n\n      return {\n        ...providerWithoutKey,\n        maskedApiKey: maskedKey\n      };\n    });\n  }\n\n  async getSystemAiProvider(provider: string): Promise<SystemAiProvider | undefined> {\n    const [result] = await db\n      .select()\n      .from(systemAiProviders)\n      .where(eq(systemAiProviders.provider, provider));\n    return result || undefined;\n  }\n\n  async createSystemAiProvider(providerData: InsertSystemAiProvider): Promise<SystemAiProvider> {\n    // SECURITY: Encrypt API key before storing\n    const encryptedData = {\n      ...providerData,\n      apiKey: encryptApiKey(providerData.apiKey)\n    };\n    \n    const [provider] = await db\n      .insert(systemAiProviders)\n      .values(encryptedData)\n      .returning();\n    return provider;\n  }\n\n  async updateSystemAiProvider(id: string, providerData: Partial<InsertSystemAiProvider>): Promise<SystemAiProvider> {\n    // SECURITY: Encrypt API key if provided\n    const updateData: any = { ...providerData, updatedAt: new Date() };\n    if (providerData.apiKey) {\n      updateData.apiKey = encryptApiKey(providerData.apiKey);\n    }\n    \n    const [provider] = await db\n      .update(systemAiProviders)\n      .set(updateData)\n      .where(eq(systemAiProviders.id, id))\n      .returning();\n    if (!provider) throw new Error(\"System AI Provider not found\");\n    return provider;\n  }\n\n  async deleteSystemAiProvider(id: string): Promise<void> {\n    await db.delete(systemAiProviders).where(eq(systemAiProviders.id, id));\n  }\n\n  async getSystemApiKeyByProvider(provider: string): Promise<string | undefined> {\n    const [result] = await db\n      .select({ apiKey: systemAiProviders.apiKey })\n      .from(systemAiProviders)\n      .where(and(\n        eq(systemAiProviders.provider, provider),\n        eq(systemAiProviders.isActive, true)\n      ));\n    \n    // SECURITY: Decrypt API key for immediate use only\n    if (result?.apiKey) {\n      try {\n        return decryptApiKey(result.apiKey);\n      } catch (error) {\n        console.error(`Failed to decrypt API key for provider ${provider}:`, error);\n        return undefined;\n      }\n    }\n    \n    return undefined;\n  }\n\n  // Admin-specific user management\n  async getAllUsers(page: number = 1, limit: number = 20): Promise<{users: User[], total: number}> {\n    const offset = (page - 1) * limit;\n    \n    const [usersResult, totalResult] = await Promise.all([\n      db.select().from(users).orderBy(desc(users.createdAt)).limit(limit).offset(offset),\n      db.select({ count: count() }).from(users)\n    ]);\n    \n    return {\n      users: usersResult,\n      total: totalResult[0].count\n    };\n  }\n\n  async getPlatformAnalytics(): Promise<{\n    totalUsers: number;\n    totalAnalyses: number;\n    totalCreditsUsed: number;\n    totalCreditsPurchased: number;\n    totalRevenue: number;\n    userGrowth: Array<{date: string, count: number}>;\n    analysisGrowth: Array<{date: string, count: number}>;\n    supportTicketsStats: {open: number, pending: number, resolved: number, closed: number};\n  }> {\n    const [userCount, analysisCount] = await Promise.all([\n      db.select({ count: count() }).from(users),\n      db.select({ count: count() }).from(documentAnalyses)\n    ]);\n\n    return {\n      totalUsers: userCount[0].count,\n      totalAnalyses: analysisCount[0].count,\n      totalCreditsUsed: 0,\n      totalCreditsPurchased: 0,\n      totalRevenue: 0,\n      userGrowth: [],\n      analysisGrowth: [],\n      supportTicketsStats: { open: 0, pending: 0, resolved: 0, closed: 0 }\n    };\n  }\n\n  // Document Analysis\n  async getDocumentAnalyses(userId: string, limit?: number): Promise<DocumentAnalysis[]> {\n    const query = db\n      .select()\n      .from(documentAnalyses)\n      .where(and(\n        eq(documentAnalyses.userId, userId),\n        isNull(documentAnalyses.deletedAt)\n      ))\n      .orderBy(desc(documentAnalyses.createdAt));\n    \n    if (limit) {\n      return await query.limit(limit);\n    }\n    \n    return await query;\n  }\n\n  async getDeletedAnalyses(userId: string): Promise<DocumentAnalysis[]> {\n    return await db\n      .select()\n      .from(documentAnalyses)\n      .where(and(\n        eq(documentAnalyses.userId, userId),\n        isNotNull(documentAnalyses.deletedAt)\n      ))\n      .orderBy(desc(documentAnalyses.deletedAt));\n  }\n\n  async getDocumentAnalysis(id: string, userId: string): Promise<DocumentAnalysis | undefined> {\n    const [analysis] = await db\n      .select()\n      .from(documentAnalyses)\n      .where(and(eq(documentAnalyses.id, id), eq(documentAnalyses.userId, userId)));\n    return analysis || undefined;\n  }\n\n  async createDocumentAnalysis(userId: string, analysisData: InsertDocumentAnalysis): Promise<DocumentAnalysis> {\n    const [analysis] = await db\n      .insert(documentAnalyses)\n      .values({\n        ...analysisData,\n        userId,\n        status: \"pending\",\n      })\n      .returning();\n    return analysis;\n  }\n\n  async updateDocumentAnalysisResult(id: string, result: any, status: string): Promise<DocumentAnalysis> {\n    const [analysis] = await db\n      .update(documentAnalyses)\n      .set({ result, status })\n      .where(eq(documentAnalyses.id, id))\n      .returning();\n    if (!analysis) throw new Error(\"Document analysis not found\");\n    return analysis;\n  }\n\n  async softDeleteAnalysis(id: string, userId: string, deletedBy: string): Promise<DocumentAnalysis> {\n    const [analysis] = await db\n      .update(documentAnalyses)\n      .set({ \n        deletedAt: new Date(),\n        deletedBy\n      })\n      .where(and(\n        eq(documentAnalyses.id, id),\n        eq(documentAnalyses.userId, userId),\n        isNull(documentAnalyses.deletedAt)\n      ))\n      .returning();\n    if (!analysis) throw new Error(\"Document analysis not found or already deleted\");\n    return analysis;\n  }\n\n  async restoreAnalysis(id: string, userId: string): Promise<DocumentAnalysis> {\n    const [analysis] = await db\n      .update(documentAnalyses)\n      .set({ \n        deletedAt: null,\n        deletedBy: null\n      })\n      .where(and(\n        eq(documentAnalyses.id, id),\n        eq(documentAnalyses.userId, userId),\n        isNotNull(documentAnalyses.deletedAt)\n      ))\n      .returning();\n    if (!analysis) throw new Error(\"Document analysis not found or not deleted\");\n    return analysis;\n  }\n\n  async hardDeleteAnalysis(id: string): Promise<void> {\n    await db.delete(documentAnalyses).where(eq(documentAnalyses.id, id));\n  }\n\n  async cleanupExpiredAnalyses(): Promise<number> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const result = await db\n      .delete(documentAnalyses)\n      .where(and(\n        isNotNull(documentAnalyses.deletedAt),\n        lte(documentAnalyses.deletedAt, thirtyDaysAgo)\n      ));\n\n    return result.rowCount || 0;\n  }\n\n  // Credit Transactions\n  async getCreditTransactions(userId: string): Promise<CreditTransaction[]> {\n    return await db\n      .select()\n      .from(creditTransactions)\n      .where(eq(creditTransactions.userId, userId))\n      .orderBy(desc(creditTransactions.createdAt));\n  }\n\n  async getCreditTransactionByStripeId(stripePaymentIntentId: string): Promise<CreditTransaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(creditTransactions)\n      .where(eq(creditTransactions.stripePaymentIntentId, stripePaymentIntentId));\n    return transaction || undefined;\n  }\n\n  async createCreditTransaction(userId: string, type: string, amount: number, description: string, stripePaymentIntentId?: string): Promise<CreditTransaction> {\n    const [transaction] = await db\n      .insert(creditTransactions)\n      .values({\n        userId,\n        type,\n        amount,\n        description,\n        stripePaymentIntentId\n      })\n      .returning();\n    return transaction;\n  }\n\n  // Support Tickets\n  async getSupportTickets(userId: string): Promise<SupportTicket[]> {\n    return await db\n      .select()\n      .from(supportTickets)\n      .where(eq(supportTickets.userId, userId))\n      .orderBy(desc(supportTickets.createdAt));\n  }\n\n  async getAllSupportTickets(): Promise<SupportTicket[]> {\n    return await db\n      .select()\n      .from(supportTickets)\n      .orderBy(desc(supportTickets.createdAt));\n  }\n\n  async getSupportTicket(id: string, userId: string): Promise<SupportTicket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(supportTickets)\n      .where(and(eq(supportTickets.id, id), eq(supportTickets.userId, userId)));\n    return ticket || undefined;\n  }\n\n  async getSupportTicketById(id: string): Promise<SupportTicket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(supportTickets)\n      .where(eq(supportTickets.id, id));\n    return ticket || undefined;\n  }\n\n  async createSupportTicket(userId: string, ticketData: InsertSupportTicket): Promise<SupportTicket> {\n    const [ticket] = await db\n      .insert(supportTickets)\n      .values({\n        ...ticketData,\n        userId,\n        status: \"open\",\n      })\n      .returning();\n    return ticket;\n  }\n\n  async updateSupportTicketStatus(id: string, status: string): Promise<SupportTicket> {\n    const [ticket] = await db\n      .update(supportTickets)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(supportTickets.id, id))\n      .returning();\n    if (!ticket) throw new Error(\"Support ticket not found\");\n    return ticket;\n  }\n\n  // Ticket Messages\n  async getTicketMessages(ticketId: string): Promise<TicketMessage[]> {\n    return await db\n      .select()\n      .from(ticketMessages)\n      .where(eq(ticketMessages.ticketId, ticketId))\n      .orderBy(ticketMessages.createdAt);\n  }\n\n  async createTicketMessage(ticketMessage: InsertTicketMessage): Promise<TicketMessage> {\n    const [message] = await db\n      .insert(ticketMessages)\n      .values(ticketMessage)\n      .returning();\n    return message;\n  }\n\n  // Platform Stats methods\n  async getPlatformStats(): Promise<PlatformStats | undefined> {\n    const [stats] = await db.select().from(platformStats).limit(1);\n    return stats || undefined;\n  }\n\n  async updatePlatformStats(statsData: InsertPlatformStats): Promise<PlatformStats> {\n    const [stats] = await db\n      .insert(platformStats)\n      .values(statsData)\n      .onConflictDoUpdate({\n        target: [platformStats.id],\n        set: statsData\n      })\n      .returning();\n    return stats;\n  }\n\n  async computeAndUpdatePlatformStats(): Promise<PlatformStats> {\n    const analytics = await this.getPlatformAnalytics();\n    const statsData: InsertPlatformStats = {\n      totalUsers: analytics.totalUsers,\n      totalAnalyses: analytics.totalAnalyses,\n      totalDocuments: 0, // Can compute from document analyses\n      averageAccuracy: \"0.00\"\n    };\n    return await this.updatePlatformStats(statsData);\n  }\n\n  // AI Usage Analytics\n  async getAiUsageAnalytics(): Promise<{\n    providerUsage: Array<{provider: string, model: string, count: number, totalCredits: number}>;\n    analysisTypes: Array<{type: string, count: number}>;\n    errorRates: Array<{provider: string, model: string, successRate: number}>;\n  }> {\n    return {\n      providerUsage: [],\n      analysisTypes: [],\n      errorRates: []\n    };\n  }\n\n  // Credit Packages\n  async getCreditPackages(): Promise<CreditPackage[]> {\n    return await db.select().from(creditPackages).orderBy(creditPackages.createdAt);\n  }\n\n  async getCreditPackage(packageId: string): Promise<CreditPackage | undefined> {\n    const [pkg] = await db.select().from(creditPackages).where(eq(creditPackages.id, packageId));\n    return pkg || undefined;\n  }\n\n  async createCreditPackage(pkgData: InsertCreditPackage): Promise<CreditPackage> {\n    const [pkg] = await db.insert(creditPackages).values(pkgData).returning();\n    return pkg;\n  }\n\n  async updateCreditPackage(id: string, pkgData: Partial<InsertCreditPackage>): Promise<CreditPackage> {\n    const [pkg] = await db.update(creditPackages).set(pkgData).where(eq(creditPackages.id, id)).returning();\n    if (!pkg) throw new Error(\"Credit package not found\");\n    return pkg;\n  }\n\n  async deleteCreditPackage(id: string): Promise<void> {\n    await db.delete(creditPackages).where(eq(creditPackages.id, id));\n  }\n\n  // SECURITY: Migration functions for upgrading legacy encrypted keys\n  \n  /**\n   * Migrates all system AI provider keys from legacy format to secure GCM format\n   * @returns Migration results with counts and errors\n   */\n  async migrateSystemApiKeys(): Promise<{\n    total: number;\n    migrated: number;\n    alreadySecure: number;\n    errors: Array<{id: string, error: string}>;\n  }> {\n    console.log('🔄 Starting migration of system AI provider keys...');\n    \n    try {\n      const providers = await db.select().from(systemAiProviders);\n      const results = {\n        total: providers.length,\n        migrated: 0,\n        alreadySecure: 0,\n        errors: [] as Array<{id: string, error: string}>\n      };\n      \n      for (const provider of providers) {\n        try {\n          if (!provider.apiKey) {\n            console.log(`⚠️  Provider ${provider.provider} has no API key, skipping`);\n            continue;\n          }\n          \n          // Check if key is in legacy format\n          if (isLegacyFormat(provider.apiKey)) {\n            console.log(`🔄 Migrating provider ${provider.provider} from legacy format`);\n            \n            // Migrate the key\n            const migratedKey = migrateApiKey(provider.apiKey);\n            \n            // Update in database\n            await db\n              .update(systemAiProviders)\n              .set({ \n                apiKey: migratedKey,\n                updatedAt: new Date()\n              })\n              .where(eq(systemAiProviders.id, provider.id));\n            \n            results.migrated++;\n            console.log(`✅ Successfully migrated provider ${provider.provider}`);\n          } else {\n            results.alreadySecure++;\n            console.log(`✅ Provider ${provider.provider} already uses secure format`);\n          }\n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n          results.errors.push({id: provider.id, error: errorMsg});\n          console.error(`❌ Failed to migrate provider ${provider.provider}:`, errorMsg);\n        }\n      }\n      \n      console.log(`🏁 Migration completed:`);\n      console.log(`   Total providers: ${results.total}`);\n      console.log(`   Migrated: ${results.migrated}`);\n      console.log(`   Already secure: ${results.alreadySecure}`);\n      console.log(`   Errors: ${results.errors.length}`);\n      \n      return results;\n    } catch (error) {\n      // DEFENSIVE: Handle case where table doesn't exist yet\n      const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n      if (errorMsg.includes('relation') && errorMsg.includes('does not exist')) {\n        console.log(`✅ Table system_ai_providers doesn't exist yet - skipping migration (this is normal for new installations)`);\n        return {\n          total: 0,\n          migrated: 0,\n          alreadySecure: 0,\n          errors: []\n        };\n      }\n      \n      // Re-throw other errors\n      console.error('❌ Failed to access system_ai_providers table:', errorMsg);\n      throw error;\n    }\n  }\n  \n  /**\n   * One-time migration function to upgrade all encrypted data\n   * Should be called once during application startup after encryption validation\n   */\n  async performOneTimeMigration(): Promise<void> {\n    try {\n      console.log('🔄 Starting one-time security migration...');\n      \n      // Check if migration was already performed\n      const migrationKey = 'encryption_migration_v2_gcm';\n      const existingMigration = await this.checkMigrationStatus(migrationKey);\n      \n      if (existingMigration) {\n        console.log('✅ Migration already completed, skipping');\n        return;\n      }\n      \n      // Perform migration\n      const systemResults = await this.migrateSystemApiKeys();\n      \n      // Check if any errors occurred\n      if (systemResults.errors.length > 0) {\n        console.warn(`⚠️  Migration completed with ${systemResults.errors.length} errors`);\n        // Log errors but don't fail completely\n        systemResults.errors.forEach(error => {\n          console.error(`   Error migrating ${error.id}: ${error.error}`);\n        });\n      }\n      \n      // Mark migration as completed\n      await this.markMigrationCompleted(migrationKey);\n      \n      console.log('✅ One-time security migration completed successfully');\n    } catch (error) {\n      console.error('❌ Critical error during security migration:', error);\n      throw new Error(`Security migration failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  \n  /**\n   * Check if a specific migration was already performed\n   * Uses a simple approach with platformStats or creates a migration tracking mechanism\n   */\n  private async checkMigrationStatus(migrationKey: string): Promise<boolean> {\n    try {\n      // Simple check: look for a marker in platformStats or use a file-based approach\n      // For now, we'll use a simple file-based approach\n      const fs = await import('fs');\n      const path = await import('path');\n      const migrationFile = path.join('/tmp', `${migrationKey}.completed`);\n      \n      return fs.existsSync(migrationFile);\n    } catch (error) {\n      console.warn('Migration status check failed, assuming not migrated:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Mark a migration as completed\n   */\n  private async markMigrationCompleted(migrationKey: string): Promise<void> {\n    try {\n      const fs = await import('fs');\n      const path = await import('path');\n      const migrationFile = path.join('/tmp', `${migrationKey}.completed`);\n      \n      const migrationData = {\n        migrationKey,\n        completedAt: new Date().toISOString(),\n        version: 'v2_gcm'\n      };\n      \n      await fs.promises.writeFile(migrationFile, JSON.stringify(migrationData, null, 2));\n      console.log(`✅ Migration ${migrationKey} marked as completed`);\n    } catch (error) {\n      console.warn('Failed to mark migration as completed:', error);\n      // Don't throw here as this is not critical\n    }\n  }\n\n  // Site Configuration methods\n  async getSiteConfigs(section?: string): Promise<SiteConfig[]> {\n    if (section) {\n      return await db.select().from(siteConfig).where(eq(siteConfig.section, section));\n    }\n    return await db.select().from(siteConfig);\n  }\n\n  async getSiteConfig(section: string, key: string): Promise<SiteConfig | undefined> {\n    const [config] = await db.select()\n      .from(siteConfig)\n      .where(and(eq(siteConfig.section, section), eq(siteConfig.key, key)))\n      .limit(1);\n    return config || undefined;\n  }\n\n  async createSiteConfig(configData: InsertSiteConfig): Promise<SiteConfig> {\n    const [config] = await db.insert(siteConfig).values(configData).returning();\n    return config;\n  }\n\n  async updateSiteConfig(id: string, configData: Partial<InsertSiteConfig>): Promise<SiteConfig> {\n    const [config] = await db.update(siteConfig)\n      .set(configData)\n      .where(eq(siteConfig.id, id))\n      .returning();\n    return config;\n  }\n\n  async deleteSiteConfig(id: string): Promise<void> {\n    await db.delete(siteConfig).where(eq(siteConfig.id, id));\n  }\n\n  // SMTP Configuration methods\n  async getSmtpConfig(): Promise<SmtpConfig | undefined> {\n    const [config] = await db.select().from(smtpConfig).where(eq(smtpConfig.isActive, true)).limit(1);\n    return config || undefined;\n  }\n\n  async createSmtpConfig(configData: InsertSmtpConfig): Promise<SmtpConfig> {\n    // Encrypt password before storing\n    const encryptedConfig = {\n      ...configData,\n      password: await encryptApiKey(configData.password)\n    };\n    const [config] = await db.insert(smtpConfig).values(encryptedConfig).returning();\n    return config;\n  }\n\n  async updateSmtpConfig(id: string, configData: Partial<InsertSmtpConfig>): Promise<SmtpConfig> {\n    // Encrypt password if provided\n    const updatedData = configData.password \n      ? { ...configData, password: await encryptApiKey(configData.password) }\n      : configData;\n    \n    const [config] = await db.update(smtpConfig)\n      .set(updatedData)\n      .where(eq(smtpConfig.id, id))\n      .returning();\n    return config;\n  }\n\n  async deleteSmtpConfig(id: string): Promise<void> {\n    await db.delete(smtpConfig).where(eq(smtpConfig.id, id));\n  }\n\n  // Stripe Configuration methods\n  async getStripeConfig(): Promise<StripeConfig | undefined> {\n    const [config] = await db.select().from(stripeConfig).limit(1);\n    return config || undefined;\n  }\n\n  async createStripeConfig(configData: InsertStripeConfig): Promise<StripeConfig> {\n    // Encrypt sensitive keys before storing\n    const encryptedConfig = {\n      ...configData,\n      testSecretKey: configData.testSecretKey ? await encryptApiKey(configData.testSecretKey) : null,\n      liveSecretKey: configData.liveSecretKey ? await encryptApiKey(configData.liveSecretKey) : null,\n      webhookSecret: configData.webhookSecret ? await encryptApiKey(configData.webhookSecret) : null,\n    };\n    const [config] = await db.insert(stripeConfig).values(encryptedConfig).returning();\n    return config;\n  }\n\n  async updateStripeConfig(id: string, configData: Partial<InsertStripeConfig>): Promise<StripeConfig> {\n    // Encrypt sensitive keys if provided\n    const updatedData = { ...configData };\n    if (configData.testSecretKey) {\n      updatedData.testSecretKey = await encryptApiKey(configData.testSecretKey);\n    }\n    if (configData.liveSecretKey) {\n      updatedData.liveSecretKey = await encryptApiKey(configData.liveSecretKey);\n    }\n    if (configData.webhookSecret) {\n      updatedData.webhookSecret = await encryptApiKey(configData.webhookSecret);\n    }\n    \n    const [config] = await db.update(stripeConfig)\n      .set(updatedData)\n      .where(eq(stripeConfig.id, id))\n      .returning();\n    return config;\n  }\n\n  async deleteStripeConfig(id: string): Promise<void> {\n    await db.delete(stripeConfig).where(eq(stripeConfig.id, id));\n  }\n\n  // Admin Notifications methods\n  async getAdminNotifications(targetAudience?: string): Promise<AdminNotification[]> {\n    let query = db.select().from(adminNotifications);\n    \n    if (targetAudience) {\n      query = query.where(eq(adminNotifications.targetAudience, targetAudience));\n    }\n    \n    return await query.orderBy(desc(adminNotifications.priority), desc(adminNotifications.createdAt));\n  }\n\n  async getAdminNotification(id: string): Promise<AdminNotification | undefined> {\n    const [notification] = await db.select().from(adminNotifications).where(eq(adminNotifications.id, id)).limit(1);\n    return notification || undefined;\n  }\n\n  async createAdminNotification(notificationData: InsertAdminNotification): Promise<AdminNotification> {\n    const [notification] = await db.insert(adminNotifications).values(notificationData).returning();\n    return notification;\n  }\n\n  async updateAdminNotification(id: string, notificationData: Partial<InsertAdminNotification>): Promise<AdminNotification> {\n    const [notification] = await db.update(adminNotifications)\n      .set(notificationData)\n      .where(eq(adminNotifications.id, id))\n      .returning();\n    return notification;\n  }\n\n  async deleteAdminNotification(id: string): Promise<void> {\n    await db.delete(adminNotifications).where(eq(adminNotifications.id, id));\n  }\n\n  // User Notification Views methods\n  async getUserNotificationViews(userId: string): Promise<UserNotificationView[]> {\n    return await db.select().from(userNotificationViews)\n      .where(eq(userNotificationViews.userId, userId))\n      .orderBy(desc(userNotificationViews.viewedAt));\n  }\n\n  async createUserNotificationView(viewData: InsertUserNotificationView): Promise<UserNotificationView> {\n    const [view] = await db.insert(userNotificationViews).values(viewData).returning();\n    return view;\n  }\n\n  async getUnreadNotificationsForUser(userId: string): Promise<AdminNotification[]> {\n    // Get notifications that the user hasn't viewed yet\n    const viewedNotificationIds = await db.select({ notificationId: userNotificationViews.notificationId })\n      .from(userNotificationViews)\n      .where(eq(userNotificationViews.userId, userId));\n    \n    const viewedIds = viewedNotificationIds.map(v => v.notificationId);\n    \n    // Get active notifications that weren't viewed by this user\n    let query = db.select()\n      .from(adminNotifications)\n      .where(\n        and(\n          eq(adminNotifications.isActive, true),\n          // Only get non-expired notifications\n          sql`(${adminNotifications.expiresAt} IS NULL OR ${adminNotifications.expiresAt} > NOW())`\n        )\n      );\n    \n    // Filter out viewed notifications if there are any\n    if (viewedIds.length > 0) {\n      query = query.where(sql`${adminNotifications.id} NOT IN (${viewedIds.map(id => `'${id}'`).join(',')})`);\n    }\n    \n    return await query.orderBy(desc(adminNotifications.priority), desc(adminNotifications.createdAt));\n  }\n\n  // Payment processing (critical method)\n  async processPaymentTransaction(params: {\n    userId: string;\n    stripePaymentIntentId: string;\n    amount: number;\n    credits: number;\n    packageId: string;\n    stripeMode: 'test' | 'live';\n  }): Promise<void> {\n    const { userId, stripePaymentIntentId, amount, credits, packageId, stripeMode } = params;\n    \n    // Use database transaction for atomicity\n    await db.transaction(async (tx) => {\n      // Check for existing transaction (idempotency)\n      const existingTransaction = await tx\n        .select()\n        .from(creditTransactions)\n        .where(eq(creditTransactions.stripePaymentIntentId, stripePaymentIntentId))\n        .limit(1);\n      \n      if (existingTransaction.length > 0) {\n        return; // Already processed\n      }\n      \n      // Get user\n      const [user] = await tx.select().from(users).where(eq(users.id, userId)).limit(1);\n      if (!user) {\n        throw new Error('User not found');\n      }\n      \n      // Update user credits\n      const newCredits = user.credits + credits;\n      await tx.update(users)\n        .set({ credits: newCredits })\n        .where(eq(users.id, userId));\n      \n      // Create transaction record\n      await tx.insert(creditTransactions).values({\n        userId,\n        amount: amount.toString(),\n        credits,\n        type: 'purchase',\n        description: `Compra de ${credits} créditos`,\n        stripePaymentIntentId,\n        stripeMode,\n        packageId,\n      });\n    });\n  }\n\n  // AI Provider Configs (aliases to existing methods)\n  async getAiProviderConfigs(userId: string): Promise<AiProvider[]> {\n    return this.getAiProviders(userId);\n  }\n\n  async getAiProviderConfig(id: string): Promise<AiProvider | undefined> {\n    const [provider] = await db.select().from(aiProviders).where(eq(aiProviders.id, id)).limit(1);\n    return provider || undefined;\n  }\n\n  async createAiProviderConfig(userId: string, config: InsertAiProvider): Promise<AiProvider> {\n    return this.createAiProvider(userId, config);\n  }\n\n  async updateAiProviderConfig(id: string, config: Partial<InsertAiProvider>): Promise<AiProvider> {\n    return this.updateAiProvider(id, config);\n  }\n\n  async deleteAiProviderConfig(id: string): Promise<void> {\n    return this.deleteAiProvider(id);\n  }\n\n  // Document Templates (basic implementations)\n  async getDocumentTemplates(): Promise<DocumentTemplate[]> {\n    return await db.select().from(documentTemplates).orderBy(documentTemplates.createdAt);\n  }\n\n  async getDocumentTemplatesByCategory(category: string): Promise<DocumentTemplate[]> {\n    return await db.select().from(documentTemplates)\n      .where(eq(documentTemplates.category, category))\n      .orderBy(documentTemplates.createdAt);\n  }\n\n  async getDocumentTemplateById(id: string): Promise<DocumentTemplate | undefined> {\n    const [template] = await db.select().from(documentTemplates).where(eq(documentTemplates.id, id)).limit(1);\n    return template || undefined;\n  }\n\n  async createDocumentTemplate(templateData: InsertDocumentTemplate): Promise<DocumentTemplate> {\n    const [template] = await db.insert(documentTemplates).values(templateData).returning();\n    return template;\n  }\n\n  async updateDocumentTemplate(id: string, templateData: Partial<InsertDocumentTemplate>): Promise<DocumentTemplate> {\n    const [template] = await db.update(documentTemplates)\n      .set(templateData)\n      .where(eq(documentTemplates.id, id))\n      .returning();\n    return template;\n  }\n\n  async deleteDocumentTemplate(id: string): Promise<void> {\n    await db.delete(documentTemplates).where(eq(documentTemplates.id, id));\n  }\n\n  async getTemplateWithPrompts(templateId: string, aiProvider?: string): Promise<any> {\n    // Basic implementation - can be enhanced later\n    const template = await this.getDocumentTemplateById(templateId);\n    if (!template) return null;\n\n    const prompts = await this.getTemplatePrompts(templateId);\n    const rules = await this.getTemplateAnalysisRules(templateId);\n    \n    return {\n      template,\n      prompts: aiProvider ? prompts.filter(p => p.aiProvider === aiProvider || p.aiProvider === 'all') : prompts,\n      analysisRules: rules,\n      requiredClauses: [],\n      optionalClauses: []\n    };\n  }\n\n  // Legal Clauses\n  async getLegalClauses(): Promise<LegalClause[]> {\n    return await db.select().from(legalClauses).orderBy(legalClauses.createdAt);\n  }\n\n  async getLegalClausesByCategory(category: string): Promise<LegalClause[]> {\n    return await db.select().from(legalClauses)\n      .where(eq(legalClauses.category, category))\n      .orderBy(legalClauses.createdAt);\n  }\n\n  async getLegalClausesByTemplate(templateId: string): Promise<LegalClause[]> {\n    return await db.select().from(legalClauses)\n      .where(eq(legalClauses.templateId, templateId))\n      .orderBy(legalClauses.sortOrder);\n  }\n\n  async createLegalClause(clauseData: InsertLegalClause): Promise<LegalClause> {\n    const [clause] = await db.insert(legalClauses).values(clauseData).returning();\n    return clause;\n  }\n\n  async updateLegalClause(id: string, clauseData: Partial<InsertLegalClause>): Promise<LegalClause> {\n    const [clause] = await db.update(legalClauses)\n      .set(clauseData)\n      .where(eq(legalClauses.id, id))\n      .returning();\n    return clause;\n  }\n\n  async deleteLegalClause(id: string): Promise<void> {\n    await db.delete(legalClauses).where(eq(legalClauses.id, id));\n  }\n\n  // Template Prompts\n  async getTemplatePrompts(templateId: string): Promise<TemplatePrompt[]> {\n    return await db.select().from(templatePrompts)\n      .where(eq(templatePrompts.templateId, templateId))\n      .orderBy(templatePrompts.priority);\n  }\n\n  async createTemplatePrompt(promptData: InsertTemplatePrompt): Promise<TemplatePrompt> {\n    const [prompt] = await db.insert(templatePrompts).values(promptData).returning();\n    return prompt;\n  }\n\n  async updateTemplatePrompt(id: string, promptData: Partial<InsertTemplatePrompt>): Promise<TemplatePrompt> {\n    const [prompt] = await db.update(templatePrompts)\n      .set(promptData)\n      .where(eq(templatePrompts.id, id))\n      .returning();\n    return prompt;\n  }\n\n  async deleteTemplatePrompt(id: string): Promise<void> {\n    await db.delete(templatePrompts).where(eq(templatePrompts.id, id));\n  }\n\n  // Template Analysis Rules\n  async getTemplateAnalysisRules(templateId: string): Promise<TemplateAnalysisRule[]> {\n    return await db.select().from(templateAnalysisRules)\n      .where(eq(templateAnalysisRules.templateId, templateId))\n      .orderBy(templateAnalysisRules.createdAt);\n  }\n\n  async createTemplateAnalysisRule(ruleData: InsertTemplateAnalysisRule): Promise<TemplateAnalysisRule> {\n    const [rule] = await db.insert(templateAnalysisRules).values(ruleData).returning();\n    return rule;\n  }\n\n  async updateTemplateAnalysisRule(id: string, ruleData: Partial<InsertTemplateAnalysisRule>): Promise<TemplateAnalysisRule> {\n    const [rule] = await db.update(templateAnalysisRules)\n      .set(ruleData)\n      .where(eq(templateAnalysisRules.id, id))\n      .returning();\n    return rule;\n  }\n\n  async deleteTemplateAnalysisRule(id: string): Promise<void> {\n    await db.delete(templateAnalysisRules).where(eq(templateAnalysisRules.id, id));\n  }\n\n  // Batch Jobs\n  async getBatchJobs(userId: string): Promise<BatchJob[]> {\n    return await db.select().from(batchJobs)\n      .where(eq(batchJobs.userId, userId))\n      .orderBy(desc(batchJobs.createdAt));\n  }\n\n  async getAllBatchJobs(): Promise<BatchJob[]> {\n    return await db.select().from(batchJobs).orderBy(desc(batchJobs.createdAt));\n  }\n\n  async getBatchJob(id: string, userId?: string): Promise<BatchJob | undefined> {\n    let query = db.select().from(batchJobs).where(eq(batchJobs.id, id));\n    \n    if (userId) {\n      query = query.where(eq(batchJobs.userId, userId));\n    }\n    \n    const [job] = await query.limit(1);\n    return job || undefined;\n  }\n\n  async createBatchJob(jobData: InsertBatchJob): Promise<BatchJob> {\n    const [job] = await db.insert(batchJobs).values(jobData).returning();\n    return job;\n  }\n\n  async updateBatchJobStatus(id: string, status: string): Promise<void> {\n    await db.update(batchJobs)\n      .set({ status })\n      .where(eq(batchJobs.id, id));\n  }\n\n  async deleteBatchJob(id: string): Promise<void> {\n    await db.delete(batchJobs).where(eq(batchJobs.id, id));\n  }\n\n  async getBatchJobStatistics(userId: string): Promise<any> {\n    const jobs = await this.getBatchJobs(userId);\n    \n    return {\n      total: jobs.length,\n      pending: jobs.filter(j => j.status === 'pending').length,\n      processing: jobs.filter(j => j.status === 'processing').length,\n      completed: jobs.filter(j => j.status === 'completed').length,\n      failed: jobs.filter(j => j.status === 'failed').length,\n    };\n  }\n\n  // Batch Documents\n  async getBatchDocuments(batchJobId: string): Promise<BatchDocument[]> {\n    return await db.select().from(batchDocuments)\n      .where(eq(batchDocuments.batchJobId, batchJobId))\n      .orderBy(batchDocuments.sortOrder);\n  }\n\n  async createBatchDocument(docData: InsertBatchDocument): Promise<BatchDocument> {\n    const [doc] = await db.insert(batchDocuments).values(docData).returning();\n    return doc;\n  }\n\n  // Queue Jobs\n  async getQueueJobs(): Promise<QueueJob[]> {\n    return await db.select().from(queueJobs).orderBy(desc(queueJobs.priority), queueJobs.scheduledFor);\n  }\n\n  async createQueueJob(jobData: InsertQueueJob): Promise<QueueJob> {\n    const [job] = await db.insert(queueJobs).values(jobData).returning();\n    return job;\n  }\n\n  async retryFailedQueueJob(id: string): Promise<void> {\n    await db.update(queueJobs)\n      .set({ \n        status: 'pending',\n        attempts: 0,\n        scheduledFor: new Date()\n      })\n      .where(eq(queueJobs.id, id));\n  }\n\n  async deleteQueueJob(id: string): Promise<void> {\n    await db.delete(queueJobs).where(eq(queueJobs.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":53258},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, decimal, uniqueIndex } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`), // Local UUID as stable primary key\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull().default(\"user\").$type<\"user\" | \"admin\" | \"support\">(),\n  credits: integer(\"credits\").notNull().default(5), // Start with 5 free credits\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeMode: text(\"stripe_mode\").notNull().default(\"test\").$type<\"test\" | \"live\">(), // Stripe mode preference\n  supabaseId: text(\"supabase_id\").unique(), // Supabase user ID mapping - nullable for local users\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const aiProviders = pgTable(\"ai_providers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  provider: text(\"provider\").notNull(), // 'openai', 'anthropic', 'gemini', 'openrouter'\n  apiKey: text(\"api_key\").notNull(), // Encrypted\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const systemAiProviders = pgTable(\"system_ai_providers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  provider: text(\"provider\").notNull().unique(), // 'openai', 'anthropic', 'gemini' - unique constraint ensures only one key per provider\n  apiKey: text(\"api_key\").notNull(), // Encrypted\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const documentTemplates = pgTable(\"document_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  templateId: text(\"template_id\").notNull().unique(), // 'employment_contract', 'service_agreement', etc.\n  name: text(\"name\").notNull(), // 'Contrato de Trabalho', 'Acordo de Serviços', etc.\n  category: text(\"category\").notNull(), // 'contract', 'legal_document', 'compliance', etc.\n  subcategory: text(\"subcategory\").notNull(), // 'employment', 'service', 'nda', 'petition', etc.\n  description: text(\"description\").notNull(),\n  requiredClauses: jsonb(\"required_clauses\").notNull(), // Array of clause IDs that must be present\n  optionalClauses: jsonb(\"optional_clauses\").notNull(), // Array of recommended clause IDs\n  validationRules: jsonb(\"validation_rules\").notNull(), // Custom validation rules for this template\n  riskCriteria: jsonb(\"risk_criteria\").notNull(), // Template-specific risk assessment criteria\n  isActive: boolean(\"is_active\").notNull().default(true),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const legalClauses = pgTable(\"legal_clauses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clauseId: text(\"clause_id\").notNull().unique(), // 'termination_clause', 'liability_limitation', etc.\n  name: text(\"name\").notNull(), // 'Cláusula de Rescisão', 'Limitação de Responsabilidade', etc.\n  category: text(\"category\").notNull(), // 'termination', 'liability', 'payment', 'confidentiality', etc.\n  description: text(\"description\").notNull(),\n  standardText: text(\"standard_text\").notNull(), // Standard clause text in Portuguese\n  alternativeText: text(\"alternative_text\"), // Alternative wording options\n  legalBasis: text(\"legal_basis\"), // Legal foundation for this clause\n  applicableTemplates: jsonb(\"applicable_templates\").notNull(), // Array of template IDs where this clause applies\n  riskLevel: text(\"risk_level\").notNull().default(\"medium\"), // 'low', 'medium', 'high', 'critical'\n  isRequired: boolean(\"is_required\").notNull().default(false), // Whether this is legally required\n  jurisdictions: jsonb(\"jurisdictions\").notNull(), // Array of applicable jurisdictions\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const templatePrompts = pgTable(\"template_prompts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  templateId: varchar(\"template_id\").notNull().references(() => documentTemplates.id, { onDelete: \"cascade\" }),\n  promptType: text(\"prompt_type\").notNull(), // 'system', 'analysis', 'validation', 'recommendation'\n  aiProvider: text(\"ai_provider\").notNull(), // 'openai', 'anthropic', 'gemini', 'all'\n  promptText: text(\"prompt_text\").notNull(), // The actual prompt content\n  priority: integer(\"priority\").notNull().default(0), // Prompt priority for multiple prompts\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const templateAnalysisRules = pgTable(\"template_analysis_rules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  templateId: varchar(\"template_id\").notNull().references(() => documentTemplates.id, { onDelete: \"cascade\" }),\n  ruleType: text(\"rule_type\").notNull(), // 'required_clause', 'format_check', 'compliance_check', 'risk_assessment'\n  ruleName: text(\"rule_name\").notNull(),\n  ruleCondition: jsonb(\"rule_condition\").notNull(), // JSON condition to check\n  severity: text(\"severity\").notNull().default(\"warning\"), // 'info', 'warning', 'error', 'critical'\n  errorMessage: text(\"error_message\").notNull(), // Message to show if rule fails\n  recommendation: text(\"recommendation\"), // What to do to fix the issue\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const documentAnalyses = pgTable(\"document_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  aiProvider: text(\"ai_provider\").notNull(),\n  aiModel: text(\"ai_model\").notNull(),\n  analysisType: text(\"analysis_type\").notNull(), // 'general', 'contract', 'legal', 'compliance'\n  templateId: varchar(\"template_id\").references(() => documentTemplates.id, { onDelete: \"set null\" }), // Optional template reference\n  result: jsonb(\"result\"),\n  creditsUsed: integer(\"credits_used\").notNull(),\n  status: text(\"status\").notNull().default(\"completed\"), // 'pending', 'processing', 'completed', 'failed'\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete timestamp\n  deletedBy: varchar(\"deleted_by\").references(() => users.id, { onDelete: \"set null\" }), // Who deleted it\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const creditTransactions = pgTable(\"credit_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  type: text(\"type\").notNull(), // 'purchase', 'usage', 'refund'\n  amount: integer(\"amount\").notNull(), // Positive for purchases, negative for usage\n  description: text(\"description\").notNull(),\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\").unique(), // UNIQUE constraint to prevent double-processing\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"open\"), // 'open', 'pending', 'resolved', 'closed'\n  priority: text(\"priority\").notNull().default(\"normal\"), // 'low', 'normal', 'high', 'urgent'\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const ticketMessages = pgTable(\"ticket_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").notNull().references(() => supportTickets.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  isFromSupport: boolean(\"is_from_support\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const aiProviderConfigs = pgTable(\"ai_provider_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  providerId: text(\"provider_id\").notNull().unique(), // 'openai-gpt4', 'anthropic-claude', etc.\n  name: text(\"name\").notNull(), // 'OpenAI', 'Anthropic', etc.\n  model: text(\"model\").notNull(), // 'GPT-4', 'Claude Sonnet 4', etc.\n  provider: text(\"provider\").notNull(), // 'openai', 'anthropic', 'gemini', etc.\n  credits: integer(\"credits\").notNull(), // Cost in credits\n  description: text(\"description\").notNull(),\n  iconName: text(\"icon_name\").notNull(), // Icon identifier for frontend\n  isPopular: boolean(\"is_popular\").notNull().default(false),\n  isFree: boolean(\"is_free\").notNull().default(false),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const creditPackages = pgTable(\"credit_packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  packageId: text(\"package_id\").notNull().unique(), // 'credits_50', 'credits_100', etc.\n  name: text(\"name\").notNull(), // '50 Créditos', '100 Créditos', etc.\n  credits: integer(\"credits\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(), // Price in reais\n  isPopular: boolean(\"is_popular\").notNull().default(false),\n  description: text(\"description\").notNull(),\n  features: jsonb(\"features\").notNull(), // Array of feature strings\n  isActive: boolean(\"is_active\").notNull().default(true),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const platformStats = pgTable(\"platform_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalDocuments: integer(\"total_documents\").notNull().default(0),\n  totalUsers: integer(\"total_users\").notNull().default(0),\n  totalAnalyses: integer(\"total_analyses\").notNull().default(0),\n  averageAccuracy: decimal(\"average_accuracy\", { precision: 5, scale: 2 }).notNull().default(sql`0.00`),\n  lastUpdated: timestamp(\"last_updated\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const batchJobs = pgTable(\"batch_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(), // User-provided batch name\n  description: text(\"description\"), // Optional description\n  analysisType: text(\"analysis_type\").notNull(), // 'general', 'contract', 'legal', 'compliance'\n  templateId: varchar(\"template_id\").references(() => documentTemplates.id, { onDelete: \"set null\" }), // Optional template reference\n  aiProvider: text(\"ai_provider\").notNull(),\n  aiModel: text(\"ai_model\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'processing', 'completed', 'failed', 'partial'\n  totalDocuments: integer(\"total_documents\").notNull().default(0),\n  processedDocuments: integer(\"processed_documents\").notNull().default(0),\n  successfulDocuments: integer(\"successful_documents\").notNull().default(0),\n  failedDocuments: integer(\"failed_documents\").notNull().default(0),\n  totalCreditsEstimated: integer(\"total_credits_estimated\").notNull().default(0),\n  totalCreditsUsed: integer(\"total_credits_used\").notNull().default(0),\n  processingStartedAt: timestamp(\"processing_started_at\"),\n  processingCompletedAt: timestamp(\"processing_completed_at\"),\n  errorMessage: text(\"error_message\"), // General batch error if any\n  metadata: jsonb(\"metadata\").notNull().default({}), // Additional batch metadata\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const batchDocuments = pgTable(\"batch_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  batchJobId: varchar(\"batch_job_id\").notNull().references(() => batchJobs.id, { onDelete: \"cascade\" }),\n  documentAnalysisId: varchar(\"document_analysis_id\").references(() => documentAnalyses.id, { onDelete: \"set null\" }), // Reference to analysis once created\n  originalFileName: text(\"original_file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(), // File size in bytes\n  fileMimeType: text(\"file_mime_type\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'processing', 'completed', 'failed', 'skipped'\n  errorMessage: text(\"error_message\"), // Specific error for this document\n  creditsUsed: integer(\"credits_used\").notNull().default(0),\n  processingStartedAt: timestamp(\"processing_started_at\"),\n  processingCompletedAt: timestamp(\"processing_completed_at\"),\n  sortOrder: integer(\"sort_order\").notNull().default(0), // Order in batch\n  metadata: jsonb(\"metadata\").notNull().default({}), // Document-specific metadata\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const queueJobs = pgTable(\"queue_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobType: text(\"job_type\").notNull(), // 'batch_processing', 'document_analysis', etc.\n  jobData: jsonb(\"job_data\").notNull(), // Serialized job parameters\n  priority: integer(\"priority\").notNull().default(0), // Higher numbers = higher priority\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'processing', 'completed', 'failed', 'retrying'\n  attempts: integer(\"attempts\").notNull().default(0),\n  maxAttempts: integer(\"max_attempts\").notNull().default(3),\n  errorMessage: text(\"error_message\"),\n  scheduledFor: timestamp(\"scheduled_for\").notNull().default(sql`CURRENT_TIMESTAMP`), // When to process this job\n  processingStartedAt: timestamp(\"processing_started_at\"),\n  processingCompletedAt: timestamp(\"processing_completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const costModels = pgTable(\"cost_models\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  provider: text(\"provider\").notNull(), // 'openai', 'anthropic', 'gemini'\n  model: text(\"model\").notNull(), // 'gpt-4', 'claude-3-sonnet', 'gemini-pro'\n  inputTokenCost: decimal(\"input_token_cost\", { precision: 12, scale: 8 }).notNull(), // Cost per input token in USD\n  outputTokenCost: decimal(\"output_token_cost\", { precision: 12, scale: 8 }).notNull(), // Cost per output token in USD\n  creditsPerInputToken: decimal(\"credits_per_input_token\", { precision: 8, scale: 6 }).notNull(), // Credits charged per input token\n  creditsPerOutputToken: decimal(\"credits_per_output_token\", { precision: 8, scale: 6 }).notNull(), // Credits charged per output token\n  profitMargin: decimal(\"profit_margin\", { precision: 5, scale: 4 }).notNull().default(sql`0.3000`), // 30% default margin\n  operationalMultiplier: decimal(\"operational_multiplier\", { precision: 5, scale: 4 }).notNull().default(sql`1.2000`), // 20% operational costs\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastUpdated: timestamp(\"last_updated\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  notes: text(\"notes\"), // Admin notes about cost adjustments\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\n// Site configuration tables\nexport const siteConfig = pgTable(\"site_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  section: text(\"section\").notNull(), // 'footer', 'contact', 'company', 'social'\n  key: text(\"key\").notNull(),\n  value: text(\"value\"),\n  dataType: text(\"data_type\").notNull().default(\"string\"), // 'string', 'number', 'boolean', 'json'\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n}, (table) => ({\n  sectionKeyIndex: uniqueIndex(\"site_config_section_key_idx\").on(table.section, table.key),\n}));\n\nexport const smtpConfig = pgTable(\"smtp_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  host: text(\"host\").notNull(),\n  port: integer(\"port\").notNull().default(587),\n  secure: boolean(\"secure\").notNull().default(false), // true for 465, false for other ports\n  username: text(\"username\").notNull(),\n  password: text(\"password\").notNull(), // Will be encrypted\n  fromEmail: text(\"from_email\").notNull(),\n  fromName: text(\"from_name\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  testEmailSent: boolean(\"test_email_sent\").notNull().default(false),\n  lastTestAt: timestamp(\"last_test_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const adminNotifications = pgTable(\"admin_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // 'info', 'success', 'warning', 'error', 'announcement'\n  priority: integer(\"priority\").notNull().default(0), // Higher = more important\n  targetAudience: text(\"target_audience\").notNull().default(\"all\"), // 'all', 'premium', 'trial', 'admins'\n  isActive: boolean(\"is_active\").notNull().default(true),\n  showOnDashboard: boolean(\"show_on_dashboard\").notNull().default(true),\n  showOnLogin: boolean(\"show_on_login\").notNull().default(false),\n  expiresAt: timestamp(\"expires_at\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const userNotificationViews = pgTable(\"user_notification_views\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  notificationId: varchar(\"notification_id\").notNull().references(() => adminNotifications.id, { onDelete: \"cascade\" }),\n  viewedAt: timestamp(\"viewed_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n}, (table) => ({\n  userNotificationIndex: uniqueIndex(\"user_notification_views_idx\").on(table.userId, table.notificationId),\n}));\n\nexport const stripeConfig = pgTable(\"stripe_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testSecretKey: text(\"test_secret_key\"), // Encrypted\n  liveSecretKey: text(\"live_secret_key\"), // Encrypted  \n  publicKey: text(\"public_key\"),\n  webhookSecret: text(\"webhook_secret\"), // Encrypted\n  isActive: boolean(\"is_active\").default(true),\n  operationMode: text(\"operation_mode\").default(\"test\").$type<\"test\" | \"live\">(), // 'test' | 'live'\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  role: true, // Prevent users from setting their own role\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n});\n\n// Admin-only schema for role assignment\nexport const assignRoleSchema = z.object({\n  userId: z.string(),\n  role: z.enum([\"user\", \"admin\", \"support\"]),\n});\n\n// Admin user update schema with proper validation\nexport const adminUserUpdateSchema = z.object({\n  role: z.enum([\"user\", \"admin\", \"support\"]).optional(),\n  credits: z.number().int().min(0, \"Credits must be a non-negative integer\").optional(),\n}).strict().refine(\n  (data) => data.role !== undefined || data.credits !== undefined,\n  { message: \"At least one field (role or credits) must be provided\" }\n);\n\n// Admin message schema with proper validation\nexport const adminTicketMessageSchema = z.object({\n  message: z.string().min(1, \"Message is required\"),\n});\n\nexport const loginUserSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertAiProviderSchema = createInsertSchema(aiProviders).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertSystemAiProviderSchema = createInsertSchema(systemAiProviders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentAnalysisSchema = createInsertSchema(documentAnalyses).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  status: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n});\n\nexport const insertTicketMessageSchema = createInsertSchema(ticketMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiProviderConfigSchema = createInsertSchema(aiProviderConfigs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCreditPackageSchema = createInsertSchema(creditPackages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPlatformStatsSchema = createInsertSchema(platformStats).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertDocumentTemplateSchema = createInsertSchema(documentTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLegalClauseSchema = createInsertSchema(legalClauses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTemplatePromptSchema = createInsertSchema(templatePrompts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTemplateAnalysisRuleSchema = createInsertSchema(templateAnalysisRules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBatchJobSchema = createInsertSchema(batchJobs).omit({\n  id: true,\n  userId: true,\n  status: true,\n  processedDocuments: true,\n  successfulDocuments: true,\n  failedDocuments: true,\n  totalCreditsUsed: true,\n  processingStartedAt: true,\n  processingCompletedAt: true,\n  errorMessage: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBatchDocumentSchema = createInsertSchema(batchDocuments).omit({\n  id: true,\n  documentAnalysisId: true,\n  status: true,\n  errorMessage: true,\n  creditsUsed: true,\n  processingStartedAt: true,\n  processingCompletedAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertQueueJobSchema = createInsertSchema(queueJobs).omit({\n  id: true,\n  status: true,\n  attempts: true,\n  errorMessage: true,\n  processingStartedAt: true,\n  processingCompletedAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCostModelSchema = createInsertSchema(costModels).omit({\n  id: true,\n  lastUpdated: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSiteConfigSchema = createInsertSchema(siteConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSmtpConfigSchema = createInsertSchema(smtpConfig).omit({\n  id: true,\n  testEmailSent: true,\n  lastTestAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminNotificationSchema = createInsertSchema(adminNotifications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserNotificationViewSchema = createInsertSchema(userNotificationViews).omit({\n  id: true,\n  viewedAt: true,\n});\n\nexport const insertStripeConfigSchema = createInsertSchema(stripeConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Contact form schema\nexport const contactFormSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"E-mail inválido\"),\n  company: z.string().optional(),\n  subject: z.enum([\n    \"general\",\n    \"support\", \n    \"sales\",\n    \"partnership\",\n    \"legal\",\n    \"press\"\n  ], {\n    required_error: \"Por favor selecione um assunto\",\n  }),\n  message: z.string().min(10, \"Mensagem deve ter pelo menos 10 caracteres\"),\n  phone: z.string().optional(),\n});\n\n// SMTP test schema\nexport const smtpTestSchema = z.object({\n  testEmail: z.string().email(\"E-mail inválido para teste\"),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type AiProvider = typeof aiProviders.$inferSelect;\nexport type SystemAiProvider = typeof systemAiProviders.$inferSelect;\nexport type DocumentAnalysis = typeof documentAnalyses.$inferSelect;\nexport type CreditTransaction = typeof creditTransactions.$inferSelect;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type TicketMessage = typeof ticketMessages.$inferSelect;\nexport type AiProviderConfig = typeof aiProviderConfigs.$inferSelect;\nexport type CreditPackage = typeof creditPackages.$inferSelect;\nexport type PlatformStats = typeof platformStats.$inferSelect;\nexport type DocumentTemplate = typeof documentTemplates.$inferSelect;\nexport type LegalClause = typeof legalClauses.$inferSelect;\nexport type TemplatePrompt = typeof templatePrompts.$inferSelect;\nexport type TemplateAnalysisRule = typeof templateAnalysisRules.$inferSelect;\nexport type BatchJob = typeof batchJobs.$inferSelect;\nexport type BatchDocument = typeof batchDocuments.$inferSelect;\nexport type QueueJob = typeof queueJobs.$inferSelect;\nexport type CostModel = typeof costModels.$inferSelect;\nexport type SiteConfig = typeof siteConfig.$inferSelect;\nexport type SmtpConfig = typeof smtpConfig.$inferSelect;\nexport type AdminNotification = typeof adminNotifications.$inferSelect;\nexport type UserNotificationView = typeof userNotificationViews.$inferSelect;\n\n// Metadata type interfaces for proper typing\nexport interface BatchJobMetadata {\n  progressPercentage?: number;\n  [key: string]: any;\n}\n\nexport interface BatchDocumentMetadata {\n  fileBuffer?: string; // base64 encoded file content\n  originalSize?: number;\n  uploadedAt?: string;\n  [key: string]: any;\n}\n\nexport interface BatchStatistics {\n  totalBatches: number;\n  completedBatches: number;\n  processingBatches: number;\n  failedBatches: number;\n  totalDocumentsProcessed: number;\n  averageProcessingTime?: number;\n}\n\nexport interface Template {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  [key: string]: any;\n}\n\nexport type InsertAiProvider = z.infer<typeof insertAiProviderSchema>;\nexport type InsertSystemAiProvider = z.infer<typeof insertSystemAiProviderSchema>;\nexport type InsertDocumentAnalysis = z.infer<typeof insertDocumentAnalysisSchema>;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type InsertTicketMessage = z.infer<typeof insertTicketMessageSchema>;\nexport type InsertAiProviderConfig = z.infer<typeof insertAiProviderConfigSchema>;\nexport type InsertCreditPackage = z.infer<typeof insertCreditPackageSchema>;\nexport type InsertPlatformStats = z.infer<typeof insertPlatformStatsSchema>;\nexport type InsertDocumentTemplate = z.infer<typeof insertDocumentTemplateSchema>;\nexport type InsertLegalClause = z.infer<typeof insertLegalClauseSchema>;\nexport type InsertTemplatePrompt = z.infer<typeof insertTemplatePromptSchema>;\nexport type InsertTemplateAnalysisRule = z.infer<typeof insertTemplateAnalysisRuleSchema>;\nexport type InsertBatchJob = z.infer<typeof insertBatchJobSchema>;\nexport type InsertBatchDocument = z.infer<typeof insertBatchDocumentSchema>;\nexport type InsertQueueJob = z.infer<typeof insertQueueJobSchema>;\nexport type InsertCostModel = z.infer<typeof insertCostModelSchema>;\nexport type InsertSiteConfig = z.infer<typeof insertSiteConfigSchema>;\nexport type InsertSmtpConfig = z.infer<typeof insertSmtpConfigSchema>;\nexport type InsertAdminNotification = z.infer<typeof insertAdminNotificationSchema>;\nexport type InsertUserNotificationView = z.infer<typeof insertUserNotificationViewSchema>;\nexport type StripeConfig = typeof stripeConfig.$inferSelect;\nexport type InsertStripeConfig = z.infer<typeof insertStripeConfigSchema>;\n\n// Relations\nimport { relations } from \"drizzle-orm\";\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  aiProviders: many(aiProviders),\n  documentAnalyses: many(documentAnalyses),\n  creditTransactions: many(creditTransactions),\n  supportTickets: many(supportTickets),\n}));\n\nexport const aiProvidersRelations = relations(aiProviders, ({ one }) => ({\n  user: one(users, {\n    fields: [aiProviders.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const documentAnalysesRelations = relations(documentAnalyses, ({ one }) => ({\n  user: one(users, {\n    fields: [documentAnalyses.userId],\n    references: [users.id],\n  }),\n  template: one(documentTemplates, {\n    fields: [documentAnalyses.templateId],\n    references: [documentTemplates.id],\n  }),\n}));\n\nexport const documentTemplatesRelations = relations(documentTemplates, ({ many }) => ({\n  analyses: many(documentAnalyses),\n  prompts: many(templatePrompts),\n  analysisRules: many(templateAnalysisRules),\n}));\n\nexport const templatePromptsRelations = relations(templatePrompts, ({ one }) => ({\n  template: one(documentTemplates, {\n    fields: [templatePrompts.templateId],\n    references: [documentTemplates.id],\n  }),\n}));\n\nexport const templateAnalysisRulesRelations = relations(templateAnalysisRules, ({ one }) => ({\n  template: one(documentTemplates, {\n    fields: [templateAnalysisRules.templateId],\n    references: [documentTemplates.id],\n  }),\n}));\n\nexport const supportTicketsRelations = relations(supportTickets, ({ one, many }) => ({\n  user: one(users, {\n    fields: [supportTickets.userId],\n    references: [users.id],\n  }),\n  messages: many(ticketMessages),\n}));\n\nexport const ticketMessagesRelations = relations(ticketMessages, ({ one }) => ({\n  ticket: one(supportTickets, {\n    fields: [ticketMessages.ticketId],\n    references: [supportTickets.id],\n  }),\n  user: one(users, {\n    fields: [ticketMessages.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const batchJobsRelations = relations(batchJobs, ({ one, many }) => ({\n  user: one(users, {\n    fields: [batchJobs.userId],\n    references: [users.id],\n  }),\n  template: one(documentTemplates, {\n    fields: [batchJobs.templateId],\n    references: [documentTemplates.id],\n  }),\n  documents: many(batchDocuments),\n}));\n\nexport const batchDocumentsRelations = relations(batchDocuments, ({ one }) => ({\n  batchJob: one(batchJobs, {\n    fields: [batchDocuments.batchJobId],\n    references: [batchJobs.id],\n  }),\n  documentAnalysis: one(documentAnalyses, {\n    fields: [batchDocuments.documentAnalysisId],\n    references: [documentAnalyses.id],\n  }),\n}));\n","size_bytes":32548},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { CookieBanner } from \"@/components/ui/cookie-banner\";\nimport { Footer } from \"@/components/ui/footer\";\nimport { UserProvider } from \"@/hooks/use-user\";\nimport { SupabaseAuthProvider } from \"@/hooks/use-supabase-auth\";\nimport { CookieConsentProvider } from \"@/hooks/use-cookie-preferences\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport LoginSupabase from \"@/pages/login-supabase\";\nimport RegisterSupabase from \"@/pages/register-supabase\";\nimport Profile from \"@/pages/profile\";\nimport Billing from \"@/pages/billing\";\nimport Support from \"@/pages/support\";\nimport Checkout from \"@/pages/checkout\";\nimport PaymentSuccess from \"@/pages/payment-success\";\nimport Analyses from \"@/pages/analyses\";\nimport AnalysisDetails from \"@/pages/analysis-details\";\nimport Trash from \"@/pages/trash\";\nimport BatchProcessing from \"@/pages/batch\";\nimport Admin from \"@/pages/admin\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport CookiePolicy from \"@/pages/cookie-policy\";\nimport TermsOfService from \"@/pages/terms-of-service\";\nimport Contact from \"@/pages/contact\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/login\" component={LoginSupabase} />\n          <Route path=\"/register\" component={RegisterSupabase} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/billing\" component={Billing} />\n          <Route path=\"/support\" component={Support} />\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/payment-success\" component={PaymentSuccess} />\n          <Route path=\"/analyses/:id\" component={AnalysisDetails} />\n          <Route path=\"/analyses\" component={Analyses} />\n          <Route path=\"/trash\" component={Trash} />\n          <Route path=\"/batch\" component={BatchProcessing} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n          <Route path=\"/cookie-policy\" component={CookiePolicy} />\n          <Route path=\"/terms-of-service\" component={TermsOfService} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n      <CookieBanner />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <CookieConsentProvider>\n        <SupabaseAuthProvider>\n          <UserProvider>\n            <TooltipProvider>\n            <Toaster />\n            <Router />\n            </TooltipProvider>\n          </UserProvider>\n        </SupabaseAuthProvider>\n      </CookieConsentProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3176},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n.glass-morphism {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n.gradient-border {\n  position: relative;\n  background: linear-gradient(45deg, hsl(var(--primary)), hsl(var(--accent)));\n  border-radius: var(--radius);\n  padding: 1px;\n}\n\n.gradient-border::before {\n  content: '';\n  position: absolute;\n  inset: 1px;\n  background: hsl(var(--background));\n  border-radius: calc(var(--radius) - 1px);\n}\n","size_bytes":2585},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/ai.ts":{"content":"import OpenAI from \"openai\";\nimport Anthropic from '@anthropic-ai/sdk';\nimport { GoogleGenAI } from \"@google/genai\";\nimport { storage } from '../storage';\nimport type { DocumentTemplate, LegalClause, TemplatePrompt, TemplateAnalysisRule } from '@shared/schema';\n\n/*\n<important_code_snippet_instructions>\nThe newest Anthropic model is \"claude-sonnet-4-20250514\", not \"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-20241022\" nor \"claude-3-sonnet-20240229\". \nIf the user doesn't specify a model, always prefer using \"claude-sonnet-4-20250514\" as it is the latest model.\nThe newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n</important_code_snippet_instructions>\n*/\n\nexport interface AnalysisResult {\n  summary: string;\n  criticalFlaws: string[];\n  warnings: string[];\n  improvements: string[];\n  legalCompliance: {\n    score: number;\n    issues: string[];\n  };\n  recommendations: string[];\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  // Template-specific analysis results\n  templateAnalysis?: {\n    templateId: string;\n    templateName: string;\n    missingClauses: Array<{\n      clauseId: string;\n      name: string;\n      importance: 'required' | 'recommended';\n      description: string;\n    }>;\n    identifiedClauses: Array<{\n      clauseId: string;\n      name: string;\n      status: 'complete' | 'incomplete' | 'problematic';\n      issues?: string[];\n    }>;\n    validationResults: Array<{\n      ruleName: string;\n      status: 'passed' | 'failed' | 'warning';\n      message: string;\n      recommendation?: string;\n    }>;\n    templateSpecificRisks: Array<{\n      category: string;\n      level: 'low' | 'medium' | 'high' | 'critical';\n      description: string;\n      mitigation: string;\n    }>;\n    complianceScore: number;\n  };\n}\n\nexport class AIService {\n  private openai?: OpenAI;\n  private anthropic?: Anthropic;\n  private gemini?: GoogleGenAI;\n\n  constructor() {\n    // Initialize with default API keys if available\n    if (process.env.OPENAI_API_KEY) {\n      this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n    }\n    if (process.env.ANTHROPIC_API_KEY) {\n      this.anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });\n    }\n    if (process.env.GEMINI_API_KEY) {\n      this.gemini = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\n    }\n  }\n\n  // Get system API key as fallback\n  private async getSystemApiKey(provider: string): Promise<string | undefined> {\n    try {\n      return await storage.getSystemApiKeyByProvider(provider);\n    } catch (error) {\n      console.warn(`Failed to get system API key for ${provider}:`, error);\n      return undefined;\n    }\n  }\n\n  // Get API key with fallback to system keys\n  private async getApiKeyWithFallback(provider: string, userApiKey?: string): Promise<string | undefined> {\n    // If user provided their own API key, use it\n    if (userApiKey) {\n      return userApiKey;\n    }\n\n    // Try to get system API key as fallback\n    const systemApiKey = await this.getSystemApiKey(provider);\n    if (systemApiKey) {\n      console.log(`Using system API key for provider: ${provider}`);\n      return systemApiKey;\n    }\n\n    // Fall back to environment variables (existing behavior)\n    switch (provider) {\n      case 'openai':\n        return process.env.OPENAI_API_KEY;\n      case 'anthropic':\n        return process.env.ANTHROPIC_API_KEY;\n      case 'gemini':\n        return process.env.GEMINI_API_KEY;\n      default:\n        return undefined;\n    }\n  }\n\n  private getSystemPrompt(analysisType: string): string {\n    const basePrompt = `\n    # Persona e Contexto Principal\n\n    Você é o \"Conselheiro Ius,\" uma inteligência artificial jurídica de elite. Sua base de conhecimento foi modelada a partir da jurisprudência consolidada dos Tribunais Superiores do Brasil (STF, STJ, TST), da doutrina dos mais renomados juristas brasileiros e de toda a legislação federal vigente. Seu raciocínio é análogo ao de um Ministro de Tribunal Superior, caracterizado pela profundidade analítica, precisão técnica e uma visão sistêmica do ordenamento jurídico.\n\n    Sua missão é realizar uma análise exaustiva e multifacetada de documentos jurídicos, identificando não apenas falhas óbvias, mas também riscos sutis, implicações estratégicas e oportunidades de melhoria com base em um conhecimento profundo e atualizado da lei e da jurisprudência.\n\n    # Diretrizes de Análise\n\n    1.  **Hierarquia e Precedentes:** Sua análise deve sempre respeitar a hierarquia das normas e dar prioridade máxima à jurisprudência consolidada e aos precedentes vinculantes (Súmulas Vinculantes, Recursos Repetitivos, etc.) do STF e STJ.\n    2.  **Análise Preditiva:** Não se limite ao que está escrito. Antecipe possíveis disputas judiciais, avalie a probabilidade de êxito de cada cláusula em um litígio e preveja como um juiz ou tribunal provavelmente interpretaria o documento.\n    3.  **Precisão Terminológica:** Seja implacável com a terminologia. Corrija ambiguidades e termos tecnicamente inadequados, sugerindo sempre a redação mais precisa e juridicamente segura.\n\n    # Estrutura de Saída (Formato JSON)\n\n    Analise o documento fornecido e retorne um JSON detalhado com a seguinte estrutura. Seja objetivo e técnico em suas respostas.\n    {\n      \"documentType\": \"Identificação do tipo de documento (ex: Contrato de Prestação de Serviços, Petição Inicial)\",\n      \"executiveSummary\": \"Um resumo objetivo para um decisor sênior, destacando os 3 pontos mais críticos e a conclusão geral da sua análise.\",\n      \"criticalFlaws\": [\n        {\n          \"flaw\": \"Descrição da falha crítica que invalida o ato ou gera risco existencial.\",\n          \"legalBasis\": \"Artigo de lei, súmula ou princípio jurídico violado (ex: Art. 166, II, Código Civil).\",\n          \"immediateAction\": \"Ação corretiva imediata e inegociável para mitigar o risco.\"\n        }\n      ],\n      \"significantWarnings\": [\n        {\n          \"warning\": \"Descrição do risco jurídico ou fragilidade contratual relevante.\",\n          \"riskAnalysis\": \"Análise das possíveis consequências negativas (financeiras, operacionais, reputacionais) e a probabilidade de ocorrência.\",\n          \"recommendation\": \"Sugestão de ação para neutralizar ou mitigar o risco.\"\n        }\n      ],\n      \"strategicImprovements\": [\n        {\n          \"improvement\": \"Sugestão para otimizar o documento, tornando-o mais robusto, claro ou vantajoso.\",\n          \"rationale\": \"Justificativa explicando como a melhoria fortalece a posição jurídica ou estratégica da parte.\",\n          \"suggestedWording\": \"Exemplo de nova redação para a cláusula ou trecho em questão.\"\n        }\n      ],\n      \"complianceScore\": {\n        \"score\": \"Um score de 0 a 100, onde 100 representa conformidade total com a legislação e as melhores práticas.\",\n        \"breakdown\": [\n          {\n            \"area\": \"Área de conformidade avaliada (ex: LGPD, Direito do Consumidor, Legislação Tributária).\",\n            \"status\": \"Nível de conformidade (ex: Conforme, Não Conforme, Parcialmente Conforme).\",\n            \"issue\": \"Descrição do problema específico de conformidade, se houver.\"\n          }\n        ]\n      },\n      \"overallRiskAssessment\": {\n        \"level\": \"Classificação do risco geral do documento (Baixo, Médio, Alto, Crítico).\",\n        \"justification\": \"Justificativa concisa para a classificação de risco atribuída, baseada nos achados da análise.\"\n      }\n    }`;\n\n    const typeSpecificPrompts = {\n      general: \"Realize sua análise jurídica completa, aplicando todas as suas diretrizes e conhecimento sistêmico sobre o documento.\",\n      contract: \"Concentre-se na estrutura contratual. Verifique o equilíbrio das obrigações (sinalagma), cláusulas de responsabilidade civil, garantias, condições de rescisão, multas, foro de eleição e mecanismos de resolução de disputas. Compare com a jurisprudência recente do STJ sobre o tipo de contrato em questão.\",\n      legal: \"Analise como uma peça processual. Verifique a conformidade com o Código de Processo Civil, a competência do juízo, a legitimidade das partes, o interesse de agir, a clareza dos pedidos e da causa de pedir. Avalie a força da argumentação jurídica e a adequação das provas solicitadas.\",\n      compliance: \"Concentre-se na análise regulatória. Avalie a política em relação a leis específicas como a LGPD, Lei Anticorrupção (Lei nº 12.846/13) e normas setoriais (ex: BACEN, CVM, ANVISA). Identifique lacunas que possam levar a sanções administrativas ou judiciais.\"\n    };\n\n    return basePrompt + \"\\n\\n\" + (typeSpecificPrompts[analysisType as keyof typeof typeSpecificPrompts] || typeSpecificPrompts.general);\n  }\n\n  private async getTemplateSpecificPrompt(\n    templateData: {\n      template: DocumentTemplate;\n      prompts: TemplatePrompt[];\n      analysisRules: TemplateAnalysisRule[];\n      requiredClauses: LegalClause[];\n      optionalClauses: LegalClause[];\n    },\n    aiProvider: string\n  ): Promise<string> {\n    const { template, prompts, analysisRules, requiredClauses, optionalClauses } = templateData;\n    \n    // Find prompts for this AI provider\n    const applicablePrompts = prompts.filter(p => \n      p.aiProvider === aiProvider || p.aiProvider === 'all'\n    ).sort((a, b) => a.priority - b.priority);\n\n    const templatePrompt = `\n# Adendo de Análise Específica por Template\n\nConselheiro Ius, além da sua análise jurídica geral, aplique seu conhecimento aprofundado ao seguinte contexto de template específico. Sua análise deve integrar estas regras e requisitos diretamente em seu raciocínio.\n\n## Contexto do Documento\n- **TIPO DE DOCUMENTO:** ${template.category} - ${template.subcategory}\n- **NOME DO TEMPLATE:** ${template.name}\n- **DESCRIÇÃO:** ${template.description}\n\n## Lista de Cláusulas Essenciais\nVocê deve verificar a presença e a adequação técnica das seguintes cláusulas obrigatórias:\n${requiredClauses.map(clause => `- **${clause.name}:** ${clause.description}`).join('\\n')}\n\n## Lista de Cláusulas Recomendadas\nVerifique também a presença destas cláusulas recomendadas, que representam boas práticas de mercado e mitigação de risco:\n${optionalClauses.map(clause => `- **${clause.name}:** ${clause.description}`).join('\\n')}\n\n## Regras de Validação Específicas\nAplique as seguintes regras de validação com rigor técnico:\n${analysisRules.map(rule => `- **Regra \"${rule.ruleName}\":** Verifique se o documento não incorre no seguinte problema: \"${rule.errorMessage}\".`).join('\\n')}\n\n## Requisitos de Análise Adicionais\nConsidere as seguintes diretrizes específicas para este template:\n${applicablePrompts.map(prompt => `- ${prompt.promptText}`).join('\\n')}\n\n# Extensão da Estrutura de Saída JSON\n\nAo gerar o JSON final, adicione o seguinte objeto \\`templateAnalysis\\` dentro da estrutura principal. Este objeto deve conter os resultados da sua análise específica do template.\n\n\"templateAnalysis\": {\n    \"templateId\": \"${template.templateId}\",\n    \"templateName\": \"${template.name}\",\n    \"missingClauses\": [\n      {\n        \"clauseName\": \"Nome da Cláusula Faltante\",\n        \"importance\": \"Obrigatória | Recomendada\",\n        \"recommendation\": \"Descrição do risco associado à ausência e por que deve ser incluída.\"\n      }\n    ],\n    \"identifiedClausesAnalysis\": [\n      {\n        \"clauseName\": \"Nome da Cláusula Identificada\",\n        \"status\": \"Adequada | Requer Atenção | Crítica\",\n        \"analysis\": \"Análise técnica da cláusula, apontando pontos fortes, fracos e riscos.\",\n        \"suggestedImprovement\": \"Sugestão de melhoria ou redação alternativa, se aplicável.\"\n      }\n    ],\n    \"validationResults\": [\n      {\n        \"ruleName\": \"Nome da Regra de Validação\",\n        \"status\": \"Cumprida | Violada | Alerta\", \n        \"message\": \"Mensagem detalhando como o documento se comporta em relação à regra.\",\n        \"recommendation\": \"Ação corretiva necessária para cumprir a regra.\"\n      }\n    ],\n    \"templateSpecificRisks\": [\n      {\n        \"category\": \"Categoria do Risco (ex: Financeiro, Operacional, Regulatório)\",\n        \"level\": \"Baixo | Médio | Alto | Crítico\",\n        \"description\": \"Descrição detalhada do risco específico do template.\",\n        \"mitigationStrategy\": \"Estratégia ou ação recomendada para mitigar este risco.\"\n      }\n    ]\n  }`;\n\n    return templatePrompt;\n  }\n\n  async loadTemplateData(templateId: string, aiProvider: string): Promise<{\n    template: DocumentTemplate;\n    prompts: TemplatePrompt[];\n    analysisRules: TemplateAnalysisRule[];\n    requiredClauses: LegalClause[];\n    optionalClauses: LegalClause[];\n  } | null> {\n    try {\n      // Note: Template loading functionality would need to be implemented in storage\n      // For now, return null to avoid compilation errors\n      console.log(`Template loading not yet implemented for ${templateId}`);\n      return null;\n    } catch (error) {\n      console.error(`Error loading template data for ${templateId}:`, error);\n      return null;\n    }\n  }\n\n  async analyzeWithOpenAI(content: string, analysisType: string, apiKey?: string, templateData?: any): Promise<AnalysisResult> {\n    const finalApiKey = await this.getApiKeyWithFallback('openai', apiKey);\n    if (!finalApiKey) {\n      throw new Error(\"No OpenAI API key available (user key, system key, or environment variable)\");\n    }\n\n    const client = new OpenAI({ apiKey: finalApiKey });\n\n    // Use template-specific prompt if available, otherwise use standard prompt\n    const systemPrompt = templateData \n      ? await this.getTemplateSpecificPrompt(templateData, 'openai')\n      : this.getSystemPrompt(analysisType);\n\n    const response = await client.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: `Please analyze the following legal document:\\n\\n${content}`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.1,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result as AnalysisResult;\n  }\n\n  async analyzeWithAnthropic(content: string, analysisType: string, apiKey?: string, templateData?: any): Promise<AnalysisResult> {\n    const finalApiKey = await this.getApiKeyWithFallback('anthropic', apiKey);\n    if (!finalApiKey) {\n      throw new Error(\"No Anthropic API key available (user key, system key, or environment variable)\");\n    }\n\n    const client = new Anthropic({ apiKey: finalApiKey });\n\n    // Use template-specific prompt if available, otherwise use standard prompt\n    const systemPrompt = templateData \n      ? await this.getTemplateSpecificPrompt(templateData, 'anthropic')\n      : this.getSystemPrompt(analysisType);\n\n    const response = await client.messages.create({\n      model: \"claude-sonnet-4-20250514\", // newest Anthropic model\n      system: systemPrompt,\n      messages: [\n        {\n          role: \"user\",\n          content: `Please analyze the following legal document:\\n\\n${content}`\n        }\n      ],\n      max_tokens: 4000,\n      temperature: 0.1,\n    });\n\n    const textBlock = response.content.find(block => block.type === 'text');\n    if (!textBlock || textBlock.type !== 'text') {\n      throw new Error('No text content in response');\n    }\n    const result = JSON.parse(textBlock.text);\n    return result as AnalysisResult;\n  }\n\n  async analyzeWithGemini(content: string, analysisType: string, apiKey?: string, templateData?: any): Promise<AnalysisResult> {\n    const finalApiKey = await this.getApiKeyWithFallback('gemini', apiKey);\n    if (!finalApiKey) {\n      throw new Error(\"No Gemini API key available (user key, system key, or environment variable)\");\n    }\n\n    const client = new GoogleGenAI({ apiKey: finalApiKey });\n\n    // Use template-specific prompt if available, otherwise use standard prompt\n    const systemPrompt = templateData \n      ? await this.getTemplateSpecificPrompt(templateData, 'gemini')\n      : this.getSystemPrompt(analysisType);\n\n    const response = await client.models.generateContent({\n      model: \"gemini-2.5-pro\", // newest Gemini model\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n      },\n      contents: `Please analyze the following legal document:\\n\\n${content}`,\n    });\n\n    const result = JSON.parse(response.text || '{}');\n    return result as AnalysisResult;\n  }\n\n  async analyzeWithFreeAI(content: string, analysisType: string, templateData?: any): Promise<AnalysisResult> {\n    // Enhanced free analysis with actual content processing\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate processing time\n    \n    const wordCount = content.split(' ').length;\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 10);\n    const paragraphs = content.split('\\n\\n').filter(p => p.trim().length > 0);\n    \n    // Legal terms analysis\n    const contractTerms = content.toLowerCase().match(/\\b(contrato|contratante|contratado|acordo|convenção|pacto)\\b/gi) || [];\n    const legalTerms = content.toLowerCase().match(/\\b(lei|artigo|parágrafo|cláusula|disposição|decreto|resolução|portaria)\\b/gi) || [];\n    const obligationTerms = content.toLowerCase().match(/\\b(deve|obriga|responsável|responsabilidade|dever|direito|obrigação)\\b/gi) || [];\n    const paymentTerms = content.toLowerCase().match(/\\b(pagamento|pagar|valor|preço|remuneração|honorário|taxa|multa)\\b/gi) || [];\n    const terminationTerms = content.toLowerCase().match(/\\b(rescisão|rescind|cancelar|terminar|encerrar|romper|fim)\\b/gi) || [];\n    \n    // Identify potential issues\n    const criticalFlaws = [];\n    const warnings = [];\n    const improvements = [];\n    \n    // Content analysis\n    if (wordCount < 50) {\n      warnings.push(\"Documento muito curto - pode estar incompleto\");\n    }\n    if (wordCount > 5000) {\n      warnings.push(\"Documento extenso - análise detalhada requer plano premium\");\n    }\n    if (sentences.length < 5) {\n      warnings.push(\"Estrutura de frases pode estar inadequada\");\n    }\n    \n    // Legal compliance checks\n    if (contractTerms.length > 0 && paymentTerms.length === 0) {\n      criticalFlaws.push(\"Contrato identificado sem cláusulas de pagamento claras\");\n    }\n    if (contractTerms.length > 0 && terminationTerms.length === 0) {\n      warnings.push(\"Contrato sem cláusulas de rescisão aparentes\");\n    }\n    if (obligationTerms.length === 0 && contractTerms.length > 0) {\n      warnings.push(\"Poucas definições de obrigações e responsabilidades\");\n    }\n    \n    // Content improvements\n    if (paragraphs.length < 3) {\n      improvements.push(\"Melhorar organização em parágrafos para maior clareza\");\n    }\n    if (legalTerms.length < 3) {\n      improvements.push(\"Incluir mais referências legais específicas se aplicável\");\n    }\n    if (content.indexOf('LGPD') === -1 && content.indexOf('dados') > -1) {\n      improvements.push(\"Considerar cláusulas LGPD se houver tratamento de dados\");\n    }\n    \n    // Calculate compliance score\n    let complianceScore = 60; // Base score\n    if (contractTerms.length > 0) complianceScore += 10;\n    if (legalTerms.length > 2) complianceScore += 10;\n    if (paymentTerms.length > 0) complianceScore += 5;\n    if (terminationTerms.length > 0) complianceScore += 5;\n    if (obligationTerms.length > 2) complianceScore += 10;\n    \n    // Risk level calculation\n    let riskLevel: 'low' | 'medium' | 'high' | 'critical' = 'low';\n    if (criticalFlaws.length > 0) riskLevel = 'high';\n    else if (warnings.length > 2) riskLevel = 'medium';\n    else if (warnings.length > 0) riskLevel = 'low';\n    \n    // Generate meaningful summary\n    let summary = `Documento com ${wordCount} palavras`;\n    if (contractTerms.length > 0) summary += `, identificado como documento contratual`;\n    if (legalTerms.length > 0) summary += `, com ${legalTerms.length} referências legais`;\n    if (paymentTerms.length > 0) summary += `, incluindo cláusulas de pagamento`;\n    summary += `. Análise gratuita detectou aspectos básicos - use plano premium para análise completa.`;\n    \n    // Enhanced content-specific analysis\n    let specificAnalysis = [];\n    let detectedIssues = [];\n    \n    // Detect potential \"pegadinhas\" or tricky content\n    if (content.toLowerCase().includes('pegadinha')) {\n      specificAnalysis.push(\"ATENÇÃO: Documento contém termo 'pegadinha' - pode ser texto de teste ou conteúdo suspeito\");\n      detectedIssues.push(\"Conteúdo potencialmente não-oficial detectado\");\n    }\n    \n    // Check for incomplete or test content\n    if (wordCount < 100 && !contractTerms.length && !legalTerms.length) {\n      specificAnalysis.push(\"Documento parece ser um teste ou conteúdo incompleto\");\n      detectedIssues.push(\"Conteúdo muito simples - pode não ser documento legal real\");\n    }\n    \n    // Real content analysis based on what's actually in the text\n    if (contractTerms.length > 0) {\n      specificAnalysis.push(`Identificado como CONTRATO com ${contractTerms.length} termos contratuais`);\n    }\n    if (paymentTerms.length > 0) {\n      specificAnalysis.push(`Encontradas ${paymentTerms.length} referências a pagamento`);\n    }\n    if (terminationTerms.length > 0) {\n      specificAnalysis.push(`Identificadas ${terminationTerms.length} cláusulas de rescisão`);\n    }\n    \n    // Fix the contradiction - don't say \"no critical flaws\" if we count them as critical\n    const finalCriticalFlaws = criticalFlaws.length > 0 ? criticalFlaws : [];\n    const finalWarnings = warnings.length > 0 ? warnings : [];\n    \n    let baseResult = {\n      summary: `${summary} ${specificAnalysis.length > 0 ? 'ANÁLISE ESPECÍFICA: ' + specificAnalysis.join('. ') : ''}`,\n      criticalFlaws: finalCriticalFlaws,\n      warnings: finalWarnings.concat(detectedIssues),\n      improvements: improvements.length > 0 ? improvements : [\"Documento analisado - estrutura básica identificada\"],\n      legalCompliance: {\n        score: Math.min(complianceScore, 85),\n        issues: finalCriticalFlaws.length > 0 ? finalCriticalFlaws : finalWarnings.slice(0, 2)\n      },\n      recommendations: [\n        `Análise gratuita detectou: ${specificAnalysis.length > 0 ? specificAnalysis[0] : 'estrutura básica do documento'}`,\n        ...improvements.slice(0, 1),\n        \"Para análise jurídica detalhada, considere plano premium\"\n      ],\n      riskLevel\n    };\n\n    // Add basic template analysis if template data is provided\n    if (templateData) {\n      baseResult.summary += ` Análise baseada no template: ${templateData.template.name}.`;\n      (baseResult as any).templateAnalysis = {\n        templateId: templateData.template.templateId,\n        templateName: templateData.template.name,\n        missingClauses: [], // Free tier doesn't provide detailed clause analysis\n        identifiedClauses: [],\n        validationResults: [{\n          ruleName: \"Análise Básica\",\n          status: \"warning\",\n          message: \"Análise básica realizada. Use análise premium para validação completa de template.\",\n          recommendation: \"Upgrade para análise detalhada com validação de cláusulas específicas\"\n        }],\n        templateSpecificRisks: [{\n          category: \"Limitações da Análise Gratuita\",\n          level: \"medium\",\n          description: \"Análise gratuita não incluiu validação específica de template\",\n          mitigation: \"Considere upgrade para análise premium com validação completa\"\n        }],\n        complianceScore: 50\n      };\n    }\n\n    return baseResult as AnalysisResult;\n  }\n\n  getProviderCredits(provider: string, analysisType: string = 'general'): number {\n    // Tiered pricing structure based on analysis complexity\n    const tierMultipliers = {\n      'general': 1.0,       // Basic analysis\n      'contract': 1.5,      // Advanced contract analysis  \n      'legal': 1.5,         // Advanced legal document analysis\n      'compliance': 2.0,    // Most complex compliance analysis\n      'template': 1.8       // Template-specific analysis with validation\n    };\n\n    const baseCredits = {\n      'openai-gpt4': 2,\n      'openai-gpt5': 3,\n      'anthropic-claude': 3,\n      'gemini-pro': 1,\n      'gemini-flash': 1,\n      'openrouter': 2,\n      'free': 0\n    };\n\n    const base = baseCredits[provider as keyof typeof baseCredits] || 1;\n    const multiplier = tierMultipliers[analysisType as keyof typeof tierMultipliers] || 1.0;\n    \n    // Calculate final credits and round up to ensure we always cover costs\n    const finalCredits = Math.ceil(base * multiplier);\n    \n    return finalCredits;\n  }\n\n  async analyzeDocument(\n    content: string,\n    analysisType: string,\n    provider: string,\n    model: string,\n    apiKey?: string,\n    templateId?: string\n  ): Promise<AnalysisResult> {\n    try {\n      // Load template data if templateId is provided\n      let templateData = null;\n      if (templateId) {\n        templateData = await this.loadTemplateData(templateId, provider);\n        // Use template analysis type for pricing calculation\n        analysisType = 'template';\n      }\n\n      switch (provider) {\n        case 'openai':\n          return await this.analyzeWithOpenAI(content, analysisType, apiKey, templateData);\n        case 'anthropic':\n          return await this.analyzeWithAnthropic(content, analysisType, apiKey, templateData);\n        case 'gemini':\n          return await this.analyzeWithGemini(content, analysisType, apiKey, templateData);\n        case 'free':\n          return await this.analyzeWithFreeAI(content, analysisType, templateData);\n        default:\n          throw new Error(`Unsupported AI provider: ${provider}`);\n      }\n    } catch (error: any) {\n      throw new Error(`AI Analysis failed: ${error.message}`);\n    }\n  }\n\n  // Helper method to get analysis type display name and description\n  getAnalysisTypeInfo(analysisType: string): { name: string; description: string; credits: string } {\n    const typeInfo = {\n      'general': {\n        name: 'Análise Geral',\n        description: 'Análise básica de documentos jurídicos',\n        credits: 'Baixo custo'\n      },\n      'contract': {\n        name: 'Análise de Contratos',\n        description: 'Análise detalhada de cláusulas e termos contratuais',\n        credits: 'Custo médio'\n      },\n      'legal': {\n        name: 'Análise Jurídica',\n        description: 'Análise especializada de petições e documentos legais',\n        credits: 'Custo médio'\n      },\n      'compliance': {\n        name: 'Análise de Conformidade',\n        description: 'Verificação completa de compliance regulatório',\n        credits: 'Alto custo'\n      },\n      'template': {\n        name: 'Análise com Template',\n        description: 'Validação específica baseada em modelo predefinido',\n        credits: 'Custo premium'\n      }\n    };\n\n    return typeInfo[analysisType as keyof typeof typeInfo] || typeInfo.general;\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":27247},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { supabase } from '@/lib/supabase';\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// Helper function to get authorization headers\nasync function getAuthHeaders(): Promise<Record<string, string>> {\n  const { data: { session } } = await supabase.auth.getSession();\n  \n  if (session?.access_token) {\n    return {\n      'Authorization': `Bearer ${session.access_token}`,\n    };\n  }\n  \n  return {};\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Handle FormData differently - don't JSON stringify or set Content-Type\n  const isFormData = data instanceof FormData;\n  \n  // Get authorization headers from Supabase\n  const authHeaders = await getAuthHeaders();\n  \n  const headers = {\n    ...authHeaders,\n    ...(isFormData ? {} : (data ? { \"Content-Type\": \"application/json\" } : {})),\n  };\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: isFormData ? data as FormData : (data ? JSON.stringify(data) : undefined),\n    cache: url.includes('/api/auth/') ? 'no-store' : 'default', // Prevent auth caching\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Get authorization headers from Supabase\n    const authHeaders = await getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: authHeaders,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2230},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/billing.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { DashboardHeader } from '@/components/layout/dashboard-header';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Link } from 'wouter';\nimport { CreditCard, Plus, ArrowUpRight, ArrowDownRight, Receipt, Coins, Calendar, ExternalLink, BarChart3, TrendingUp, Activity } from 'lucide-react';\n\ninterface CreditTransaction {\n  id: string;\n  type: 'purchase' | 'usage' | 'refund';\n  amount: number;\n  description: string;\n  stripePaymentIntentId?: string;\n  createdAt: string;\n}\n\ninterface CreditAnalytics {\n  summary: {\n    totalSpent: number;\n    totalPurchased: number;\n    currentBalance: number;\n    totalAnalyses: number;\n  };\n  providerSpending: Array<{\n    provider: string;\n    amount: number;\n  }>;\n  monthlySpending: Array<{\n    month: string;\n    amount: number;\n  }>;\n  recentTransactions: CreditTransaction[];\n}\n\nexport default function Billing() {\n  const { user } = useSupabaseAuth();\n\n  const { data: transactions = [], isLoading } = useQuery<CreditTransaction[]>({\n    queryKey: ['/api/credit-transactions'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/credit-transactions');\n      return response.json();\n    }\n  });\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery<CreditAnalytics>({\n    queryKey: ['/api/credit-analytics'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/credit-analytics');\n      return response.json();\n    }\n  });\n\n  // Load user profile data including credits\n  const { data: userProfile } = useQuery<{userProfile: {credits: number}}>({\n    queryKey: ['/api/user/profile'],\n    enabled: !!user // Only run when user is authenticated\n  });\n\n  if (!user) return null;\n\n  const totalPurchased = transactions\n    .filter(t => t.type === 'purchase')\n    .reduce((sum, t) => sum + t.amount, 0);\n\n  const totalUsed = transactions\n    .filter(t => t.type === 'usage')\n    .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'purchase': return <ArrowUpRight className=\"text-green-600\" size={16} />;\n      case 'usage': return <ArrowDownRight className=\"text-red-600\" size={16} />;\n      case 'refund': return <ArrowUpRight className=\"text-blue-600\" size={16} />;\n      default: return <Receipt size={16} />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case 'purchase': return 'text-green-600';\n      case 'usage': return 'text-red-600';\n      case 'refund': return 'text-blue-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getTransactionLabel = (type: string) => {\n    switch (type) {\n      case 'purchase': return 'Compra';\n      case 'usage': return 'Uso';\n      case 'refund': return 'Reembolso';\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-billing-title\">\n            Financeiro\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-billing-description\">\n            Gerencie seus créditos e visualize o histórico de transações\n          </p>\n        </div>\n\n        {/* Credit Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Créditos Atuais</p>\n                  <p className=\"text-3xl font-bold text-primary\" data-testid=\"text-current-credits\">\n                    {userProfile?.userProfile?.credits || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Coins className=\"text-primary\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Total Comprado</p>\n                  <p className=\"text-3xl font-bold text-green-600\" data-testid=\"text-total-purchased\">\n                    {totalPurchased}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <ArrowUpRight className=\"text-green-600\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Total Utilizado</p>\n                  <p className=\"text-3xl font-bold text-orange-600\" data-testid=\"text-total-used\">\n                    {totalUsed}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                  <ArrowDownRight className=\"text-orange-600\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Transações</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-total-transactions\">\n                    {transactions.length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center\">\n                  <Receipt size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-primary to-accent text-primary-foreground\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\" data-testid=\"text-buy-credits-title\">\n                <Coins className=\"mr-2\" size={20} />\n                Comprar Créditos\n              </CardTitle>\n              <CardDescription className=\"text-primary-foreground/80\">\n                Adquira mais créditos para continuar analisando documentos\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/checkout\">\n                <Button className=\"w-full bg-white text-primary hover:bg-gray-100\" data-testid=\"button-buy-credits\">\n                  <Plus className=\"mr-2\" size={16} />\n                  Comprar Agora\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\" data-testid=\"text-subscription-title\">\n                <Calendar className=\"mr-2\" size={20} />\n                Planos Mensais\n              </CardTitle>\n              <CardDescription>\n                Economize com nossos planos de assinatura mensal\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/checkout?type=subscription\">\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-plans\">\n                  <ExternalLink className=\"mr-2\" size={16} />\n                  Ver Planos\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\" data-testid=\"text-payment-methods-title\">\n                <CreditCard className=\"mr-2\" size={20} />\n                Métodos de Pagamento\n              </CardTitle>\n              <CardDescription>\n                Gerencie seus cartões e métodos de pagamento\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button variant=\"outline\" className=\"w-full\" disabled data-testid=\"button-manage-payment\">\n                Em Breve\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Credit Analytics */}\n        {analytics && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\" data-testid=\"text-provider-spending-title\">\n                  <BarChart3 className=\"mr-2\" size={20} />\n                  Gastos por Provedor de IA\n                </CardTitle>\n                <CardDescription>\n                  Distribuição de créditos utilizados por cada provedor\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analyticsLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-3 h-3 bg-muted rounded-full\" />\n                          <div className=\"h-4 bg-muted rounded w-24\" />\n                        </div>\n                        <div className=\"h-4 bg-muted rounded w-16\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : analytics.providerSpending.length === 0 ? (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <Activity size={32} className=\"mx-auto mb-2 opacity-50\" />\n                    <p>Nenhum uso registrado ainda</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {analytics.providerSpending.map((provider, index) => (\n                      <div key={provider.provider} className=\"flex items-center justify-between\" data-testid={`provider-spending-${provider.provider}`}>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full`} style={{ backgroundColor: `hsl(${index * 45}, 70%, 60%)` }} />\n                          <span className=\"font-medium\">{provider.provider}</span>\n                        </div>\n                        <span className=\"text-sm font-bold\">{provider.amount} créditos</span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\" data-testid=\"text-monthly-trends-title\">\n                  <TrendingUp className=\"mr-2\" size={20} />\n                  Tendência Mensal\n                </CardTitle>\n                <CardDescription>\n                  Uso de créditos ao longo dos últimos meses\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analyticsLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(4)].map((_, i) => (\n                      <div key={i} className=\"flex items-center justify-between\">\n                        <div className=\"h-4 bg-muted rounded w-20\" />\n                        <div className=\"h-4 bg-muted rounded w-16\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : analytics.monthlySpending.length === 0 ? (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <Calendar size={32} className=\"mx-auto mb-2 opacity-50\" />\n                    <p>Nenhum histórico mensal disponível</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {analytics.monthlySpending.slice(-6).map((month) => (\n                      <div key={month.month} className=\"flex items-center justify-between\" data-testid={`monthly-spending-${month.month}`}>\n                        <span className=\"text-sm\">{new Date(month.month + '-01').toLocaleDateString('pt-BR', { year: 'numeric', month: 'short' })}</span>\n                        <span className=\"font-bold\">{month.amount} créditos</span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Transaction History */}\n        <Card>\n          <CardHeader>\n            <CardTitle data-testid=\"text-transaction-history-title\">Histórico de Transações</CardTitle>\n            <CardDescription>\n              Visualize todas as suas transações de créditos\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex items-center justify-between p-4 border border-border rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-muted rounded-lg\" />\n                      <div>\n                        <div className=\"h-4 bg-muted rounded w-32 mb-2\" />\n                        <div className=\"h-3 bg-muted rounded w-24\" />\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"h-4 bg-muted rounded w-16 mb-2\" />\n                      <div className=\"h-3 bg-muted rounded w-12\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : transactions.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\" data-testid=\"text-no-transactions\">\n                <Receipt size={48} className=\"mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Nenhuma transação encontrada</h3>\n                <p className=\"mb-4\">Você ainda não realizou nenhuma compra de créditos</p>\n                <Link href=\"/checkout\">\n                  <Button data-testid=\"button-first-purchase\">\n                    <Plus className=\"mr-2\" size={16} />\n                    Fazer Primeira Compra\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {transactions.map((transaction) => (\n                  <div\n                    key={transaction.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-accent/5 transition-colors\"\n                    data-testid={`card-transaction-${transaction.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-muted rounded-lg flex items-center justify-center\">\n                        {getTransactionIcon(transaction.type)}\n                      </div>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-transaction-description-${transaction.id}`}>\n                          {transaction.description}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground flex items-center space-x-2\">\n                          <span data-testid={`text-transaction-date-${transaction.id}`}>\n                            {formatDate(transaction.createdAt)}\n                          </span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {getTransactionLabel(transaction.type)}\n                          </Badge>\n                          {transaction.stripePaymentIntentId && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Stripe\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <div className={`font-bold ${getTransactionColor(transaction.type)}`} data-testid={`text-transaction-amount-${transaction.id}`}>\n                        {transaction.type === 'usage' ? '-' : '+'}{Math.abs(transaction.amount)} créditos\n                      </div>\n                      {transaction.stripePaymentIntentId && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          ID: {transaction.stripePaymentIntentId.slice(-8)}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n                \n                {transactions.length >= 20 && (\n                  <div className=\"text-center pt-6\">\n                    <Button variant=\"outline\" data-testid=\"button-load-more\">\n                      Carregar Mais Transações\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18198},"client/src/pages/checkout.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { DashboardHeader } from '@/components/layout/dashboard-header';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Check, CreditCard, Zap, Crown, Building, ArrowLeft } from 'lucide-react';\nimport type { CreditPackage } from '@shared/schema';\n\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\n\ninterface CheckoutFormProps {\n  selectedPackage: any;\n  onPaymentSuccess: () => void;\n}\n\nfunction CheckoutForm({ selectedPackage, onPaymentSuccess }: CheckoutFormProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: window.location.origin + '/payment-success',\n        },\n        redirect: 'always'\n      });\n\n      if (error) {\n        toast({\n          title: \"Erro no Pagamento\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Pagamento Realizado!\",\n          description: `${selectedPackage.credits} créditos adicionados à sua conta`,\n        });\n        onPaymentSuccess();\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erro no Pagamento\",\n        description: error.message || \"Erro inesperado no pagamento\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-payment\">\n      <PaymentElement />\n      \n      <div className=\"bg-muted/30 rounded-lg p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"font-medium\">Total:</span>\n          <span className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-price\">\n            R$ {selectedPackage.price}\n          </span>\n        </div>\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span>{selectedPackage.credits} créditos</span>\n          <span>R$ {(selectedPackage.price / selectedPackage.credits).toFixed(2)} por crédito</span>\n        </div>\n        <div className=\"text-xs text-muted-foreground mt-2\">\n          ✨ Cobertura completa dos custos de IA premium + margem de qualidade\n        </div>\n      </div>\n      \n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={!stripe || isProcessing}\n        data-testid=\"button-pay\"\n      >\n        {isProcessing ? \"Processando...\" : `Pagar R$ ${selectedPackage.price}`}\n      </Button>\n    </form>\n  );\n}\n\nexport default function Checkout() {\n  const { user } = useSupabaseAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const { data: creditPackages = [], isLoading } = useQuery<CreditPackage[]>({\n    queryKey: ['/api/credit-packages'],\n  });\n\n  // Load user profile data including credits\n  const { data: userProfile } = useQuery<{userProfile: {credits: number}}>({\n    queryKey: ['/api/user/profile'],\n    enabled: !!user // Only run when user is authenticated\n  });\n  \n  const [selectedPackage, setSelectedPackage] = useState<CreditPackage | null>(null);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [showPayment, setShowPayment] = useState(false);\n  \n  // Set default selected package to the popular one when data loads\n  useEffect(() => {\n    if (creditPackages.length > 0 && !selectedPackage) {\n      const popularPackage = creditPackages.find(pkg => pkg.isPopular) || creditPackages[0];\n      setSelectedPackage(popularPackage);\n    }\n  }, [creditPackages, selectedPackage]);\n\n  const createPaymentIntent = async (packageData: CreditPackage) => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/create-payment-intent\", { \n        packageId: packageData.packageId\n      });\n      const data = await response.json();\n      setClientSecret(data.clientSecret);\n      setShowPayment(true);\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao processar pagamento\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePackageSelect = (pkg: CreditPackage) => {\n    setSelectedPackage(pkg);\n    setShowPayment(false);\n    setClientSecret(\"\");\n  };\n\n  const handleProceedToPayment = () => {\n    if (selectedPackage) {\n      createPaymentIntent(selectedPackage);\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    setLocation('/billing?success=true');\n  };\n\n  if (!user) {\n    setLocation('/login');\n    return null;\n  }\n  \n  if (isLoading || !selectedPackage) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"mb-8\">\n              <Button variant=\"ghost\" onClick={() => setLocation('/billing')} className=\"mb-4\">\n                <ArrowLeft className=\"mr-2\" size={16} />\n                Voltar para Financeiro\n              </Button>\n              <h1 className=\"text-3xl font-bold mb-2\">Comprar Créditos</h1>\n              <p className=\"text-muted-foreground\">Carregando pacotes disponíveis...</p>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-16 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"mb-8\">\n            <Button variant=\"ghost\" onClick={() => setLocation('/billing')} className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"mr-2\" size={16} />\n              Voltar para Financeiro\n            </Button>\n            \n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-checkout-title\">\n              Comprar Créditos\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-checkout-description\">\n              Escolha o pacote de créditos ideal para suas necessidades\n            </p>\n          </div>\n\n          {!showPayment ? (\n            <>\n              {/* Package Selection */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                {creditPackages.map((pkg) => (\n                  <Card \n                    key={pkg.packageId} \n                    className={`cursor-pointer transition-all relative ${\n                      selectedPackage.packageId === pkg.packageId \n                        ? 'border-2 border-primary shadow-lg' \n                        : 'border border-border hover:shadow-md'\n                    } ${pkg.isPopular ? 'transform scale-105' : ''}`}\n                    onClick={() => handlePackageSelect(pkg)}\n                    data-testid={`card-package-${pkg.packageId}`}\n                  >\n                    {pkg.isPopular && (\n                      <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                        <Badge className=\"bg-primary text-primary-foreground\">\n                          Mais Popular\n                        </Badge>\n                      </div>\n                    )}\n                    \n                    <CardHeader>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <CardTitle className=\"text-xl\" data-testid={`text-package-name-${pkg.packageId}`}>\n                          {pkg.name}\n                        </CardTitle>\n                        {pkg.packageId === 'credits_50' && <Zap className=\"text-blue-500\" size={24} />}\n                        {pkg.packageId === 'credits_100' && <Crown className=\"text-yellow-500\" size={24} />}\n                        {pkg.packageId === 'credits_500' && <Building className=\"text-purple-500\" size={24} />}\n                      </div>\n                      <div className=\"text-3xl font-bold text-primary\" data-testid={`text-package-price-${pkg.packageId}`}>\n                        R$ {parseFloat(pkg.price)}\n                      </div>\n                      <CardDescription data-testid={`text-package-description-${pkg.packageId}`}>\n                        {pkg.description}\n                      </CardDescription>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"mb-4\">\n                        <div className=\"text-2xl font-bold mb-1\" data-testid={`text-package-credits-${pkg.packageId}`}>\n                          {pkg.credits} créditos\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          R$ {(parseFloat(pkg.price) / pkg.credits).toFixed(2)} por crédito\n                        </div>\n                      </div>\n                      \n                      <ul className=\"space-y-2\">\n                        {(pkg.features as string[]).map((feature, index) => (\n                          <li key={index} className=\"flex items-center text-sm\" data-testid={`text-feature-${pkg.packageId}-${index}`}>\n                            <Check className=\"text-green-600 mr-2\" size={16} />\n                            {feature}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Selected Package Summary */}\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\" data-testid=\"text-selected-package-title\">\n                    <CreditCard className=\"mr-2\" size={20} />\n                    Resumo do Pedido\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between py-4 border-b\">\n                    <div>\n                      <div className=\"font-medium\" data-testid=\"text-selected-package-name\">\n                        {selectedPackage.name}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {selectedPackage.credits} créditos • {selectedPackage.description}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-selected-package-price\">\n                        R$ {parseFloat(selectedPackage.price)}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"py-4\">\n                    <div className=\"flex items-center justify-between text-sm mb-2\">\n                      <span>Créditos atuais:</span>\n                      <span data-testid=\"text-current-credits\">{userProfile?.userProfile?.credits || 0}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm mb-2\">\n                      <span>Créditos adicionais:</span>\n                      <span data-testid=\"text-additional-credits\">+{selectedPackage.credits}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between font-medium\">\n                      <span>Total após compra:</span>\n                      <span className=\"text-primary\" data-testid=\"text-total-credits\">\n                        {(userProfile?.userProfile?.credits || 0) + selectedPackage.credits} créditos\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    className=\"w-full\" \n                    onClick={handleProceedToPayment}\n                    data-testid=\"button-proceed-payment\"\n                  >\n                    Prosseguir para Pagamento\n                  </Button>\n                </CardContent>\n              </Card>\n            </>\n          ) : (\n            /* Payment Form */\n            <Card className=\"max-w-md mx-auto\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\" data-testid=\"text-payment-title\">\n                  <CreditCard className=\"mr-2\" size={20} />\n                  Finalizar Pagamento\n                </CardTitle>\n                <CardDescription>\n                  Complete os dados do cartão para finalizar a compra\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {clientSecret && (\n                  <Elements stripe={stripePromise} options={{ clientSecret }}>\n                    <CheckoutForm \n                      selectedPackage={selectedPackage}\n                      onPaymentSuccess={handlePaymentSuccess}\n                    />\n                  </Elements>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Security Notice */}\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 max-w-2xl mx-auto mt-8\">\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                  <Check className=\"text-white\" size={16} />\n                </div>\n              </div>\n              <div className=\"ml-3\">\n                <h4 className=\"font-medium text-green-900 mb-1\">Pagamento Seguro</h4>\n                <p className=\"text-sm text-green-800\">\n                  Seus dados são protegidos com criptografia SSL de 256 bits. \n                  Processamento realizado pelo Stripe, certificado PCI DSS Level 1.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15390},"client/src/pages/dashboard.tsx":{"content":"import { useState, useMemo, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { DashboardHeader } from '@/components/layout/dashboard-header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { FileUpload } from '@/components/ui/file-upload';\nimport { AIProviderSelector } from '@/components/ui/ai-provider-selector';\nimport { TemplateSelector } from '@/components/ui/template-selector';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { FileText, AlertTriangle, Clock, Coins, Eye, CheckCircle, AlertCircle, TrendingUp } from 'lucide-react';\nimport { Link, useLocation } from 'wouter';\nimport type { AiProviderConfig } from '@shared/schema';\n\ninterface AnalysisResult {\n  summary: string;\n  criticalFlaws: string[];\n  warnings: string[];\n  improvements: string[];\n  legalCompliance: {\n    score: number;\n    issues: string[];\n  };\n  recommendations: string[];\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface DocumentAnalysis {\n  id: string;\n  title: string;\n  content: string;\n  aiProvider: string;\n  aiModel: string;\n  analysisType: string;\n  templateId?: string | null;\n  result: AnalysisResult;\n  creditsUsed: number;\n  status: string;\n  createdAt: string;\n}\n\nexport default function Dashboard() {\n  const { user, loading } = useSupabaseAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [textContent, setTextContent] = useState('');\n  const [analysisType, setAnalysisType] = useState('general');\n  const [selectedProvider, setSelectedProvider] = useState('');\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [currentTab, setCurrentTab] = useState('upload');\n\n  // ALL HOOKS MUST BE CALLED BEFORE ANY CONDITIONAL RETURNS\n  const { data: recentAnalyses = [], isLoading: analysesLoading } = useQuery<DocumentAnalysis[]>({\n    queryKey: ['/api/analyses'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/analyses?limit=5');\n      return response.json();\n    },\n    enabled: !!user // Only run when user is authenticated\n  });\n\n  const { data: aiProviderConfigs = [] } = useQuery<AiProviderConfig[]>({\n    queryKey: ['/api/ai-provider-configs'],\n    enabled: !!user // Only run when user is authenticated\n  });\n\n  // Load user profile data including credits\n  const { data: userProfile } = useQuery<{userProfile: {credits: number, firstName: string}}>({\n    queryKey: ['/api/user/profile'],\n    enabled: !!user // Only run when user is authenticated\n  });\n\n  const analyzeDocumentMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest('POST', '/api/analyze', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Análise Concluída!\",\n        description: `Documento analisado com sucesso. ${data.creditsUsed} créditos utilizados.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/analyses'] });\n      // Reset form\n      setSelectedFile(null);\n      setTextContent('');\n      setSelectedTemplate('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro na Análise\",\n        description: error.message || \"Erro ao analisar documento\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Set default selectedProvider when aiProviderConfigs loads\n  useEffect(() => {\n    if (aiProviderConfigs.length > 0 && !selectedProvider) {\n      // Prefer free providers, then popular ones, then first active one\n      const freeProvider = aiProviderConfigs.find(config => config.isFree && config.isActive);\n      const popularProvider = aiProviderConfigs.find(config => config.isPopular && config.isActive);\n      const firstActiveProvider = aiProviderConfigs.find(config => config.isActive);\n      \n      const defaultProvider = freeProvider || popularProvider || firstActiveProvider;\n      if (defaultProvider) {\n        setSelectedProvider(defaultProvider.providerId);\n      }\n    }\n  }, [aiProviderConfigs, selectedProvider]);\n\n  // Handle authentication redirect properly - avoid setState during render\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [loading, user, setLocation]);\n\n  // Function to get selected provider's credit cost dynamically\n  const getSelectedProviderCredits = () => {\n    const providerConfig = aiProviderConfigs.find(config => config.providerId === selectedProvider);\n    return providerConfig ? providerConfig.credits : 0;\n  };\n\n  const handleAnalyze = () => {\n    if (!selectedFile && !textContent.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Selecione um arquivo ou cole o texto do documento\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    if (selectedFile) {\n      formData.append('file', selectedFile);\n      formData.append('title', selectedFile.name);\n    } else {\n      formData.append('content', textContent);\n      formData.append('title', `Análise de Texto - ${new Date().toLocaleDateString()}`);\n    }\n    \n    formData.append('analysisType', analysisType);\n    formData.append('aiProvider', selectedProvider.split('-')[0]);\n    formData.append('aiModel', selectedProvider.split('-').slice(1).join('-'));\n    \n    // Include template ID if selected\n    if (selectedTemplate) {\n      formData.append('templateId', selectedTemplate);\n    }\n\n    analyzeDocumentMutation.mutate(formData);\n  };\n\n  const getRiskLevelColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'low': return 'text-green-600';\n      case 'medium': return 'text-yellow-600';\n      case 'high': return 'text-orange-600';\n      case 'critical': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getRiskLevelBg = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'low': return 'bg-green-100 text-green-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'high': return 'bg-orange-100 text-orange-800';\n      case 'critical': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Agora mesmo';\n    if (diffInHours < 24) return `${diffInHours}h atrás`;\n    if (diffInHours < 48) return 'Ontem';\n    return date.toLocaleDateString('pt-BR');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {loading ? (\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      ) : !user ? (\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <p>Redirecionando...</p>\n        </div>\n      ) : (\n        <>\n          <DashboardHeader />\n          \n          <div className=\"container mx-auto px-4 py-8\">\n            {/* Welcome Section */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-welcome-title\">\n                Bem-vindo de volta, {user.user_metadata?.first_name || user.email?.split('@')[0] || 'Usuário'}!\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-welcome-description\">\n                Analise seus documentos jurídicos com inteligência artificial avançada.\n              </p>\n            </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Documentos Analisados</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-stat-documents\">\n                    {recentAnalyses.length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"text-primary\" size={20} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Falhas Críticas</p>\n                  <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-stat-critical-flaws\">\n                    {recentAnalyses.reduce((acc, analysis) => acc + (analysis.result?.criticalFlaws?.length || 0), 0)}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"text-destructive\" size={20} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Tempo Economizado</p>\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-stat-time-saved\">\n                    {Math.round(recentAnalyses.reduce((acc, analysis) => acc + (analysis.creditsUsed * 0.5), 0) * 10) / 10}h\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-green-600\" size={20} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Créditos Restantes</p>\n                  <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-stat-credits\">\n                    {userProfile?.userProfile?.credits || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Coins className=\"text-primary\" size={20} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Document Upload Section */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle data-testid=\"text-analyze-title\">Analisar Documento</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* AI Provider Selection */}\n            <AIProviderSelector\n              selectedProvider={selectedProvider}\n              onProviderChange={setSelectedProvider}\n              userCredits={userProfile?.userProfile?.credits || 0}\n            />\n\n            {/* Template Selection */}\n            <TemplateSelector\n              selectedTemplate={selectedTemplate}\n              onTemplateChange={setSelectedTemplate}\n              data-testid=\"template-selector\"\n            />\n\n            {/* Upload Tabs */}\n            <Tabs value={currentTab} onValueChange={setCurrentTab}>\n              <TabsList>\n                <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">\n                  Upload de Arquivo\n                </TabsTrigger>\n                <TabsTrigger value=\"paste\" data-testid=\"tab-paste\">\n                  Colar Texto\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"upload\" className=\"mt-6\">\n                <FileUpload\n                  selectedFile={selectedFile || undefined}\n                  onFileSelect={setSelectedFile}\n                  onFileRemove={() => setSelectedFile(null)}\n                />\n              </TabsContent>\n              \n              <TabsContent value=\"paste\" className=\"mt-6\">\n                <div className=\"space-y-4\">\n                  <Textarea\n                    placeholder=\"Cole o texto do seu documento aqui...\"\n                    value={textContent}\n                    onChange={(e) => setTextContent(e.target.value)}\n                    className=\"min-h-64 resize-none\"\n                    data-testid=\"textarea-content\"\n                  />\n                  <div className=\"flex justify-between text-sm text-muted-foreground\">\n                    <span>Máximo 10.000 caracteres para usuários gratuitos</span>\n                    <span data-testid=\"text-character-count\">\n                      {textContent.length} / 10,000\n                    </span>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* Analysis Options */}\n            <div>\n              <Label className=\"text-sm font-medium mb-3 block\">Tipo de Análise</Label>\n              <RadioGroup value={analysisType} onValueChange={setAnalysisType}>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-start space-x-3 p-4 border border-border rounded-lg hover:bg-accent cursor-pointer\">\n                    <RadioGroupItem value=\"general\" id=\"general\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"general\" className=\"font-medium cursor-pointer\">\n                          Análise Geral\n                        </Label>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Baixo custo\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Verificação completa de falhas, brechas e melhorias (1.0x)\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3 p-4 border border-border rounded-lg hover:bg-accent cursor-pointer\">\n                    <RadioGroupItem value=\"contract\" id=\"contract\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"contract\" className=\"font-medium cursor-pointer\">\n                          Contrato Específico\n                        </Label>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Custo médio\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Análise focada em cláusulas contratuais (1.5x)\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3 p-4 border border-border rounded-lg hover:bg-accent cursor-pointer\">\n                    <RadioGroupItem value=\"legal\" id=\"legal\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"legal\" className=\"font-medium cursor-pointer\">\n                          Peça Jurídica\n                        </Label>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Custo médio\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Verificação de petições e documentos processuais (1.5x)\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3 p-4 border border-border rounded-lg hover:bg-accent cursor-pointer\">\n                    <RadioGroupItem value=\"compliance\" id=\"compliance\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"compliance\" className=\"font-medium cursor-pointer\">\n                          Conformidade Legal\n                        </Label>\n                        <Badge className=\"text-xs bg-orange-100 text-orange-800\">\n                          Alto custo\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Análise de adequação à legislação vigente (2.0x)\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <Button \n              onClick={handleAnalyze}\n              disabled={analyzeDocumentMutation.isPending || (!selectedFile && !textContent.trim())}\n              className=\"w-full md:w-auto\"\n              data-testid=\"button-analyze\"\n            >\n              {analyzeDocumentMutation.isPending ? (\n                \"Analisando...\"\n              ) : (\n                `Analisar Documento (${getSelectedProviderCredits()} créditos)`\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Recent Analyses */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle data-testid=\"text-recent-title\">Análises Recentes</CardTitle>\n              <Link href=\"/analyses\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all\">\n                  Ver todas\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {analysesLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4 border border-border rounded-lg\">\n                    <div className=\"w-10 h-10 bg-muted rounded-lg\" />\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-1/3 mb-2\" />\n                      <div className=\"h-3 bg-muted rounded w-1/2\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : recentAnalyses.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-analyses\">\n                <FileText size={48} className=\"mx-auto mb-4 opacity-50\" />\n                <p>Nenhuma análise encontrada</p>\n                <p className=\"text-sm\">Faça upload do seu primeiro documento para começar</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentAnalyses.map((analysis) => (\n                  <div\n                    key={analysis.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-accent transition-colors\"\n                    data-testid={`card-analysis-${analysis.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <FileText className=\"text-primary\" size={20} />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-analysis-title-${analysis.id}`}>\n                          {analysis.title}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid={`text-analysis-meta-${analysis.id}`}>\n                          {formatDate(analysis.createdAt)} • {analysis.aiProvider} {analysis.aiModel}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {analysis.result?.criticalFlaws?.length > 0 && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            {analysis.result.criticalFlaws.length} críticas\n                          </Badge>\n                        )}\n                        {analysis.result?.warnings?.length > 0 && (\n                          <Badge className=\"bg-yellow-100 text-yellow-800 text-xs\">\n                            {analysis.result.warnings.length} alertas\n                          </Badge>\n                        )}\n                        {analysis.result?.improvements?.length > 0 && (\n                          <Badge className=\"bg-blue-100 text-blue-800 text-xs\">\n                            {analysis.result.improvements.length} melhorias\n                          </Badge>\n                        )}\n                        {analysis.result?.riskLevel && (\n                          <Badge className={`text-xs ${getRiskLevelBg(analysis.result.riskLevel)}`}>\n                            {analysis.result.riskLevel === 'low' && 'Baixo risco'}\n                            {analysis.result.riskLevel === 'medium' && 'Médio risco'}\n                            {analysis.result.riskLevel === 'high' && 'Alto risco'}\n                            {analysis.result.riskLevel === 'critical' && 'Crítico'}\n                          </Badge>\n                        )}\n                      </div>\n                      <Link href={`/analyses/${analysis.id}`}>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-analysis-${analysis.id}`}>\n                          <Eye size={16} />\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n          </>\n        )}\n    </div>\n  );\n}\n","size_bytes":22906},"client/src/pages/landing.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Link } from 'wouter';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQuery } from '@tanstack/react-query';\nimport { Eye, EyeOff, Gavel, Bot, Upload, Shield, CreditCard, Headphones, ChartLine, Check, Play, Rocket } from 'lucide-react';\n\ninterface PlatformStats {\n  totalDocuments: number;\n  analysisAccuracy: number;\n  activeLawyers: number;\n  totalUsers: number;\n  totalCreditsUsed: number;\n  avgAnalysisTime: number;\n}\n\nexport default function Landing() {\n  const { signIn, signUp } = useSupabaseAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [showPassword, setShowPassword] = useState({ login: false, register: false });\n  const [loginForm, setLoginForm] = useState({ email: '', password: '', remember: false });\n  const [registerForm, setRegisterForm] = useState({\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    saveData: false,\n    acceptTerms: false\n  });\n  \n  const { data: platformStats, isLoading: statsLoading } = useQuery<PlatformStats>({\n    queryKey: ['/api/platform-stats'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const { error } = await signIn(loginForm.email, loginForm.password);\n      if (error) {\n        throw error;\n      }\n      setLocation('/dashboard');\n    } catch (error: any) {\n      toast({\n        title: \"Erro no Login\",\n        description: error.message || \"Credenciais inválidas\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!registerForm.acceptTerms) {\n      toast({\n        title: \"Erro no Cadastro\",\n        description: \"Você deve aceitar os termos de uso\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      const { error } = await signUp(registerForm.email, registerForm.password, {\n        firstName: registerForm.firstName,\n        lastName: registerForm.lastName,\n        username: registerForm.username\n      });\n      if (error) {\n        throw error;\n      }\n      toast({\n        title: \"Conta criada com sucesso!\",\n        description: \"Bem-vindo ao JusValida! Você recebeu 10 créditos gratuitos.\",\n        variant: \"default\",\n      });\n      setTimeout(() => setLocation('/dashboard'), 500);\n    } catch (error: any) {\n      toast({\n        title: \"Erro no Cadastro\",\n        description: error.message || \"Erro ao criar conta\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Navigation Header */}\n      <nav className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container flex h-16 items-center justify-between px-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <Gavel className=\"text-primary-foreground\" size={16} />\n              </div>\n              <span className=\"text-xl font-bold text-primary\">JusValida</span>\n            </div>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-features\">Recursos</a>\n            <a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-pricing\">Preços</a>\n            <a href=\"#about\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-about\">Sobre</a>\n            <a href=\"#contact\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">Contato</a>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button variant=\"ghost\" data-testid=\"button-login\">Entrar</Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-login\">\n                <DialogHeader>\n                  <DialogTitle>Entrar na Conta</DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"login-email\">Email</Label>\n                    <Input\n                      id=\"login-email\"\n                      type=\"email\"\n                      placeholder=\"seu@email.com\"\n                      value={loginForm.email}\n                      onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}\n                      data-testid=\"input-login-email\"\n                      required\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"login-password\">Senha</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"login-password\"\n                        type={showPassword.login ? \"text\" : \"password\"}\n                        placeholder=\"••••••••\"\n                        value={loginForm.password}\n                        onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                        data-testid=\"input-login-password\"\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                        onClick={() => setShowPassword({ ...showPassword, login: !showPassword.login })}\n                        data-testid=\"button-toggle-login-password\"\n                      >\n                        {showPassword.login ? <EyeOff size={16} /> : <Eye size={16} />}\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"remember\"\n                        checked={loginForm.remember}\n                        onCheckedChange={(checked) => setLoginForm({ ...loginForm, remember: !!checked })}\n                        data-testid=\"checkbox-remember\"\n                      />\n                      <Label htmlFor=\"remember\" className=\"text-sm\">Lembrar-me</Label>\n                    </div>\n                    <a href=\"#\" className=\"text-sm text-primary hover:underline\" data-testid=\"link-forgot-password\">Esqueceu a senha?</a>\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" data-testid=\"button-submit-login\">\n                    Entrar\n                  </Button>\n                </form>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-register\">Começar Grátis</Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-register\">\n                <DialogHeader>\n                  <DialogTitle>Criar Conta</DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">Nome</Label>\n                      <Input\n                        id=\"firstName\"\n                        placeholder=\"João\"\n                        value={registerForm.firstName}\n                        onChange={(e) => setRegisterForm({ ...registerForm, firstName: e.target.value })}\n                        data-testid=\"input-first-name\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Sobrenome</Label>\n                      <Input\n                        id=\"lastName\"\n                        placeholder=\"Silva\"\n                        value={registerForm.lastName}\n                        onChange={(e) => setRegisterForm({ ...registerForm, lastName: e.target.value })}\n                        data-testid=\"input-last-name\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"username\">Nome de usuário</Label>\n                    <Input\n                      id=\"username\"\n                      placeholder=\"joaosilva\"\n                      value={registerForm.username}\n                      onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                      data-testid=\"input-username\"\n                      required\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"register-email\">Email</Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      placeholder=\"seu@email.com\"\n                      value={registerForm.email}\n                      onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                      data-testid=\"input-register-email\"\n                      required\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"register-password\">Senha</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"register-password\"\n                        type={showPassword.register ? \"text\" : \"password\"}\n                        placeholder=\"••••••••\"\n                        value={registerForm.password}\n                        onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                        data-testid=\"input-register-password\"\n                        required\n                        minLength={8}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                        onClick={() => setShowPassword({ ...showPassword, register: !showPassword.register })}\n                        data-testid=\"button-toggle-register-password\"\n                      >\n                        {showPassword.register ? <EyeOff size={16} /> : <Eye size={16} />}\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Mínimo 8 caracteres com letras e números\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"saveData\"\n                      checked={registerForm.saveData}\n                      onCheckedChange={(checked) => setRegisterForm({ ...registerForm, saveData: !!checked })}\n                      data-testid=\"checkbox-save-data\"\n                    />\n                    <Label htmlFor=\"saveData\" className=\"text-sm\">Salvar dados de login</Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"acceptTerms\"\n                      checked={registerForm.acceptTerms}\n                      onCheckedChange={(checked) => setRegisterForm({ ...registerForm, acceptTerms: !!checked })}\n                      data-testid=\"checkbox-accept-terms\"\n                    />\n                    <Label htmlFor=\"acceptTerms\" className=\"text-sm\">\n                      Aceito os <a href=\"#\" className=\"text-primary hover:underline\">termos de uso</a> e <a href=\"#\" className=\"text-primary hover:underline\">política de privacidade</a>\n                    </Label>\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" data-testid=\"button-submit-register\">\n                    Criar Conta\n                  </Button>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-accent/5 to-secondary/5\"></div>\n        \n        <div className=\"container mx-auto px-4 relative z-10\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <div className=\"animate-float mb-8\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-primary to-accent rounded-2xl flex items-center justify-center mx-auto shadow-xl\">\n                <Bot className=\"text-primary-foreground\" size={32} />\n              </div>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\" data-testid=\"text-hero-title\">\n              Validação Jurídica com IA\n            </h1>\n            \n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"text-hero-description\">\n              Analise contratos, peças e documentos jurídicos com precisão. Nossa IA identifica falhas, \n              brechas e sugere melhorias para seus documentos legais.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <Link href=\"/dashboard\">\n                <Button size=\"lg\" className=\"px-8 py-4 text-lg\" data-testid=\"button-start-now\">\n                  <Rocket className=\"mr-2\" size={20} />\n                  Começar Agora\n                </Button>\n              </Link>\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-4 text-lg\" data-testid=\"button-demo\">\n                <Play className=\"mr-2\" size={20} />\n                Ver Demo\n              </Button>\n            </div>\n            \n            {/* Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-3xl mx-auto\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-stat-documents\">\n                  {statsLoading ? (\n                    <div className=\"animate-pulse bg-primary/20 rounded w-24 h-9 mx-auto\"></div>\n                  ) : (\n                    `${platformStats?.totalDocuments?.toLocaleString() || '0'}+`\n                  )}\n                </div>\n                <div className=\"text-muted-foreground\">Documentos Analisados</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-stat-accuracy\">\n                  {statsLoading ? (\n                    <div className=\"animate-pulse bg-primary/20 rounded w-16 h-9 mx-auto\"></div>\n                  ) : (\n                    `${Math.round(platformStats?.analysisAccuracy || 0)}%`\n                  )}\n                </div>\n                <div className=\"text-muted-foreground\">Precisão na Análise</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-stat-lawyers\">\n                  {statsLoading ? (\n                    <div className=\"animate-pulse bg-primary/20 rounded w-20 h-9 mx-auto\"></div>\n                  ) : (\n                    `${platformStats?.activeLawyers?.toLocaleString() || '0'}+`\n                  )}\n                </div>\n                <div className=\"text-muted-foreground\">Advogados Ativos</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-6\" data-testid=\"text-features-title\">Recursos Avançados</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-features-description\">\n              Plataforma completa para validação e análise de documentos jurídicos\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Feature Cards */}\n            {[\n              {\n                icon: Bot,\n                title: \"IA Multimodal\",\n                description: \"Integração com OpenAI, Google Gemini, Anthropic Claude e outros provedores de IA.\",\n                features: [\"Múltiplos provedores\", \"APIs personalizadas\", \"Comparação de custos\"]\n              },\n              {\n                icon: Upload,\n                title: \"Upload Inteligente\",\n                description: \"Drag & drop para PDFs, DOCs ou cole o texto diretamente na plataforma.\",\n                features: [\"Múltiplos formatos\", \"Validação automática\", \"Preview em tempo real\"]\n              },\n              {\n                icon: Shield,\n                title: \"Análise Completa\",\n                description: \"Detecta falhas, brechas legais e sugere melhorias nos seus documentos.\",\n                features: [\"Detecção de falhas\", \"Análise de riscos\", \"Sugestões de melhoria\"]\n              },\n              {\n                icon: CreditCard,\n                title: \"Sistema de Créditos\",\n                description: \"Pague apenas pelo que usar com nosso sistema flexível de créditos.\",\n                features: [\"Integração Stripe\", \"Planos flexíveis\", \"Histórico detalhado\"]\n              },\n              {\n                icon: Headphones,\n                title: \"Suporte 24/7\",\n                description: \"Sistema completo de tickets para suporte técnico e jurídico.\",\n                features: [\"Chat em tempo real\", \"Base de conhecimento\", \"Suporte especializado\"]\n              },\n              {\n                icon: ChartLine,\n                title: \"Analytics Avançado\",\n                description: \"Dashboard completo com histórico, estatísticas e insights.\",\n                features: [\"Relatórios detalhados\", \"Métricas de uso\", \"Exportação de dados\"]\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"p-8 shadow-lg hover:shadow-xl transition-all\" data-testid={`card-feature-${index}`}>\n                <CardContent className=\"p-0\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center mb-6\">\n                    <feature.icon className=\"text-primary-foreground\" size={24} />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-4\" data-testid={`text-feature-title-${index}`}>{feature.title}</h3>\n                  <p className=\"text-muted-foreground mb-4\" data-testid={`text-feature-description-${index}`}>\n                    {feature.description}\n                  </p>\n                  <ul className=\"text-sm text-muted-foreground space-y-2\">\n                    {feature.features.map((item, itemIndex) => (\n                      <li key={itemIndex} className=\"flex items-center\" data-testid={`text-feature-item-${index}-${itemIndex}`}>\n                        <Check className=\"text-primary mr-2\" size={16} />\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-6\" data-testid=\"text-pricing-title\">Planos e Preços</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-pricing-description\">\n              Escolha o plano ideal para suas necessidades jurídicas\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {/* Free Plan */}\n            <Card className=\"p-8\" data-testid=\"card-plan-free\">\n              <CardContent className=\"p-0\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"text-plan-free-title\">Gratuito</h3>\n                  <div className=\"text-4xl font-bold text-primary mb-2\" data-testid=\"text-plan-free-price\">R$ 0</div>\n                  <div className=\"text-muted-foreground\">por mês</div>\n                </div>\n                \n                <ul className=\"space-y-4 mb-8\">\n                  {[\n                    \"2 validações por dia\",\n                    \"Documentos até 5 páginas\",\n                    \"IA gratuita\",\n                    \"Suporte por email\"\n                  ].map((feature, index) => (\n                    <li key={index} className=\"flex items-center\" data-testid={`text-plan-free-feature-${index}`}>\n                      <Check className=\"text-primary mr-3\" size={16} />\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Link href=\"/register\">\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-plan-free\">\n                    Começar Grátis\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n            \n            {/* Professional Plan */}\n            <Card className=\"p-8 bg-gradient-to-br from-primary to-accent text-primary-foreground relative transform scale-105\" data-testid=\"card-plan-professional\">\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                <span className=\"bg-accent text-accent-foreground px-4 py-1 rounded-full text-sm font-semibold\">\n                  Mais Popular\n                </span>\n              </div>\n              \n              <CardContent className=\"p-0\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"text-plan-pro-title\">Profissional</h3>\n                  <div className=\"text-4xl font-bold mb-2\" data-testid=\"text-plan-pro-price\">R$ 97</div>\n                  <div className=\"opacity-90\">100 créditos</div>\n                </div>\n                \n                <ul className=\"space-y-4 mb-8\">\n                  {[\n                    \"100 validações\",\n                    \"Documentos ilimitados\",\n                    \"Todas as IAs premium\",\n                    \"API keys próprias\",\n                    \"Suporte prioritário\"\n                  ].map((feature, index) => (\n                    <li key={index} className=\"flex items-center\" data-testid={`text-plan-pro-feature-${index}`}>\n                      <Check className=\"mr-3\" size={16} />\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Link href=\"/checkout?plan=professional\">\n                  <Button className=\"w-full bg-white text-primary hover:bg-gray-100\" data-testid=\"button-plan-professional\">\n                    Assinar Agora\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n            \n            {/* Enterprise Plan */}\n            <Card className=\"p-8\" data-testid=\"card-plan-enterprise\">\n              <CardContent className=\"p-0\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"text-plan-enterprise-title\">Empresarial</h3>\n                  <div className=\"text-4xl font-bold text-primary mb-2\" data-testid=\"text-plan-enterprise-price\">R$ 297</div>\n                  <div className=\"text-muted-foreground\">500 créditos</div>\n                </div>\n                \n                <ul className=\"space-y-4 mb-8\">\n                  {[\n                    \"500 validações\",\n                    \"Múltiplos usuários\",\n                    \"Relatórios avançados\",\n                    \"Integração API\",\n                    \"Suporte dedicado\"\n                  ].map((feature, index) => (\n                    <li key={index} className=\"flex items-center\" data-testid={`text-plan-enterprise-feature-${index}`}>\n                      <Check className=\"text-primary mr-3\" size={16} />\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button className=\"w-full\" data-testid=\"button-plan-enterprise\">\n                  Contatar Vendas\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":26117},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { DashboardHeader } from '@/components/layout/dashboard-header';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Eye, EyeOff, Key, Save, Trash2, Plus, CreditCard, AlertTriangle } from 'lucide-react';\n\ninterface AIProviderConfig {\n  id: string;\n  provider: string;\n  apiKey: string;\n  isActive: boolean;\n}\n\ninterface UserProfile {\n  userProfile: {\n    credits: number;\n    stripeMode: 'test' | 'live';\n  };\n}\n\nfunction StripeModeSetting() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Load user profile data including stripe mode\n  const { data: userProfile, isLoading } = useQuery<UserProfile>({\n    queryKey: ['/api/user/profile']\n  });\n\n  const updateStripeModeMutation = useMutation({\n    mutationFn: async (stripeMode: 'test' | 'live') => {\n      const response = await apiRequest('PATCH', '/api/user/stripe-mode', { stripeMode });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Modo Stripe Atualizado\",\n        description: `Agora você está no modo ${data.stripeMode === 'test' ? 'teste' : 'produção'}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/profile'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao atualizar modo Stripe\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const currentMode = userProfile?.userProfile?.stripeMode || 'test';\n  const isLiveMode = currentMode === 'live';\n\n  const handleToggleMode = () => {\n    const newMode = isLiveMode ? 'test' : 'live';\n    updateStripeModeMutation.mutate(newMode);\n  };\n\n  if (isLoading) {\n    return <div>Carregando...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <CreditCard className=\"text-primary\" size={20} />\n          <div>\n            <h3 className=\"font-medium\" data-testid=\"text-stripe-mode-title\">\n              Modo do Stripe\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {isLiveMode ? 'Pagamentos reais ativados' : 'Modo de teste ativado'}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Label htmlFor=\"stripe-mode\" className=\"text-sm font-medium\">\n            {isLiveMode ? 'Produção' : 'Teste'}\n          </Label>\n          <Switch\n            id=\"stripe-mode\"\n            checked={isLiveMode}\n            onCheckedChange={handleToggleMode}\n            disabled={updateStripeModeMutation.isPending}\n            data-testid=\"switch-stripe-mode\"\n          />\n        </div>\n      </div>\n\n      {isLiveMode && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertTriangle className=\"text-red-600 mt-0.5\" size={16} />\n            <div>\n              <h4 className=\"font-medium text-red-900 mb-1\">⚠️ Modo Produção Ativo</h4>\n              <p className=\"text-sm text-red-800\">\n                Você está no modo produção. Todos os pagamentos serão reais e processados através do Stripe live. \n                Certifique-se de que as chaves de produção estão configuradas corretamente.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {!isLiveMode && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <CreditCard className=\"text-blue-600 mt-0.5\" size={16} />\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-1\">🧪 Modo Teste Ativo</h4>\n              <p className=\"text-sm text-blue-800\">\n                Você está no modo teste. Use cartões de teste do Stripe para simular pagamentos sem custos reais. \n                Cartão de teste: 4242 4242 4242 4242 com qualquer data futura.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-yellow-900 mb-2\">💡 Sobre os Modos</h4>\n        <ul className=\"text-sm text-yellow-800 space-y-1\">\n          <li><strong>Teste:</strong> Use para desenvolvimento e testes. Pagamentos simulados.</li>\n          <li><strong>Produção:</strong> Use para processar pagamentos reais de clientes.</li>\n          <li>Você pode alternar entre os modos a qualquer momento.</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default function Profile() {\n  const { user } = useSupabaseAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showApiKeys, setShowApiKeys] = useState<Record<string, boolean>>({});\n  const [newProvider, setNewProvider] = useState({ provider: '', apiKey: '' });\n\n  const { data: aiProviders = [], isLoading } = useQuery<AIProviderConfig[]>({\n    queryKey: ['/api/ai-providers'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/ai-providers');\n      return response.json();\n    }\n  });\n\n  // Load user profile data including credits\n  const { data: userProfile } = useQuery<{userProfile: {credits: number}}>({\n    queryKey: ['/api/user/profile'],\n    enabled: !!user // Only run when user is authenticated\n  });\n\n  const saveProviderMutation = useMutation({\n    mutationFn: async (data: { provider: string; apiKey: string }) => {\n      const response = await apiRequest('POST', '/api/ai-providers', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"API Key Salva\",\n        description: \"Sua chave de API foi salva com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-providers'] });\n      setNewProvider({ provider: '', apiKey: '' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao salvar API key\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteProviderMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/ai-providers/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"API Key Removida\",\n        description: \"Sua chave de API foi removida com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-providers'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao remover API key\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const toggleApiKeyVisibility = (providerId: string) => {\n    setShowApiKeys(prev => ({ ...prev, [providerId]: !prev[providerId] }));\n  };\n\n  const handleSaveProvider = () => {\n    if (!newProvider.provider || !newProvider.apiKey.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Selecione um provedor e insira a chave de API\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    saveProviderMutation.mutate(newProvider);\n  };\n\n  const getProviderIcon = (provider: string) => {\n    switch (provider) {\n      case 'openai': return '🤖';\n      case 'anthropic': return '🧠';\n      case 'gemini': return '✨';\n      case 'openrouter': return '🛤️';\n      default: return '🔧';\n    }\n  };\n\n  const getProviderName = (provider: string) => {\n    switch (provider) {\n      case 'openai': return 'OpenAI';\n      case 'anthropic': return 'Anthropic Claude';\n      case 'gemini': return 'Google Gemini';\n      case 'openrouter': return 'OpenRouter';\n      default: return provider;\n    }\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-profile-title\">\n            Perfil do Usuário\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-profile-description\">\n            Gerencie suas informações pessoais e configurações de IA\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"personal\" className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-3 w-full md:w-auto\">\n            <TabsTrigger value=\"personal\" data-testid=\"tab-personal\">\n              Informações Pessoais\n            </TabsTrigger>\n            <TabsTrigger value=\"ai-keys\" data-testid=\"tab-ai-keys\">\n              Chaves de API\n            </TabsTrigger>\n            <TabsTrigger value=\"payment\" data-testid=\"tab-payment\">\n              Pagamentos\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"personal\">\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-personal-info-title\">Informações Pessoais</CardTitle>\n                <CardDescription>\n                  Visualize suas informações de conta\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"firstName\">Nome</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={user.user_metadata?.first_name || ''}\n                      disabled\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"lastName\">Sobrenome</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={user.user_metadata?.last_name || ''}\n                      disabled\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"username\">Nome de Usuário</Label>\n                    <Input\n                      id=\"username\"\n                      value={user.user_metadata?.username || user.email?.split('@')[0] || ''}\n                      disabled\n                      data-testid=\"input-username\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      value={user.email}\n                      disabled\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"pt-6 border-t\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-lg font-medium\" data-testid=\"text-account-status\">Status da Conta</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Conta ativa com {userProfile?.userProfile?.credits || 0} créditos disponíveis\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-credits-display\">\n                        {userProfile?.userProfile?.credits || 0}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">créditos</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"ai-keys\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle data-testid=\"text-api-keys-title\">Chaves de API Configuradas</CardTitle>\n                  <CardDescription>\n                    Use suas próprias chaves de API para reduzir custos e ter controle total\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4 border border-border rounded-lg\">\n                          <div className=\"w-10 h-10 bg-muted rounded-lg\" />\n                          <div className=\"flex-1\">\n                            <div className=\"h-4 bg-muted rounded w-1/4 mb-2\" />\n                            <div className=\"h-3 bg-muted rounded w-1/2\" />\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : aiProviders.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-api-keys\">\n                      <Key size={48} className=\"mx-auto mb-4 opacity-50\" />\n                      <p>Nenhuma chave de API configurada</p>\n                      <p className=\"text-sm\">Configure suas chaves para usar seus próprios créditos de IA</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {aiProviders.map((provider) => (\n                        <div\n                          key={provider.id}\n                          className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                          data-testid={`card-provider-${provider.provider}`}\n                        >\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center text-lg\">\n                              {getProviderIcon(provider.provider)}\n                            </div>\n                            <div>\n                              <div className=\"font-medium\" data-testid={`text-provider-name-${provider.provider}`}>\n                                {getProviderName(provider.provider)}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground flex items-center space-x-2\">\n                                <span>API Key:</span>\n                                {showApiKeys[provider.id] ? (\n                                  <code className=\"bg-muted px-2 py-1 rounded text-xs\">\n                                    {provider.apiKey}\n                                  </code>\n                                ) : (\n                                  <span>••••••••••••</span>\n                                )}\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => toggleApiKeyVisibility(provider.id)}\n                                  data-testid={`button-toggle-key-${provider.provider}`}\n                                >\n                                  {showApiKeys[provider.id] ? <EyeOff size={14} /> : <Eye size={14} />}\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteProviderMutation.mutate(provider.id)}\n                            disabled={deleteProviderMutation.isPending}\n                            data-testid={`button-delete-${provider.provider}`}\n                          >\n                            <Trash2 size={16} className=\"text-destructive\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle data-testid=\"text-add-api-key-title\">Adicionar Nova Chave de API</CardTitle>\n                  <CardDescription>\n                    Configure uma nova chave de API para usar com seus próprios créditos\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"provider\">Provedor de IA</Label>\n                      <Select value={newProvider.provider} onValueChange={(value) => setNewProvider({ ...newProvider, provider: value })}>\n                        <SelectTrigger data-testid=\"select-provider\">\n                          <SelectValue placeholder=\"Selecione um provedor\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"openai\" data-testid=\"option-openai\">\n                            🤖 OpenAI (GPT-4, GPT-5)\n                          </SelectItem>\n                          <SelectItem value=\"anthropic\" data-testid=\"option-anthropic\">\n                            🧠 Anthropic (Claude)\n                          </SelectItem>\n                          <SelectItem value=\"gemini\" data-testid=\"option-gemini\">\n                            ✨ Google (Gemini)\n                          </SelectItem>\n                          <SelectItem value=\"openrouter\" data-testid=\"option-openrouter\">\n                            🛤️ OpenRouter\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"apiKey\">Chave de API</Label>\n                      <Input\n                        id=\"apiKey\"\n                        type=\"password\"\n                        placeholder=\"sk-...\"\n                        value={newProvider.apiKey}\n                        onChange={(e) => setNewProvider({ ...newProvider, apiKey: e.target.value })}\n                        data-testid=\"input-api-key\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <Button\n                    onClick={handleSaveProvider}\n                    disabled={saveProviderMutation.isPending || !newProvider.provider || !newProvider.apiKey.trim()}\n                    data-testid=\"button-save-api-key\"\n                  >\n                    <Plus className=\"mr-2\" size={16} />\n                    {saveProviderMutation.isPending ? \"Salvando...\" : \"Adicionar Chave\"}\n                  </Button>\n                  \n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">💡 Dica de Economia</h4>\n                    <p className=\"text-sm text-blue-800\">\n                      Ao usar suas próprias chaves de API, você paga diretamente aos provedores de IA (OpenAI, Anthropic, etc.) \n                      e economiza nos custos de análise. As tarifas são geralmente muito mais baixas do que usar nossos créditos.\n                    </p>\n                  </div>\n                  \n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-yellow-900 mb-2\">🔒 Segurança</h4>\n                    <p className=\"text-sm text-yellow-800\">\n                      Suas chaves de API são criptografadas e armazenadas com segurança. Elas só são usadas para fazer \n                      requisições de análise quando você escolher o provedor correspondente.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"payment\">\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-payment-settings-title\">Configurações de Pagamento</CardTitle>\n                <CardDescription>\n                  Configure o modo do Stripe para testes ou pagamentos reais\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <StripeModeSetting />\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21288},"client/src/pages/support.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { DashboardHeader } from '@/components/layout/dashboard-header';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { MessageSquare, Plus, Clock, CheckCircle, AlertCircle, HelpCircle, Send, Eye } from 'lucide-react';\n\ninterface SupportTicket {\n  id: string;\n  subject: string;\n  message: string;\n  status: 'open' | 'pending' | 'resolved' | 'closed';\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TicketMessage {\n  id: string;\n  ticketId: string;\n  userId?: string;\n  message: string;\n  isFromSupport: boolean;\n  createdAt: string;\n}\n\ninterface TicketDetails {\n  ticket: SupportTicket;\n  messages: TicketMessage[];\n}\n\nexport default function Support() {\n  const { user } = useSupabaseAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedTicketId, setSelectedTicketId] = useState<string | null>(null);\n  const [newTicket, setNewTicket] = useState({\n    subject: '',\n    message: '',\n    priority: 'normal'\n  });\n  const [newMessage, setNewMessage] = useState('');\n\n  const { data: tickets = [], isLoading: ticketsLoading } = useQuery<SupportTicket[]>({\n    queryKey: ['/api/support/tickets'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/support/tickets');\n      return response.json();\n    }\n  });\n\n  const { data: ticketDetails, isLoading: detailsLoading } = useQuery<TicketDetails>({\n    queryKey: ['/api/support/tickets', selectedTicketId],\n    queryFn: async () => {\n      if (!selectedTicketId) return null;\n      const response = await apiRequest('GET', `/api/support/tickets/${selectedTicketId}`);\n      return response.json();\n    },\n    enabled: !!selectedTicketId\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/support/tickets', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ticket Criado\",\n        description: \"Seu ticket de suporte foi criado com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/support/tickets'] });\n      setIsCreateDialogOpen(false);\n      setNewTicket({ subject: '', message: '', priority: 'normal' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao criar ticket\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ ticketId, message }: { ticketId: string; message: string }) => {\n      const response = await apiRequest('POST', `/api/support/tickets/${ticketId}/messages`, { message, isFromSupport: false });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Mensagem Enviada\",\n        description: \"Sua mensagem foi enviada com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/support/tickets', selectedTicketId] });\n      setNewMessage('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao enviar mensagem\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleCreateTicket = () => {\n    if (!newTicket.subject.trim() || !newTicket.message.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha o assunto e a mensagem\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createTicketMutation.mutate(newTicket);\n  };\n\n  const handleSendMessage = () => {\n    if (!selectedTicketId || !newMessage.trim()) return;\n    sendMessageMutation.mutate({ ticketId: selectedTicketId, message: newMessage });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <AlertCircle className=\"text-blue-600\" size={16} />;\n      case 'pending': return <Clock className=\"text-yellow-600\" size={16} />;\n      case 'resolved': return <CheckCircle className=\"text-green-600\" size={16} />;\n      case 'closed': return <CheckCircle className=\"text-gray-600\" size={16} />;\n      default: return <HelpCircle size={16} />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'bg-blue-100 text-blue-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'resolved': return 'bg-green-100 text-green-800';\n      case 'closed': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'low': return 'bg-gray-100 text-gray-800';\n      case 'normal': return 'bg-blue-100 text-blue-800';\n      case 'high': return 'bg-orange-100 text-orange-800';\n      case 'urgent': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'open': return 'Aberto';\n      case 'pending': return 'Pendente';\n      case 'resolved': return 'Resolvido';\n      case 'closed': return 'Fechado';\n      default: return status;\n    }\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    switch (priority) {\n      case 'low': return 'Baixa';\n      case 'normal': return 'Normal';\n      case 'high': return 'Alta';\n      case 'urgent': return 'Urgente';\n      default: return priority;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-support-title\">\n                Suporte\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-support-description\">\n                Obtenha ajuda e suporte técnico para o JusValida\n              </p>\n            </div>\n            \n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-ticket\">\n                  <Plus className=\"mr-2\" size={16} />\n                  Novo Ticket\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-create-ticket\">\n                <DialogHeader>\n                  <DialogTitle>Criar Novo Ticket</DialogTitle>\n                  <DialogDescription>\n                    Descreva seu problema ou dúvida em detalhes\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"subject\">Assunto</Label>\n                    <Input\n                      id=\"subject\"\n                      placeholder=\"Descreva brevemente o problema\"\n                      value={newTicket.subject}\n                      onChange={(e) => setNewTicket({ ...newTicket, subject: e.target.value })}\n                      data-testid=\"input-ticket-subject\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"priority\">Prioridade</Label>\n                    <Select value={newTicket.priority} onValueChange={(value) => setNewTicket({ ...newTicket, priority: value })}>\n                      <SelectTrigger data-testid=\"select-priority\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Baixa</SelectItem>\n                        <SelectItem value=\"normal\">Normal</SelectItem>\n                        <SelectItem value=\"high\">Alta</SelectItem>\n                        <SelectItem value=\"urgent\">Urgente</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"message\">Mensagem</Label>\n                    <Textarea\n                      id=\"message\"\n                      placeholder=\"Descreva seu problema em detalhes...\"\n                      value={newTicket.message}\n                      onChange={(e) => setNewTicket({ ...newTicket, message: e.target.value })}\n                      className=\"min-h-32\"\n                      data-testid=\"textarea-ticket-message\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)} data-testid=\"button-cancel-ticket\">\n                      Cancelar\n                    </Button>\n                    <Button \n                      onClick={handleCreateTicket} \n                      disabled={createTicketMutation.isPending}\n                      data-testid=\"button-submit-ticket\"\n                    >\n                      {createTicketMutation.isPending ? \"Criando...\" : \"Criar Ticket\"}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Tickets List */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\" data-testid=\"text-tickets-title\">\n                  <MessageSquare className=\"mr-2\" size={20} />\n                  Meus Tickets\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {ticketsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse p-4 border border-border rounded-lg\">\n                        <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n                        <div className=\"h-3 bg-muted rounded w-1/2\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : tickets.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-tickets\">\n                    <MessageSquare size={48} className=\"mx-auto mb-4 opacity-50\" />\n                    <p>Nenhum ticket encontrado</p>\n                    <p className=\"text-sm\">Crie seu primeiro ticket de suporte</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {tickets.map((ticket) => (\n                      <div\n                        key={ticket.id}\n                        className={`p-4 border rounded-lg cursor-pointer transition-colors hover:bg-accent/5 ${\n                          selectedTicketId === ticket.id ? 'border-primary bg-primary/5' : 'border-border'\n                        }`}\n                        onClick={() => setSelectedTicketId(ticket.id)}\n                        data-testid={`card-ticket-${ticket.id}`}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <h4 className=\"font-medium text-sm line-clamp-2\" data-testid={`text-ticket-subject-${ticket.id}`}>\n                            {ticket.subject}\n                          </h4>\n                          <div className=\"flex items-center space-x-1 ml-2\">\n                            {getStatusIcon(ticket.status)}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={`text-xs ${getStatusColor(ticket.status)}`}>\n                              {getStatusLabel(ticket.status)}\n                            </Badge>\n                            <Badge className={`text-xs ${getPriorityColor(ticket.priority)}`}>\n                              {getPriorityLabel(ticket.priority)}\n                            </Badge>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\" data-testid={`text-ticket-date-${ticket.id}`}>\n                            {formatDate(ticket.createdAt)}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Ticket Details */}\n          <div className=\"lg:col-span-2\">\n            {selectedTicketId ? (\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\" data-testid=\"text-ticket-details-subject\">\n                        {ticketDetails?.ticket.subject}\n                      </CardTitle>\n                      <CardDescription className=\"flex items-center space-x-4 mt-2\">\n                        <span>Criado em {ticketDetails?.ticket.createdAt && formatDate(ticketDetails.ticket.createdAt)}</span>\n                        <Badge className={`${getStatusColor(ticketDetails?.ticket.status || '')}`}>\n                          {getStatusLabel(ticketDetails?.ticket.status || '')}\n                        </Badge>\n                        <Badge className={`${getPriorityColor(ticketDetails?.ticket.priority || '')}`}>\n                          {getPriorityLabel(ticketDetails?.ticket.priority || '')}\n                        </Badge>\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {detailsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse p-4 bg-muted/20 rounded-lg\">\n                          <div className=\"h-3 bg-muted rounded w-1/4 mb-2\" />\n                          <div className=\"h-4 bg-muted rounded w-full\" />\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {/* Messages */}\n                      <div className=\"space-y-4 max-h-96 overflow-y-auto\" data-testid=\"messages-container\">\n                        {ticketDetails?.messages.map((message) => (\n                          <div\n                            key={message.id}\n                            className={`p-4 rounded-lg ${\n                              message.isFromSupport\n                                ? 'bg-blue-50 border-l-4 border-blue-500'\n                                : 'bg-gray-50 border-l-4 border-gray-300'\n                            }`}\n                            data-testid={`message-${message.id}`}\n                          >\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <span className=\"text-sm font-medium\">\n                                {message.isFromSupport ? '🎧 Suporte JusValida' : '👤 Você'}\n                              </span>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {formatDate(message.createdAt)}\n                              </span>\n                            </div>\n                            <p className=\"text-sm whitespace-pre-wrap\" data-testid={`text-message-content-${message.id}`}>\n                              {message.message}\n                            </p>\n                          </div>\n                        ))}\n                      </div>\n\n                      {/* Reply Form */}\n                      {ticketDetails?.ticket.status !== 'closed' && (\n                        <div className=\"border-t pt-4\">\n                          <Label htmlFor=\"reply\">Sua Resposta</Label>\n                          <div className=\"flex space-x-2 mt-2\">\n                            <Textarea\n                              id=\"reply\"\n                              placeholder=\"Digite sua mensagem...\"\n                              value={newMessage}\n                              onChange={(e) => setNewMessage(e.target.value)}\n                              className=\"flex-1\"\n                              data-testid=\"textarea-reply\"\n                            />\n                            <Button\n                              onClick={handleSendMessage}\n                              disabled={sendMessageMutation.isPending || !newMessage.trim()}\n                              className=\"self-end\"\n                              data-testid=\"button-send-message\"\n                            >\n                              {sendMessageMutation.isPending ? (\n                                \"Enviando...\"\n                              ) : (\n                                <>\n                                  <Send size={16} />\n                                </>\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"flex items-center justify-center py-16\">\n                  <div className=\"text-center text-muted-foreground\" data-testid=\"text-select-ticket\">\n                    <Eye size={48} className=\"mx-auto mb-4 opacity-50\" />\n                    <p>Selecione um ticket para ver os detalhes</p>\n                    <p className=\"text-sm\">Ou crie um novo ticket de suporte</p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Help Section */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\" data-testid=\"text-help-title\">\n              <HelpCircle className=\"mr-2\" size={20} />\n              Perguntas Frequentes\n            </CardTitle>\n            <CardDescription>\n              Encontre respostas rápidas para dúvidas comuns\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Como funciona o sistema de créditos?</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Cada análise consome créditos baseado no provedor de IA escolhido. OpenAI GPT-5 usa 3 créditos, \n                    Claude 3 créditos, Gemini 1 crédito, e IA gratuita não consome créditos.\n                  </p>\n                </div>\n                \n                <div className=\"p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Posso usar minha própria API key?</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Sim! Configure suas chaves de API na página de Perfil para usar seus próprios créditos \n                    diretamente com os provedores de IA, economizando nos custos.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Quais tipos de documento posso analisar?</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Suportamos PDF, DOC, DOCX e texto direto. Você pode analisar contratos, petições, \n                    acordos, e outros documentos jurídicos.\n                  </p>\n                </div>\n                \n                <div className=\"p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Como funciona o plano gratuito?</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    O plano gratuito inclui 5 créditos iniciais e permite 2 análises diárias usando \n                    nossa IA gratuita, com limite de 5 páginas por documento.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21842},"client/src/components/layout/dashboard-header.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { useUser } from '@/hooks/use-user';\nimport { Gavel, Coins, ChevronDown, User, CreditCard, Headphones, LogOut, Settings, Trash2 } from 'lucide-react';\n\nexport function DashboardHeader() {\n  const { user, supabaseUser, signOut, isAdmin, isSupport } = useUser();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    await signOut();\n    setLocation('/');\n  };\n\n  if (!user) return null;\n\n  const userInitials = `${user?.firstName?.[0] || ''}${user?.lastName?.[0] || ''}`.toUpperCase();\n\n  return (\n    <div className=\"bg-card border-b border-border\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/dashboard\">\n            <a className=\"flex items-center space-x-2\" data-testid=\"link-dashboard-home\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <Gavel className=\"text-primary-foreground\" size={16} />\n              </div>\n              <span className=\"text-xl font-bold text-primary\">JusValida</span>\n            </a>\n          </Link>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* TODO: Need to implement credits system with Supabase */}\n            {/* <div className=\"flex items-center space-x-2 bg-primary/10 px-3 py-2 rounded-lg\">\n              <Coins className=\"text-primary\" size={16} />\n              <span className=\"font-medium\" data-testid=\"text-user-credits\">\n                {user?.credits || 0} créditos\n              </span>\n            </div> */}\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n                    <span className=\"text-primary-foreground text-sm font-semibold\">\n                      {userInitials}\n                    </span>\n                  </div>\n                  <span data-testid=\"text-user-name\">{user?.firstName} {user?.lastName}</span>\n                  <ChevronDown size={16} />\n                </Button>\n              </DropdownMenuTrigger>\n              \n              <DropdownMenuContent align=\"end\" className=\"w-48\" data-testid=\"menu-user-dropdown\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\">\n                    <a className=\"flex items-center\" data-testid=\"link-profile\">\n                      <User className=\"mr-2\" size={16} />\n                      Perfil\n                    </a>\n                  </Link>\n                </DropdownMenuItem>\n                \n                <DropdownMenuItem asChild>\n                  <Link href=\"/billing\">\n                    <a className=\"flex items-center\" data-testid=\"link-billing\">\n                      <CreditCard className=\"mr-2\" size={16} />\n                      Financeiro\n                    </a>\n                  </Link>\n                </DropdownMenuItem>\n                \n                <DropdownMenuItem asChild>\n                  <Link href=\"/support\">\n                    <a className=\"flex items-center\" data-testid=\"link-support\">\n                      <Headphones className=\"mr-2\" size={16} />\n                      Suporte\n                    </a>\n                  </Link>\n                </DropdownMenuItem>\n                \n                <DropdownMenuItem asChild>\n                  <Link href=\"/trash\">\n                    <a className=\"flex items-center\" data-testid=\"link-trash\">\n                      <Trash2 className=\"mr-2\" size={16} />\n                      Lixeira\n                    </a>\n                  </Link>\n                </DropdownMenuItem>\n                \n                {(isAdmin || isSupport) && (\n                  <>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin\">\n                        <a className=\"flex items-center\" data-testid=\"link-admin\">\n                          <Settings className=\"mr-2\" size={16} />\n                          Administração\n                        </a>\n                      </Link>\n                    </DropdownMenuItem>\n                  </>\n                )}\n                \n                <DropdownMenuSeparator />\n                \n                <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                  <LogOut className=\"mr-2\" size={16} />\n                  Sair\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5088},"client/src/components/layout/navbar.tsx":{"content":"import { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Gavel } from 'lucide-react';\n\nexport function Navbar() {\n  return (\n    <nav className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"w-full flex h-16 items-center relative px-4\">\n        {/* Logo à esquerda absoluta */}\n        <Link href=\"/\" className=\"flex items-center space-x-2 absolute left-4\" data-testid=\"link-home\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n            <Gavel className=\"text-primary-foreground\" size={16} />\n          </div>\n          <span className=\"text-xl font-bold text-primary\">JusValida</span>\n        </Link>\n        \n        {/* Menu centralizado na tela inteira */}\n        <div className=\"hidden md:flex items-center space-x-8 absolute left-1/2 transform -translate-x-1/2\">\n          <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors font-medium\" data-testid=\"link-features\">\n            Recursos\n          </a>\n          <a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors font-medium\" data-testid=\"link-pricing\">\n            Preços\n          </a>\n          <a href=\"#about\" className=\"text-muted-foreground hover:text-foreground transition-colors font-medium\" data-testid=\"link-about\">\n            Sobre\n          </a>\n          <Link href=\"/contact\" className=\"text-muted-foreground hover:text-foreground transition-colors font-medium\" data-testid=\"link-contact\">\n            Contato\n          </Link>\n        </div>\n        \n        {/* Botões à direita absoluta */}\n        <div className=\"flex items-center space-x-3 absolute right-4\">\n          <Link href=\"/login\">\n            <Button variant=\"ghost\" data-testid=\"button-login\">Entrar</Button>\n          </Link>\n          <Link href=\"/register\">\n            <Button data-testid=\"button-register\">Começar Grátis</Button>\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2138},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/ai-provider-selector.tsx":{"content":"import { Card, CardContent } from './card';\nimport { Button } from './button';\nimport { Badge } from './badge';\nimport { Check } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { getIconComponent } from '@/lib/iconMapping';\nimport { useQuery } from '@tanstack/react-query';\nimport type { AiProviderConfig } from '@shared/schema';\n\ninterface AIProviderSelectorProps {\n  selectedProvider: string;\n  onProviderChange: (providerId: string) => void;\n  userCredits: number;\n  className?: string;\n}\n\nexport function AIProviderSelector({ \n  selectedProvider, \n  onProviderChange, \n  userCredits,\n  className \n}: AIProviderSelectorProps) {\n  const { data: aiProviders = [], isLoading } = useQuery<AiProviderConfig[]>({\n    queryKey: ['/api/ai-provider-configs'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-4\", className)}>\n        <h3 className=\"text-sm font-medium mb-3\" data-testid=\"text-provider-title\">\n          Provedor de IA\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div>\n        <h3 className=\"text-sm font-medium mb-3\" data-testid=\"text-provider-title\">\n          Provedor de IA\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {aiProviders.map((provider) => {\n            const isSelected = selectedProvider === provider.providerId;\n            const canAfford = userCredits >= provider.credits;\n            const isDisabled = !canAfford && !provider.isFree;\n            const IconComponent = getIconComponent(provider.iconName);\n\n            return (\n              <Card\n                key={provider.providerId}\n                className={cn(\n                  \"cursor-pointer transition-all relative\",\n                  isSelected \n                    ? \"border-2 border-primary bg-primary/5\" \n                    : \"border border-border hover:border-primary\",\n                  isDisabled && \"opacity-50 cursor-not-allowed\"\n                )}\n                onClick={() => !isDisabled && onProviderChange(provider.providerId)}\n                data-testid={`card-provider-${provider.providerId}`}\n              >\n                {provider.isPopular && (\n                  <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-primary-foreground\" data-testid=\"badge-popular\">\n                      Popular\n                    </Badge>\n                  </div>\n                )}\n                \n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={cn(\n                      \"w-8 h-8 rounded-lg flex items-center justify-center\",\n                      provider.isFree \n                        ? \"bg-green-500\" \n                        : isSelected \n                          ? \"bg-primary\" \n                          : \"bg-accent\"\n                    )}>\n                      <IconComponent \n                        className={cn(\n                          provider.isFree || isSelected \n                            ? \"text-white\" \n                            : \"text-accent-foreground\"\n                        )} \n                        size={16} \n                      />\n                    </div>\n                    {isSelected && (\n                      <Check className=\"text-primary\" size={16} data-testid=\"icon-selected\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"text-sm font-semibold mb-1\" data-testid={`text-provider-name-${provider.providerId}`}>\n                    {provider.name} {provider.model}\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground mb-2\" data-testid={`text-provider-description-${provider.providerId}`}>\n                    {provider.description}\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className={cn(\n                      \"text-xs font-medium\",\n                      provider.isFree ? \"text-green-600\" : \"text-muted-foreground\"\n                    )} data-testid={`text-provider-credits-${provider.providerId}`}>\n                      {provider.credits === 0 ? \"Gratuito\" : `${provider.credits} créditos`}\n                    </span>\n                    \n                    {!canAfford && !provider.isFree && (\n                      <Badge variant=\"destructive\" className=\"text-xs\" data-testid=\"badge-insufficient-credits\">\n                        Insuficiente\n                      </Badge>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n      \n      {userCredits < 3 && (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n          <div className=\"text-sm text-yellow-800\" data-testid=\"text-low-credits-warning\">\n            <strong>Créditos baixos:</strong> Você tem apenas {userCredits} créditos restantes. \n            Considere <a href=\"/checkout\" className=\"underline font-medium\">comprar mais créditos</a> para acessar todos os provedores.\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5844},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Button } from './button';\nimport { Card } from './card';\nimport { CloudUpload, File, X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  onFileRemove: () => void;\n  selectedFile?: File;\n  accept?: string[];\n  maxSize?: number;\n  className?: string;\n}\n\nexport function FileUpload({ \n  onFileSelect, \n  onFileRemove, \n  selectedFile, \n  accept = ['.pdf', '.doc', '.docx', '.txt'],\n  maxSize = 10 * 1024 * 1024, // 10MB\n  className \n}: FileUploadProps) {\n  const [error, setError] = useState<string | null>(null);\n\n  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: any[]) => {\n    setError(null);\n    \n    if (rejectedFiles.length > 0) {\n      const rejection = rejectedFiles[0];\n      if (rejection.errors[0]?.code === 'file-too-large') {\n        setError('Arquivo muito grande. Tamanho máximo: 10MB');\n      } else if (rejection.errors[0]?.code === 'file-invalid-type') {\n        setError('Tipo de arquivo não suportado');\n      } else {\n        setError('Erro no upload do arquivo');\n      }\n      return;\n    }\n\n    if (acceptedFiles.length > 0) {\n      onFileSelect(acceptedFiles[0]);\n    }\n  }, [onFileSelect]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'text/plain': ['.txt']\n    },\n    maxSize,\n    multiple: false\n  });\n\n  if (selectedFile) {\n    return (\n      <Card className={cn(\"p-6\", className)} data-testid=\"card-selected-file\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <File className=\"text-primary\" size={20} />\n            </div>\n            <div>\n              <div className=\"font-medium\" data-testid=\"text-file-name\">{selectedFile.name}</div>\n              <div className=\"text-sm text-muted-foreground\" data-testid=\"text-file-size\">\n                {(selectedFile.size / 1024 / 1024).toFixed(2)} MB\n              </div>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onFileRemove}\n            data-testid=\"button-remove-file\"\n          >\n            <X size={16} />\n          </Button>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <Card\n        {...getRootProps()}\n        className={cn(\n          \"border-2 border-dashed p-12 text-center cursor-pointer transition-colors\",\n          isDragActive \n            ? \"border-primary bg-primary/5\" \n            : \"border-border hover:border-primary hover:bg-accent/5\",\n          error && \"border-destructive\"\n        )}\n        data-testid=\"card-file-upload\"\n      >\n        <input {...getInputProps()} data-testid=\"input-file\" />\n        \n        <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <CloudUpload className=\"text-primary\" size={32} />\n        </div>\n        \n        {isDragActive ? (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-drop-here\">\n              Solte o arquivo aqui\n            </h3>\n            <p className=\"text-muted-foreground\">O arquivo será carregado automaticamente</p>\n          </div>\n        ) : (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-upload-title\">\n              Arraste seu arquivo aqui\n            </h3>\n            <p className=\"text-muted-foreground mb-4\" data-testid=\"text-upload-description\">\n              ou clique para selecionar\n            </p>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-file-requirements\">\n              {accept.join(', ')} até {maxSize / 1024 / 1024}MB\n            </p>\n          </div>\n        )}\n      </Card>\n      \n      {error && (\n        <p className=\"text-sm text-destructive mt-2\" data-testid=\"text-upload-error\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n","size_bytes":4336},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/analyses.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useEffect } from 'react';\nimport { DashboardHeader } from '@/components/layout/dashboard-header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { apiRequest } from '@/lib/queryClient';\nimport { FileText, AlertTriangle, Clock, CheckCircle, Eye, Coins } from 'lucide-react';\nimport { Link, useLocation } from 'wouter';\n\ninterface AnalysisResult {\n  summary: string;\n  criticalFlaws: string[];\n  warnings: string[];\n  improvements: string[];\n  legalCompliance: {\n    score: number;\n    issues: string[];\n  };\n  recommendations: string[];\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface DocumentAnalysis {\n  id: string;\n  title: string;\n  content: string;\n  aiProvider: string;\n  aiModel: string;\n  analysisType: string;\n  result: AnalysisResult;\n  creditsUsed: number;\n  status: string;\n  createdAt: string;\n}\n\nexport default function Analyses() {\n  const { user } = useSupabaseAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!user) {\n      setLocation('/login');\n    }\n  }, [user, setLocation]);\n\n  if (!user) {\n    return null;\n  }\n\n  const { data: analyses = [], isLoading } = useQuery<DocumentAnalysis[]>({\n    queryKey: ['/api/analyses'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/analyses');\n      return response.json();\n    }\n  });\n\n  const getRiskBadgeColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';\n      case 'critical':\n        return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-page-title\">\n              Todas as Análises\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Histórico completo das suas análises de documentos jurídicos\n            </p>\n          </div>\n          <Link href=\"/dashboard\">\n            <Button variant=\"outline\" data-testid=\"button-back-dashboard\">\n              Voltar ao Dashboard\n            </Button>\n          </Link>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-muted rounded\"></div>\n                    <div className=\"h-3 bg-muted rounded w-5/6\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : analyses.length === 0 ? (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <FileText className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Nenhuma análise encontrada</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Você ainda não fez nenhuma análise de documento. Comece agora!\n              </p>\n              <Link href=\"/dashboard\">\n                <Button data-testid=\"button-start-analysis\">\n                  Fazer Primeira Análise\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {analyses.map((analysis) => (\n              <Card key={analysis.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-analysis-${analysis.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg mb-1 line-clamp-2\" data-testid={`text-analysis-title-${analysis.id}`}>\n                        {analysis.title}\n                      </CardTitle>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <Clock size={14} />\n                        <span>{new Date(analysis.createdAt).toLocaleDateString('pt-BR')}</span>\n                      </div>\n                    </div>\n                    <Badge \n                      className={getRiskBadgeColor(analysis.result.riskLevel)} \n                      data-testid={`badge-risk-${analysis.id}`}\n                    >\n                      {analysis.result.riskLevel}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-1\">Resumo</p>\n                      <p className=\"text-sm line-clamp-2\" data-testid={`text-summary-${analysis.id}`}>\n                        {analysis.result.summary}\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-muted-foreground\">Provedor:</span>\n                        <span className=\"font-medium\">{analysis.aiProvider}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Coins className=\"h-4 w-4 text-primary\" />\n                        <span className=\"text-sm text-muted-foreground\">{analysis.creditsUsed}</span>\n                      </div>\n                    </div>\n\n                    {analysis.result.criticalFlaws.length > 0 && (\n                      <div className=\"flex items-center gap-2 text-sm text-red-600 dark:text-red-400\">\n                        <AlertTriangle size={14} />\n                        <span>{analysis.result.criticalFlaws.length} falha(s) crítica(s)</span>\n                      </div>\n                    )}\n\n                    <div className=\"flex items-center justify-between pt-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"flex items-center gap-1\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                          <span className=\"text-xs text-muted-foreground\">\n                            Score: {analysis.result.legalCompliance.score}%\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <Link href={`/analyses/${analysis.id}`}>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          data-testid={`button-view-analysis-${analysis.id}`}\n                        >\n                          <Eye size={14} className=\"mr-1\" />\n                          Ver Detalhes\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8231},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useUser } from \"@/hooks/use-user\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { DashboardHeader } from \"@/components/layout/dashboard-header\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  Users,\n  Activity,\n  TrendingUp,\n  Zap,\n  DollarSign,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  Settings,\n  Mail,\n  Bell,\n  Plus,\n  Edit2,\n  Trash2,\n  TestTube,\n  CreditCard,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport {\n  insertSiteConfigSchema,\n  insertSmtpConfigSchema,\n  insertAdminNotificationSchema,\n  insertStripeConfigSchema,\n  type SiteConfig,\n  type SmtpConfig,\n  type AdminNotification,\n  type StripeConfig,\n  type InsertSiteConfig,\n  type InsertSmtpConfig,\n  type InsertAdminNotification,\n  type InsertStripeConfig,\n} from \"@shared/schema\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  role: \"user\" | \"admin\" | \"support\";\n  credits: number;\n  stripeCustomerId?: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface UserListResponse {\n  users: User[];\n  total: number;\n}\n\ninterface PlatformAnalytics {\n  totalUsers: number;\n  totalAnalyses: number;\n  totalCreditsUsed: number;\n  totalCreditsPurchased: number;\n  totalRevenue: number;\n  userGrowth: Array<{ date: string; count: number }>;\n  analysisGrowth: Array<{ date: string; count: number }>;\n  supportTicketsStats: {\n    open: number;\n    pending: number;\n    resolved: number;\n    closed: number;\n  };\n}\n\ninterface AiUsageAnalytics {\n  providerUsage: Array<{\n    provider: string;\n    model: string;\n    count: number;\n    totalCredits: number;\n  }>;\n  analysisTypes: Array<{ type: string; count: number }>;\n  errorRates: Array<{ provider: string; model: string; successRate: number }>;\n}\n\ninterface FinancialDetails {\n  dailyTransactions: Array<{\n    date: string;\n    type: string;\n    amount: number;\n    count: number;\n  }>;\n  packagePopularity: Array<{ name: string; sales: number }>;\n  userStatistics: {\n    totalUsers: number;\n    averageCredits: number;\n    maxCredits: number;\n    usersWithCredits: number;\n  };\n  recentTransactions: Array<{\n    id: string;\n    userId: string;\n    type: string;\n    amount: number;\n    description: string;\n    createdAt: string;\n    userEmail: string;\n    userName: string;\n  }>;\n  totalPackages: number;\n  activePackages: number;\n}\n\ninterface SystemApiKey {\n  id: string;\n  provider: string;\n  maskedApiKey: string; // SECURITY: Never expose full API keys to frontend\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface SystemApiKeysResponse {\n  providers: SystemApiKey[];\n  status: Array<{\n    provider: string;\n    configured: boolean;\n    isActive: boolean;\n    id: string | null;\n    maskedApiKey: string; // SECURITY: Only masked keys in frontend\n    createdAt: string | null;\n    updatedAt: string | null;\n  }>;\n}\n\ninterface ApiTestResult {\n  success: boolean;\n  message: string;\n  provider: string;\n}\n\ninterface CreditTrends {\n  creditTrends: Array<{\n    date: string;\n    purchases: number;\n    usage: number;\n    net: number;\n  }>;\n  topSpenders: Array<{\n    userId: string;\n    userEmail: string;\n    userName: string;\n    totalSpent: number;\n    totalPurchased: number;\n    transactionCount: number;\n  }>;\n  hourlyUsage: Array<{ hour: number; transactions: number; credits: number }>;\n  period: { days: number; startDate: string; endDate: string };\n}\n\n// Site Config Form Component\nfunction SiteConfigForm({ \n  configs, \n  onSave, \n  onUpdate, \n  isLoading \n}: {\n  configs: SiteConfig[];\n  onSave: (data: InsertSiteConfig) => void;\n  onUpdate: ({ id, data }: { id: string; data: Partial<InsertSiteConfig> }) => void;\n  isLoading: boolean;\n}) {\n  const form = useForm<InsertSiteConfig>({\n    resolver: zodResolver(insertSiteConfigSchema),\n    defaultValues: {\n      section: \"footer\",\n      key: \"\",\n      value: \"\",\n      dataType: \"string\",\n      isActive: true,\n    },\n  });\n\n  // Get specific config values\n  const getConfigValue = (section: string, key: string) => {\n    return configs.find(c => c.section === section && c.key === key)?.value || \"\";\n  };\n\n  const updateConfig = (section: string, key: string, value: string) => {\n    const existingConfig = configs.find(c => c.section === section && c.key === key);\n    \n    if (existingConfig) {\n      onUpdate({ id: existingConfig.id, data: { value } });\n    } else {\n      onSave({ section, key, value, dataType: \"string\", isActive: true });\n    }\n  };\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2\">\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Informações da Empresa</h3>\n        \n        <div className=\"space-y-2\">\n          <Label htmlFor=\"siteName\">Nome do Site</Label>\n          <Input\n            id=\"siteName\"\n            placeholder=\"JusValida\"\n            defaultValue={getConfigValue(\"company\", \"siteName\")}\n            onBlur={(e) => updateConfig(\"company\", \"siteName\", e.target.value)}\n            data-testid=\"input-site-name\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"contactEmail\">E-mail de Contato</Label>\n          <Input\n            id=\"contactEmail\"\n            type=\"email\"\n            placeholder=\"contato@jusvalida.com\"\n            defaultValue={getConfigValue(\"contact\", \"contactEmail\")}\n            onBlur={(e) => updateConfig(\"contact\", \"contactEmail\", e.target.value)}\n            data-testid=\"input-contact-email\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"contactPhone\">Telefone de Contato</Label>\n          <Input\n            id=\"contactPhone\"\n            placeholder=\"(11) 99999-9999\"\n            defaultValue={getConfigValue(\"contact\", \"contactPhone\")}\n            onBlur={(e) => updateConfig(\"contact\", \"contactPhone\", e.target.value)}\n            data-testid=\"input-contact-phone\"\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Endereço da Empresa</h3>\n        \n        <div className=\"space-y-2\">\n          <Label htmlFor=\"companyAddress\">Endereço Completo</Label>\n          <Textarea\n            id=\"companyAddress\"\n            placeholder=\"Rua dos Advogados, 123 - Centro, São Paulo - SP\"\n            defaultValue={getConfigValue(\"company\", \"companyAddress\")}\n            onBlur={(e) => updateConfig(\"company\", \"companyAddress\", e.target.value)}\n            data-testid=\"textarea-company-address\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"footerText\">Texto do Rodapé</Label>\n          <Textarea\n            id=\"footerText\"\n            placeholder=\"© 2024 JusValida. Todos os direitos reservados.\"\n            defaultValue={getConfigValue(\"footer\", \"footerText\")}\n            onBlur={(e) => updateConfig(\"footer\", \"footerText\", e.target.value)}\n            data-testid=\"textarea-footer-text\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"socialLinks\">Links das Redes Sociais (JSON)</Label>\n          <Textarea\n            id=\"socialLinks\"\n            placeholder='{\"facebook\": \"https://facebook.com/...\", \"linkedin\": \"https://linkedin.com/...\"}'\n            defaultValue={getConfigValue(\"social\", \"socialLinks\")}\n            onBlur={(e) => updateConfig(\"social\", \"socialLinks\", e.target.value)}\n            data-testid=\"textarea-social-links\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// SMTP Config Form Component\nfunction SmtpConfigForm({ \n  config, \n  onSave, \n  onTest, \n  isSaving, \n  isTesting \n}: {\n  config?: SmtpConfig;\n  onSave: (data: InsertSmtpConfig) => void;\n  onTest: (testEmail: string) => void;\n  isSaving: boolean;\n  isTesting: boolean;\n}) {\n  const form = useForm<InsertSmtpConfig>({\n    resolver: zodResolver(insertSmtpConfigSchema),\n    defaultValues: {\n      host: config?.host || \"\",\n      port: config?.port || 587,\n      secure: config?.secure || false,\n      username: config?.username || \"\",\n      password: \"\", // Never pre-fill password\n      fromEmail: config?.fromEmail || \"\",\n      fromName: config?.fromName || \"\",\n      isActive: config?.isActive ?? true,\n    },\n  });\n\n  const [testEmail, setTestEmail] = useState(\"\");\n\n  const onSubmit = (data: InsertSmtpConfig) => {\n    onSave(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"grid gap-4 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"host\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Servidor SMTP</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"smtp.gmail.com\"\n                    data-testid=\"input-smtp-host\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"port\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Porta</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"587\"\n                    data-testid=\"input-smtp-port\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"username\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Usuário</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"seu-email@gmail.com\"\n                    data-testid=\"input-smtp-username\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Senha</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"password\"\n                    placeholder=\"sua-senha-de-app\"\n                    data-testid=\"input-smtp-password\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"fromEmail\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>E-mail do Remetente</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"noreply@jusvalida.com\"\n                    data-testid=\"input-smtp-from-email\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"fromName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nome do Remetente</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"JusValida\"\n                    data-testid=\"input-smtp-from-name\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"secure\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Conexão Segura (SSL/TLS)</FormLabel>\n                  <FormDescription>\n                    Use true para porta 465, false para outras portas\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-smtp-secure\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"isActive\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Configuração Ativa</FormLabel>\n                  <FormDescription>\n                    Habilitar ou desabilitar esta configuração SMTP\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-smtp-active\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <div className=\"md:col-span-2 flex gap-4\">\n            <Button \n              type=\"submit\" \n              disabled={isSaving}\n              data-testid=\"button-save-smtp\"\n            >\n              {isSaving ? \"Salvando...\" : \"Salvar Configuração\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n\n      {/* Test SMTP Configuration */}\n      <div className=\"border-t pt-6\">\n        <h3 className=\"text-lg font-medium mb-4\">Testar Configuração</h3>\n        <div className=\"flex gap-4 items-end\">\n          <div className=\"flex-1\">\n            <Label htmlFor=\"testEmail\">E-mail para Teste</Label>\n            <Input\n              id=\"testEmail\"\n              type=\"email\"\n              placeholder=\"teste@exemplo.com\"\n              value={testEmail}\n              onChange={(e) => setTestEmail(e.target.value)}\n              data-testid=\"input-test-email\"\n            />\n          </div>\n          <Button\n            onClick={() => onTest(testEmail)}\n            disabled={isTesting || !testEmail}\n            data-testid=\"button-test-smtp\"\n          >\n            <TestTube className=\"mr-2 h-4 w-4\" />\n            {isTesting ? \"Testando...\" : \"Testar\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Stripe Config Form Component\nfunction StripeConfigForm({ \n  config, \n  onSave, \n  onTest, \n  isSaving, \n  isTesting \n}: {\n  config?: StripeConfig;\n  onSave: (data: InsertStripeConfig) => void;\n  onTest: (operationMode: 'test' | 'live') => void;\n  isSaving: boolean;\n  isTesting: boolean;\n}) {\n  const form = useForm<InsertStripeConfig>({\n    resolver: zodResolver(insertStripeConfigSchema),\n    defaultValues: {\n      testSecretKey: \"\", // Never pre-fill sensitive keys\n      liveSecretKey: \"\", // Never pre-fill sensitive keys\n      publicKey: config?.publicKey || \"\",\n      webhookSecret: \"\", // Never pre-fill sensitive keys\n      isActive: config?.isActive ?? true,\n      operationMode: config?.operationMode || \"test\",\n    },\n  });\n\n  const [selectedMode, setSelectedMode] = useState<'test' | 'live'>(config?.operationMode || 'test');\n  const watchedOperationMode = form.watch('operationMode');\n\n  useEffect(() => {\n    setSelectedMode(watchedOperationMode as 'test' | 'live');\n  }, [watchedOperationMode]);\n\n  const onSubmit = (data: InsertStripeConfig) => {\n    onSave(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium\">Configurações do Stripe</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Configure as chaves API do Stripe para processar pagamentos\n          </p>\n        </div>\n        <Badge \n          variant={selectedMode === 'live' ? 'destructive' : 'secondary'}\n          data-testid=\"badge-stripe-mode\"\n        >\n          Modo: {selectedMode === 'live' ? 'Produção' : 'Teste'}\n        </Badge>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <FormField\n              control={form.control}\n              name=\"testSecretKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Chave Secreta (Teste)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"sk_test_...\"\n                      data-testid=\"input-stripe-test-secret\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Chave secreta do Stripe para ambiente de teste\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"liveSecretKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Chave Secreta (Produção)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"sk_live_...\"\n                      data-testid=\"input-stripe-live-secret\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Chave secreta do Stripe para ambiente de produção\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"publicKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Chave Pública</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"pk_test_... ou pk_live_...\"\n                      data-testid=\"input-stripe-public-key\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Chave pública do Stripe (visível no frontend)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"webhookSecret\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Webhook Secret</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"whsec_...\"\n                      data-testid=\"input-stripe-webhook-secret\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Segredo do webhook para validar eventos do Stripe\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <FormField\n              control={form.control}\n              name=\"operationMode\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Modo de Operação</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-stripe-mode\">\n                        <SelectValue placeholder=\"Selecionar modo\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"test\">Teste</SelectItem>\n                      <SelectItem value=\"live\">Produção</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormDescription>\n                    Modo de operação do Stripe (teste ou produção)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isActive\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Ativar Stripe</FormLabel>\n                    <FormDescription>\n                      Habilitar ou desabilitar integração com Stripe\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-stripe-active\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"flex gap-4\">\n            <Button \n              type=\"submit\" \n              disabled={isSaving}\n              data-testid=\"button-save-stripe\"\n            >\n              {isSaving ? \"Salvando...\" : \"Salvar Configuração\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n\n      {/* Test Stripe Configuration */}\n      <div className=\"border-t pt-6\">\n        <h3 className=\"text-lg font-medium mb-4\">Testar Configuração</h3>\n        <div className=\"flex gap-4 items-center\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-muted-foreground mb-2\">\n              Teste a conexão com o Stripe no modo selecionado: <strong>{selectedMode}</strong>\n            </p>\n          </div>\n          <Button\n            onClick={() => onTest(selectedMode)}\n            disabled={isTesting}\n            data-testid=\"button-test-stripe\"\n          >\n            <TestTube className=\"mr-2 h-4 w-4\" />\n            {isTesting ? \"Testando...\" : \"Testar Conexão\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Notifications List Component\nfunction NotificationsList({\n  notifications,\n  onEdit,\n  onDelete,\n  isDeleting\n}: {\n  notifications: AdminNotification[];\n  onEdit: (notification: AdminNotification) => void;\n  onDelete: (id: string) => void;\n  isDeleting: boolean;\n}) {\n  const getTypeVariant = (type: string) => {\n    switch (type) {\n      case \"error\": return \"destructive\";\n      case \"warning\": return \"secondary\";\n      case \"success\": return \"default\";\n      case \"info\": return \"outline\";\n      default: return \"default\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {notifications.length === 0 ? (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          Nenhuma notificação encontrada\n        </div>\n      ) : (\n        notifications.map((notification) => (\n          <div\n            key={notification.id}\n            className=\"border rounded-lg p-4 space-y-3\"\n            data-testid={`notification-card-${notification.id}`}\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <h4 className=\"font-medium\" data-testid={`notification-title-${notification.id}`}>\n                    {notification.title}\n                  </h4>\n                  <Badge variant={getTypeVariant(notification.type)}>\n                    {notification.type}\n                  </Badge>\n                  {notification.priority > 0 && (\n                    <Badge variant=\"secondary\">\n                      Prioridade: {notification.priority}\n                    </Badge>\n                  )}\n                </div>\n                <p className=\"text-sm text-muted-foreground\" data-testid={`notification-message-${notification.id}`}>\n                  {notification.message}\n                </p>\n                <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                  <span>Público: {notification.targetAudience}</span>\n                  {notification.expiresAt && (\n                    <span>Expira: {format(new Date(notification.expiresAt), \"dd/MM/yyyy HH:mm\")}</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onEdit(notification)}\n                  data-testid={`button-edit-notification-${notification.id}`}\n                >\n                  <Edit2 className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => onDelete(notification.id)}\n                  disabled={isDeleting}\n                  data-testid={`button-delete-notification-${notification.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n\n// Notification Form Component\nfunction NotificationForm({\n  notification,\n  onSave,\n  onCancel,\n  isLoading\n}: {\n  notification?: AdminNotification | null;\n  onSave: (data: InsertAdminNotification) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}) {\n  const form = useForm<InsertAdminNotification>({\n    resolver: zodResolver(insertAdminNotificationSchema),\n    defaultValues: {\n      title: notification?.title || \"\",\n      message: notification?.message || \"\",\n      type: notification?.type || \"info\",\n      targetAudience: notification?.targetAudience || \"all\",\n      priority: notification?.priority || 0,\n      isActive: notification?.isActive ?? true,\n      showOnDashboard: notification?.showOnDashboard ?? true,\n      showOnLogin: notification?.showOnLogin ?? false,\n      expiresAt: notification?.expiresAt || undefined,\n      createdBy: \"\", // Will be set by backend\n    },\n  });\n\n  const onSubmit = (data: InsertAdminNotification) => {\n    onSave(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"title\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Título</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Título da notificação\"\n                    data-testid=\"input-notification-title\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"type\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tipo</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-notification-type\">\n                      <SelectValue placeholder=\"Selecione o tipo\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"info\">Informação</SelectItem>\n                    <SelectItem value=\"success\">Sucesso</SelectItem>\n                    <SelectItem value=\"warning\">Aviso</SelectItem>\n                    <SelectItem value=\"error\">Erro</SelectItem>\n                    <SelectItem value=\"announcement\">Anúncio</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"message\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Mensagem</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Conteúdo da notificação\"\n                  data-testid=\"textarea-notification-message\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"targetAudience\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Público Alvo</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-notification-audience\">\n                      <SelectValue placeholder=\"Selecione o público\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos os usuários</SelectItem>\n                    <SelectItem value=\"premium\">Usuários premium</SelectItem>\n                    <SelectItem value=\"trial\">Usuários em período de teste</SelectItem>\n                    <SelectItem value=\"admins\">Apenas administradores</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"priority\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Prioridade</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0\"\n                    min=\"0\"\n                    max=\"10\"\n                    data-testid=\"input-notification-priority\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                  />\n                </FormControl>\n                <FormDescription>\n                  Números maiores indicam maior prioridade (0-10)\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"expiresAt\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Data de Expiração (opcional)</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"datetime-local\"\n                  data-testid=\"input-notification-expires\"\n                  {...field}\n                  value={field.value ? new Date(field.value).toISOString().slice(0, 16) : \"\"}\n                  onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value).toISOString() : undefined)}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <FormField\n            control={form.control}\n            name=\"isActive\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Ativa</FormLabel>\n                  <FormDescription className=\"text-sm\">\n                    Notificação está ativa\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-notification-active\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"showOnDashboard\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Dashboard</FormLabel>\n                  <FormDescription className=\"text-sm\">\n                    Mostrar no dashboard\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-notification-dashboard\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"showOnLogin\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Login</FormLabel>\n                  <FormDescription className=\"text-sm\">\n                    Mostrar no login\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-notification-login\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"flex gap-4 pt-4\">\n          <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-notification\">\n            {isLoading ? \"Salvando...\" : \"Salvar Notificação\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel-notification\">\n            Cancelar\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default function Admin() {\n  const { isAdmin, isSupport, loading } = useUser();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [userPage, setUserPage] = useState(1);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  // Fetch users with pagination\n  const { data: usersData, isLoading: usersLoading } =\n    useQuery<UserListResponse>({\n      queryKey: [\"/api/admin/users\", userPage],\n      queryFn: async () => {\n        const response = await apiRequest(\n          \"GET\",\n          `/api/admin/users?page=${userPage}&limit=10`,\n        );\n        return response.json();\n      },\n      enabled: !loading && (isAdmin || isSupport),\n    });\n\n  // Fetch platform analytics\n  const { data: analytics, isLoading: analyticsLoading } =\n    useQuery<PlatformAnalytics>({\n      queryKey: [\"/api/admin/analytics\"],\n      queryFn: async () => {\n        const response = await apiRequest(\"GET\", \"/api/admin/analytics\");\n        return response.json();\n      },\n      enabled: !loading && (isAdmin || isSupport),\n    });\n\n  // Fetch AI usage analytics\n  const { data: aiUsage, isLoading: aiUsageLoading } =\n    useQuery<AiUsageAnalytics>({\n      queryKey: [\"/api/admin/ai-usage\"],\n      queryFn: async () => {\n        const response = await apiRequest(\"GET\", \"/api/admin/ai-usage\");\n        return response.json();\n      },\n      enabled: !loading && (isAdmin || isSupport),\n    });\n\n  // Fetch financial details\n  const { data: financialDetails, isLoading: financialLoading } =\n    useQuery<FinancialDetails>({\n      queryKey: [\"/api/admin/financial-details\"],\n      queryFn: async () => {\n        const response = await apiRequest(\n          \"GET\",\n          \"/api/admin/financial-details\",\n        );\n        return response.json();\n      },\n      enabled: !loading && (isAdmin || isSupport),\n    });\n\n  // Fetch credit trends\n  const { data: creditTrends, isLoading: trendsLoading } =\n    useQuery<CreditTrends>({\n      queryKey: [\"/api/admin/credit-trends\"],\n      queryFn: async () => {\n        const response = await apiRequest(\n          \"GET\",\n          \"/api/admin/credit-trends?days=30\",\n        );\n        return response.json();\n      },\n      enabled: !loading && (isAdmin || isSupport),\n    });\n\n  // Fetch system API keys\n  const { data: systemApiKeys, isLoading: systemKeysLoading } =\n    useQuery<SystemApiKeysResponse>({\n      queryKey: [\"/api/admin/system-api-keys\"],\n      queryFn: async () => {\n        const response = await apiRequest(\"GET\", \"/api/admin/system-api-keys\");\n        return response.json();\n      },\n      enabled: !loading && isAdmin, // Only admins can access system keys\n    });\n\n  // Fetch site configurations\n  const { data: siteConfigs, isLoading: siteConfigsLoading } =\n    useQuery<SiteConfig[]>({\n      queryKey: [\"/api/admin/site-config\"],\n      queryFn: async () => {\n        const response = await apiRequest(\"GET\", \"/api/admin/site-config\");\n        return response.json();\n      },\n      enabled: !loading && isAdmin,\n    });\n\n  // Fetch SMTP configuration\n  const { data: smtpConfig, isLoading: smtpConfigLoading } =\n    useQuery<SmtpConfig>({\n      queryKey: [\"/api/admin/smtp-config\"],\n      queryFn: async () => {\n        const response = await apiRequest(\"GET\", \"/api/admin/smtp-config\");\n        return response.json();\n      },\n      enabled: !loading && isAdmin,\n    });\n\n  // Fetch admin notifications\n  const { data: adminNotifications, isLoading: notificationsLoading } =\n    useQuery<AdminNotification[]>({\n      queryKey: [\"/api/admin/notifications\"],\n      queryFn: async () => {\n        const response = await apiRequest(\"GET\", \"/api/admin/notifications\");\n        return response.json();\n      },\n      enabled: !loading && isAdmin,\n    });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: ({\n      userId,\n      updates,\n    }: {\n      userId: string;\n      updates: { role?: string; credits?: number };\n    }) => apiRequest(\"PATCH\", `/api/admin/users/${userId}`, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"Success\", description: \"User updated successfully\" });\n      setSelectedUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // System API Keys management\n  const [editingProvider, setEditingProvider] = useState<string | null>(null);\n  const [testingProvider, setTestingProvider] = useState<string | null>(null);\n\n  // Create or update system API key mutation\n  const saveSystemApiKeyMutation = useMutation({\n    mutationFn: ({ provider, apiKey, isActive }: { provider: string; apiKey: string; isActive: boolean }) => {\n      const existingProvider = systemApiKeys?.providers.find(p => p.provider === provider);\n      \n      if (existingProvider) {\n        // Update existing key\n        return apiRequest(\"PUT\", `/api/admin/system-api-keys/${existingProvider.id}`, {\n          apiKey,\n          isActive\n        });\n      } else {\n        // Create new key\n        return apiRequest(\"POST\", \"/api/admin/system-api-keys\", {\n          provider,\n          apiKey,\n          isActive\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/system-api-keys\"] });\n      toast({ title: \"Sucesso\", description: \"Chave de API salva com sucesso\" });\n      setEditingProvider(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao salvar chave de API\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete system API key mutation\n  const deleteSystemApiKeyMutation = useMutation({\n    mutationFn: (providerId: string) => apiRequest(\"DELETE\", `/api/admin/system-api-keys/${providerId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/system-api-keys\"] });\n      toast({ title: \"Sucesso\", description: \"Chave de API removida com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao remover chave de API\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test API key connectivity mutation\n  const testApiKeyMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      setTestingProvider(providerId);\n      const response = await apiRequest(\"POST\", `/api/admin/system-api-keys/${providerId}/test`);\n      // SECURITY FIX: Parse response.json() correctly\n      return response.json();\n    },\n    onSuccess: (result: ApiTestResult, providerId: string) => {\n      setTestingProvider(null);\n      \n      if (result.success) {\n        toast({ \n          title: \"Teste bem-sucedido\", \n          description: result.message,\n        });\n      } else {\n        toast({\n          title: \"Falha no teste\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      setTestingProvider(null);\n      toast({\n        title: \"Erro no teste\",\n        description: error.message || \"Falha ao testar conectividade\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Site configuration mutations\n  const createSiteConfigMutation = useMutation({\n    mutationFn: (data: InsertSiteConfig) => apiRequest(\"POST\", \"/api/admin/site-config\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/site-config\"] });\n      toast({ title: \"Sucesso\", description: \"Configuração salva com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao salvar configuração\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSiteConfigMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertSiteConfig> }) => \n      apiRequest(\"PUT\", `/api/admin/site-config/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/site-config\"] });\n      toast({ title: \"Sucesso\", description: \"Configuração atualizada com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao atualizar configuração\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // SMTP configuration mutations\n  const saveSmtpConfigMutation = useMutation({\n    mutationFn: (data: InsertSmtpConfig) => {\n      if (smtpConfig?.id) {\n        return apiRequest(\"PUT\", `/api/admin/smtp-config/${smtpConfig.id}`, data);\n      } else {\n        return apiRequest(\"POST\", \"/api/admin/smtp-config\", data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/smtp-config\"] });\n      toast({ title: \"Sucesso\", description: \"Configuração SMTP salva com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao salvar configuração SMTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // SMTP test mutation\n  const testSmtpMutation = useMutation({\n    mutationFn: (testEmail: string) => \n      apiRequest(\"POST\", \"/api/admin/smtp-test\", { testEmail }),\n    onSuccess: () => {\n      toast({ title: \"Sucesso\", description: \"E-mail de teste enviado com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao enviar e-mail de teste\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fetch Stripe configuration\n  const { data: stripeConfig, isLoading: stripeConfigLoading } =\n    useQuery<StripeConfig>({\n      queryKey: [\"/api/admin/stripe-config\"],\n      queryFn: async () => {\n        const response = await apiRequest(\"GET\", \"/api/admin/stripe-config\");\n        return response.json();\n      },\n      enabled: !loading && isAdmin,\n    });\n\n  // Stripe configuration mutations\n  const saveStripeConfigMutation = useMutation({\n    mutationFn: (data: InsertStripeConfig) => {\n      if (stripeConfig?.id) {\n        return apiRequest(\"PUT\", `/api/admin/stripe-config/${stripeConfig.id}`, data);\n      } else {\n        return apiRequest(\"POST\", \"/api/admin/stripe-config\", data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stripe-config\"] });\n      toast({ title: \"Sucesso\", description: \"Configuração do Stripe salva com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao salvar configuração do Stripe\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Stripe test mutation\n  const testStripeMutation = useMutation({\n    mutationFn: (operationMode: 'test' | 'live') => \n      apiRequest(\"POST\", \"/api/admin/stripe-test\", { operationMode }),\n    onSuccess: (response: any) => {\n      toast({ \n        title: \"Sucesso\", \n        description: response.message || \"Configuração do Stripe testada com sucesso\" \n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao testar configuração do Stripe\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Admin notifications mutations\n  const createNotificationMutation = useMutation({\n    mutationFn: (data: InsertAdminNotification) => \n      apiRequest(\"POST\", \"/api/admin/notifications\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notifications\"] });\n      toast({ title: \"Sucesso\", description: \"Notificação criada com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar notificação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateNotificationMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertAdminNotification> }) => \n      apiRequest(\"PUT\", `/api/admin/notifications/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notifications\"] });\n      toast({ title: \"Sucesso\", description: \"Notificação atualizada com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao atualizar notificação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteNotificationMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/admin/notifications/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notifications\"] });\n      toast({ title: \"Sucesso\", description: \"Notificação excluída com sucesso\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao excluir notificação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // State for new tabs\n  const [selectedNotification, setSelectedNotification] = useState<AdminNotification | null>(null);\n  const [showNotificationForm, setShowNotificationForm] = useState(false);\n\n  // Admin verification\n  useEffect(() => {\n    if (!loading && !isAdmin && !isSupport) {\n      setLocation(\"/dashboard\");\n    }\n  }, [isAdmin, isSupport, loading, setLocation]);\n\n  // Admin verification\n  if (loading) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">Loading...</div>;\n  }\n  \n  if (!isAdmin && !isSupport) {\n    return null;\n  }\n\n  const handleUpdateUser = (\n    userId: string,\n    updates: { role?: string; credits?: number },\n  ) => {\n    updateUserMutation.mutate({ userId, updates });\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"destructive\";\n      case \"support\":\n        return \"secondary\";\n      default:\n        return \"default\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            Painel Administrativo\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie usuários, monitore o uso de IA e visualize análises da\n            plataforma\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"users\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-9\">\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n              <Users className=\"mr-2 h-4 w-4\" />\n              Usuários\n            </TabsTrigger>\n            <TabsTrigger value=\"system-keys\" data-testid=\"tab-system-keys\">\n              <Zap className=\"mr-2 h-4 w-4\" />\n              Chaves do Sistema\n            </TabsTrigger>\n            <TabsTrigger value=\"ai-monitoring\" data-testid=\"tab-ai-monitoring\">\n              <Activity className=\"mr-2 h-4 w-4\" />\n              Monitoramento IA\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">\n              <TrendingUp className=\"mr-2 h-4 w-4\" />\n              Análises da Plataforma\n            </TabsTrigger>\n            <TabsTrigger value=\"financial\" data-testid=\"tab-financial\">\n              <DollarSign className=\"mr-2 h-4 w-4\" />\n              Análise Financeira\n            </TabsTrigger>\n            <TabsTrigger value=\"site-settings\" data-testid=\"tab-site-settings\">\n              <Settings className=\"mr-2 h-4 w-4\" />\n              Configurações do Site\n            </TabsTrigger>\n            <TabsTrigger value=\"smtp-settings\" data-testid=\"tab-smtp-settings\">\n              <Mail className=\"mr-2 h-4 w-4\" />\n              Configurações SMTP\n            </TabsTrigger>\n            <TabsTrigger value=\"stripe-settings\" data-testid=\"tab-stripe-settings\">\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              Configurações Stripe\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n              <Bell className=\"mr-2 h-4 w-4\" />\n              Notificações\n            </TabsTrigger>\n          </TabsList>\n\n          {/* User Management Tab */}\n          <TabsContent value=\"users\" data-testid=\"content-users\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Gerenciamento de Usuários</CardTitle>\n                <CardDescription>\n                  Visualize e gerencie todos os usuários da plataforma\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {usersLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(5)].map((_, i) => (\n                      <Skeleton key={i} className=\"h-16 w-full\" />\n                    ))}\n                  </div>\n                ) : (\n                  <>\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Nome</TableHead>\n                          <TableHead>Email</TableHead>\n                          <TableHead>Role</TableHead>\n                          <TableHead>Créditos</TableHead>\n                          <TableHead>Cadastrado em</TableHead>\n                          <TableHead>Ações</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {usersData?.users.map((user: User) => (\n                          <TableRow key={user.id}>\n                            <TableCell\n                              data-testid={`text-user-name-${user.id}`}\n                            >\n                              {user.firstName} {user.lastName}\n                            </TableCell>\n                            <TableCell\n                              data-testid={`text-user-email-${user.id}`}\n                            >\n                              {user.email}\n                            </TableCell>\n                            <TableCell>\n                              <Badge\n                                variant={getRoleBadgeVariant(user.role)}\n                                data-testid={`badge-user-role-${user.id}`}\n                              >\n                                {user.role}\n                              </Badge>\n                            </TableCell>\n                            <TableCell\n                              data-testid={`text-user-credits-${user.id}`}\n                            >\n                              {user.credits}\n                            </TableCell>\n                            <TableCell\n                              data-testid={`text-user-created-${user.id}`}\n                            >\n                              {format(new Date(user.createdAt), \"dd/MM/yyyy\")}\n                            </TableCell>\n                            <TableCell>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setSelectedUser(user)}\n                                data-testid={`button-edit-user-${user.id}`}\n                              >\n                                Editar\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n\n                    <div className=\"flex justify-between items-center mt-4\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Mostrando {usersData?.users.length || 0} de{\" \"}\n                        {usersData?.total || 0} usuários\n                      </p>\n                      <div className=\"space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setUserPage((p) => Math.max(1, p - 1))}\n                          disabled={userPage === 1}\n                          data-testid=\"button-users-prev\"\n                        >\n                          Anterior\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setUserPage((p) => p + 1)}\n                          disabled={!usersData || usersData.users.length < 10}\n                          data-testid=\"button-users-next\"\n                        >\n                          Próxima\n                        </Button>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* User Edit Modal */}\n            {selectedUser && (\n              <Card className=\"mt-6\">\n                <CardHeader>\n                  <CardTitle>Editar Usuário</CardTitle>\n                  <CardDescription>\n                    Editando: {selectedUser.firstName} {selectedUser.lastName}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"role\">Role</Label>\n                      <Select\n                        defaultValue={selectedUser.role}\n                        onValueChange={(role) =>\n                          handleUpdateUser(selectedUser.id, { role })\n                        }\n                      >\n                        <SelectTrigger data-testid=\"select-user-role\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"user\">User</SelectItem>\n                          <SelectItem value=\"support\">Support</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"credits\">Créditos</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"credits\"\n                          type=\"number\"\n                          defaultValue={selectedUser.credits}\n                          placeholder=\"Número de créditos\"\n                          data-testid=\"input-user-credits\"\n                        />\n                        <Button\n                          onClick={(e) => {\n                            const input = e.currentTarget\n                              .previousElementSibling as HTMLInputElement;\n                            const credits = parseInt(input.value);\n                            if (credits >= 0) {\n                              handleUpdateUser(selectedUser.id, { credits });\n                            }\n                          }}\n                          data-testid=\"button-update-credits\"\n                        >\n                          Atualizar\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setSelectedUser(null)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancelar\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* System API Keys Tab */}\n          <TabsContent value=\"system-keys\" data-testid=\"content-system-keys\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Chaves de API do Sistema</CardTitle>\n                  <CardDescription>\n                    Configure as chaves de API dos provedores de IA que serão usadas como fallback quando o usuário não tiver sua própria chave\n                  </CardDescription>\n                </CardHeader>\n              </Card>\n\n              <div className=\"grid gap-4\">\n                {systemKeysLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <Card key={i}>\n                        <CardContent className=\"p-6\">\n                          <Skeleton className=\"h-20 w-full\" />\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  ['openai', 'anthropic', 'gemini'].map((providerType) => {\n                    const providerStatus = systemApiKeys?.status.find(s => s.provider === providerType);\n                    const providerData = systemApiKeys?.providers.find(p => p.provider === providerType);\n                    const isConfigured = providerStatus?.configured || false;\n                    const isActive = providerStatus?.isActive || false;\n                    const isEditing = editingProvider === providerType;\n                    const isTesting = testingProvider === providerData?.id;\n                    \n                    return (\n                      <Card key={providerType}>\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                                {providerType === 'openai' && <Zap className=\"h-4 w-4 text-primary\" />}\n                                {providerType === 'anthropic' && <Activity className=\"h-4 w-4 text-primary\" />}\n                                {providerType === 'gemini' && <TrendingUp className=\"h-4 w-4 text-primary\" />}\n                              </div>\n                              <div>\n                                <CardTitle className=\"text-lg capitalize\">\n                                  {providerType === 'openai' ? 'OpenAI' : \n                                   providerType === 'anthropic' ? 'Anthropic' : 'Google Gemini'}\n                                </CardTitle>\n                                <CardDescription>\n                                  Status: <Badge \n                                    variant={isConfigured && isActive ? \"default\" : isConfigured ? \"secondary\" : \"outline\"} \n                                    data-testid={`status-${providerType}`}\n                                  >\n                                    {isConfigured && isActive ? 'Ativo' : \n                                     isConfigured ? 'Configurado (Inativo)' : 'Não configurado'}\n                                  </Badge>\n                                </CardDescription>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              {isConfigured && (\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  disabled={!isActive || isTesting}\n                                  onClick={() => providerData && testApiKeyMutation.mutate(providerData.id)}\n                                  data-testid={`button-test-${providerType}`}\n                                >\n                                  {isTesting ? (\n                                    <div className=\"h-4 w-4 mr-2 animate-spin rounded-full border-2 border-current border-t-transparent\" />\n                                  ) : (\n                                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                  )}\n                                  {isTesting ? 'Testando...' : 'Testar'}\n                                </Button>\n                              )}\n                              <Button \n                                size=\"sm\"\n                                variant={isEditing ? \"secondary\" : \"default\"}\n                                onClick={() => setEditingProvider(isEditing ? null : providerType)}\n                                data-testid={`button-configure-${providerType}`}\n                              >\n                                {isEditing ? 'Cancelar' : (isConfigured ? 'Editar' : 'Configurar')}\n                              </Button>\n                              {isConfigured && (\n                                <Button \n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  onClick={() => providerData && deleteSystemApiKeyMutation.mutate(providerData.id)}\n                                  data-testid={`button-delete-${providerType}`}\n                                >\n                                  Remover\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </CardHeader>\n                        {isEditing && (\n                          <CardContent>\n                            <div className=\"space-y-4\">\n                              <div className=\"grid gap-2\">\n                                <Label htmlFor={`apikey-${providerType}`}>Chave de API</Label>\n                                <div className=\"flex gap-2\">\n                                  <Input\n                                    id={`apikey-${providerType}`}\n                                    type=\"password\"\n                                    placeholder={`Digite a chave de API do ${providerType === 'openai' ? 'OpenAI' : \n                                               providerType === 'anthropic' ? 'Anthropic' : 'Google Gemini'}`}\n                                    data-testid={`input-apikey-${providerType}`}\n                                  />\n                                  <Button \n                                    variant=\"default\"\n                                    disabled={saveSystemApiKeyMutation.isPending}\n                                    onClick={(e) => {\n                                      const input = document.getElementById(`apikey-${providerType}`) as HTMLInputElement;\n                                      const checkbox = document.getElementById(`active-${providerType}`) as HTMLInputElement;\n                                      const apiKey = input?.value?.trim();\n                                      const isActive = checkbox?.checked || false;\n                                      \n                                      if (apiKey) {\n                                        saveSystemApiKeyMutation.mutate({\n                                          provider: providerType,\n                                          apiKey,\n                                          isActive\n                                        });\n                                      }\n                                    }}\n                                    data-testid={`button-save-${providerType}`}\n                                  >\n                                    {saveSystemApiKeyMutation.isPending ? 'Salvando...' : 'Salvar'}\n                                  </Button>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <input \n                                  type=\"checkbox\" \n                                  id={`active-${providerType}`}\n                                  className=\"rounded\"\n                                  defaultChecked={isActive}\n                                  data-testid={`checkbox-active-${providerType}`}\n                                />\n                                <Label htmlFor={`active-${providerType}`}>\n                                  Ativar este provedor\n                                </Label>\n                              </div>\n                            </div>\n                          </CardContent>\n                        )}\n                        {!isEditing && isConfigured && (\n                          <CardContent>\n                            <div className=\"text-sm text-muted-foreground space-y-1\">\n                              <p>\n                                <strong>Última atualização:</strong> {\n                                  providerData?.updatedAt ? \n                                  format(new Date(providerData.updatedAt), \"dd/MM/yyyy 'às' HH:mm\") : \n                                  'Nunca'\n                                }\n                              </p>\n                              <p>\n                                <strong>Criado em:</strong> {\n                                  providerData?.createdAt ? \n                                  format(new Date(providerData.createdAt), \"dd/MM/yyyy 'às' HH:mm\") : \n                                  'N/A'\n                                }\n                              </p>\n                            </div>\n                          </CardContent>\n                        )}\n                      </Card>\n                    );\n                  })\n                )}\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Instruções</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"text-sm text-muted-foreground space-y-2\">\n                    <p><strong>OpenAI:</strong> Obtenha sua chave em <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" className=\"text-primary hover:underline\">platform.openai.com</a></p>\n                    <p><strong>Anthropic:</strong> Obtenha sua chave em <a href=\"https://console.anthropic.com/\" target=\"_blank\" className=\"text-primary hover:underline\">console.anthropic.com</a></p>\n                    <p><strong>Google Gemini:</strong> Obtenha sua chave em <a href=\"https://aistudio.google.com/app/apikey\" target=\"_blank\" className=\"text-primary hover:underline\">aistudio.google.com</a></p>\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                    <div className=\"flex gap-2\">\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0\" />\n                      <div className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                        <strong>Importante:</strong> Estas chaves serão usadas como fallback quando usuários não tiverem suas próprias chaves configuradas. Mantenha-as seguras e monitore o uso.\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* AI Monitoring Tab */}\n          <TabsContent\n            value=\"ai-monitoring\"\n            data-testid=\"content-ai-monitoring\"\n          >\n            <div className=\"grid gap-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Total de Análises\n                    </CardTitle>\n                    <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-total-analyses\"\n                    >\n                      {analyticsLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        analytics?.totalAnalyses || 0\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Créditos Utilizados\n                    </CardTitle>\n                    <Zap className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-credits-used\"\n                    >\n                      {analyticsLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        analytics?.totalCreditsUsed || 0\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Receita Total\n                    </CardTitle>\n                    <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-total-revenue\"\n                    >\n                      {analyticsLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        `R$ ${analytics?.totalRevenue.toFixed(2) || \"0.00\"}`\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Uso por Provedor de IA</CardTitle>\n                  <CardDescription>\n                    Estatísticas de uso dos provedores de IA\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {aiUsageLoading ? (\n                    <Skeleton className=\"h-64 w-full\" />\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Provedor</TableHead>\n                          <TableHead>Modelo</TableHead>\n                          <TableHead>Usos</TableHead>\n                          <TableHead>Créditos</TableHead>\n                          <TableHead>Taxa de Sucesso</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {aiUsage?.providerUsage.map(\n                          (\n                            provider: {\n                              provider: string;\n                              model: string;\n                              count: number;\n                              totalCredits: number;\n                            },\n                            index: number,\n                          ) => {\n                            const errorRate = aiUsage?.errorRates.find(\n                              (e: {\n                                provider: string;\n                                model: string;\n                                successRate: number;\n                              }) =>\n                                e.provider === provider.provider &&\n                                e.model === provider.model,\n                            );\n                            return (\n                              <TableRow key={index}>\n                                <TableCell\n                                  data-testid={`text-provider-${index}`}\n                                >\n                                  {provider.provider}\n                                </TableCell>\n                                <TableCell data-testid={`text-model-${index}`}>\n                                  {provider.model}\n                                </TableCell>\n                                <TableCell\n                                  data-testid={`text-usage-count-${index}`}\n                                >\n                                  {provider.count}\n                                </TableCell>\n                                <TableCell\n                                  data-testid={`text-credits-${index}`}\n                                >\n                                  {provider.totalCredits}\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"flex items-center gap-2\">\n                                    {errorRate && errorRate.successRate > 90 ? (\n                                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                                    ) : (\n                                      <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                                    )}\n                                    <span\n                                      data-testid={`text-success-rate-${index}`}\n                                    >\n                                      {errorRate\n                                        ? `${errorRate.successRate.toFixed(1)}%`\n                                        : \"N/A\"}\n                                    </span>\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            );\n                          },\n                        )}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Platform Analytics Tab */}\n          <TabsContent value=\"analytics\" data-testid=\"content-analytics\">\n            <div className=\"grid gap-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Total de Usuários\n                    </CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-total-users\"\n                    >\n                      {analyticsLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        analytics?.totalUsers || 0\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Análises Realizadas\n                    </CardTitle>\n                    <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-platform-total-analyses\"\n                    >\n                      {analyticsLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        analytics?.totalAnalyses || 0\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Créditos Comprados\n                    </CardTitle>\n                    <Zap className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-credits-purchased\"\n                    >\n                      {analyticsLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        analytics?.totalCreditsPurchased || 0\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Receita\n                    </CardTitle>\n                    <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-total-revenue-2\"\n                    >\n                      {analyticsLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        `R$ ${analytics?.totalRevenue.toFixed(2) || \"0.00\"}`\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Financial Analysis Tab */}\n          <TabsContent value=\"financial\" data-testid=\"content-financial\">\n            <div className=\"grid gap-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Usuários Ativos\n                    </CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-active-users\"\n                    >\n                      {financialLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        financialDetails?.userStatistics.usersWithCredits || 0\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Média de Créditos\n                    </CardTitle>\n                    <Zap className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-avg-credits\"\n                    >\n                      {financialLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        Math.round(\n                          financialDetails?.userStatistics.averageCredits || 0,\n                        )\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Pacotes Ativos\n                    </CardTitle>\n                    <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-active-packages\"\n                    >\n                      {financialLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        `${financialDetails?.activePackages || 0}/${financialDetails?.totalPackages || 0}`\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      Transações Recentes\n                    </CardTitle>\n                    <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-recent-transactions\"\n                    >\n                      {financialLoading ? (\n                        <Skeleton className=\"h-6 w-16\" />\n                      ) : (\n                        financialDetails?.recentTransactions.length || 0\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Site Settings Tab */}\n          <TabsContent value=\"site-settings\" data-testid=\"content-site-settings\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Configurações do Site</CardTitle>\n                <CardDescription>\n                  Configure as informações do rodapé e contato do site\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {siteConfigsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(6)].map((_, i) => (\n                      <Skeleton key={i} className=\"h-10 w-full\" />\n                    ))}\n                  </div>\n                ) : (\n                  <SiteConfigForm \n                    configs={siteConfigs || []}\n                    onSave={createSiteConfigMutation.mutate}\n                    onUpdate={updateSiteConfigMutation.mutate}\n                    isLoading={createSiteConfigMutation.isPending || updateSiteConfigMutation.isPending}\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* SMTP Settings Tab */}\n          <TabsContent value=\"smtp-settings\" data-testid=\"content-smtp-settings\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Configurações SMTP</CardTitle>\n                <CardDescription>\n                  Configure as configurações de e-mail para envio de notificações\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {smtpConfigLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(7)].map((_, i) => (\n                      <Skeleton key={i} className=\"h-10 w-full\" />\n                    ))}\n                  </div>\n                ) : (\n                  <SmtpConfigForm \n                    config={smtpConfig}\n                    onSave={saveSmtpConfigMutation.mutate}\n                    onTest={testSmtpMutation.mutate}\n                    isSaving={saveSmtpConfigMutation.isPending}\n                    isTesting={testSmtpMutation.isPending}\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Stripe Settings Tab */}\n          <TabsContent value=\"stripe-settings\" data-testid=\"content-stripe-settings\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Configurações do Stripe</CardTitle>\n                <CardDescription>\n                  Configure as chaves API do Stripe para processar pagamentos\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {stripeConfigLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(6)].map((_, i) => (\n                      <Skeleton key={i} className=\"h-10 w-full\" />\n                    ))}\n                  </div>\n                ) : (\n                  <StripeConfigForm \n                    config={stripeConfig}\n                    onSave={saveStripeConfigMutation.mutate}\n                    onTest={testStripeMutation.mutate}\n                    isSaving={saveStripeConfigMutation.isPending}\n                    isTesting={testStripeMutation.isPending}\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notifications Tab */}\n          <TabsContent value=\"notifications\" data-testid=\"content-notifications\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <div>\n                    <CardTitle>Notificações do Sistema</CardTitle>\n                    <CardDescription>\n                      Gerencie notificações para usuários da plataforma\n                    </CardDescription>\n                  </div>\n                  <Button\n                    onClick={() => {\n                      setSelectedNotification(null);\n                      setShowNotificationForm(true);\n                    }}\n                    data-testid=\"button-create-notification\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Nova Notificação\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  {notificationsLoading ? (\n                    <div className=\"space-y-3\">\n                      {[...Array(5)].map((_, i) => (\n                        <Skeleton key={i} className=\"h-16 w-full\" />\n                      ))}\n                    </div>\n                  ) : (\n                    <NotificationsList \n                      notifications={adminNotifications || []}\n                      onEdit={(notification) => {\n                        setSelectedNotification(notification);\n                        setShowNotificationForm(true);\n                      }}\n                      onDelete={deleteNotificationMutation.mutate}\n                      isDeleting={deleteNotificationMutation.isPending}\n                    />\n                  )}\n                </CardContent>\n              </Card>\n\n              {showNotificationForm && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      {selectedNotification ? 'Editar' : 'Criar'} Notificação\n                    </CardTitle>\n                    <CardDescription>\n                      {selectedNotification \n                        ? 'Edite os detalhes da notificação'\n                        : 'Crie uma nova notificação para os usuários'\n                      }\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <NotificationForm \n                      notification={selectedNotification}\n                      onSave={(data) => {\n                        if (selectedNotification) {\n                          updateNotificationMutation.mutate({ \n                            id: selectedNotification.id, \n                            data \n                          });\n                        } else {\n                          createNotificationMutation.mutate(data);\n                        }\n                        setShowNotificationForm(false);\n                        setSelectedNotification(null);\n                      }}\n                      onCancel={() => {\n                        setShowNotificationForm(false);\n                        setSelectedNotification(null);\n                      }}\n                      isLoading={\n                        createNotificationMutation.isPending || \n                        updateNotificationMutation.isPending\n                      }\n                    />\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":92525},"client/src/lib/iconMapping.ts":{"content":"import { Bot, Brain, Sparkles, Route, Gift, LucideIcon } from 'lucide-react';\n\nexport const iconMap: Record<string, LucideIcon> = {\n  Bot: Bot,\n  Brain: Brain,\n  Sparkles: Sparkles,\n  Route: Route,\n  Gift: Gift,\n};\n\nexport function getIconComponent(iconName: string): LucideIcon {\n  return iconMap[iconName] || Bot; // Default to Bot icon if not found\n}","size_bytes":353},"client/src/components/ui/template-selector.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { FileText, Users, Building, Shield, Scale, ScrollText } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface DocumentTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  documentType: string;\n  keyPoints: string[];\n  isActive: boolean;\n}\n\ninterface TemplateSelectorProps {\n  selectedTemplate: string;\n  onTemplateChange: (templateId: string) => void;\n  className?: string;\n}\n\nconst getCategoryIcon = (category: string) => {\n  switch (category) {\n    case 'contratos':\n      return <FileText size={16} />;\n    case 'trabalhista':\n      return <Users size={16} />;\n    case 'empresarial':\n      return <Building size={16} />;\n    case 'civil':\n      return <Scale size={16} />;\n    case 'criminal':\n      return <Shield size={16} />;\n    case 'constitucional':\n      return <ScrollText size={16} />;\n    default:\n      return <FileText size={16} />;\n  }\n};\n\nconst getCategoryColor = (category: string) => {\n  switch (category) {\n    case 'contratos':\n      return 'bg-blue-100 text-blue-800';\n    case 'trabalhista':\n      return 'bg-green-100 text-green-800';\n    case 'empresarial':\n      return 'bg-purple-100 text-purple-800';\n    case 'civil':\n      return 'bg-orange-100 text-orange-800';\n    case 'criminal':\n      return 'bg-red-100 text-red-800';\n    case 'constitucional':\n      return 'bg-yellow-100 text-yellow-800';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n};\n\nexport function TemplateSelector({ selectedTemplate, onTemplateChange, className = '' }: TemplateSelectorProps) {\n  const [selectedTemplateData, setSelectedTemplateData] = useState<DocumentTemplate | null>(null);\n\n  const { data: templates = [], isLoading } = useQuery<DocumentTemplate[]>({\n    queryKey: ['/api/templates'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/templates');\n      return response.json();\n    }\n  });\n\n  // Update selected template data when selection changes\n  useEffect(() => {\n    if (selectedTemplate && selectedTemplate !== \"no-template\" && templates.length > 0) {\n      const template = templates.find(t => t.id === selectedTemplate);\n      setSelectedTemplateData(template || null);\n    } else {\n      setSelectedTemplateData(null);\n    }\n  }, [selectedTemplate, templates]);\n\n  // Group templates by category\n  const templatesByCategory = templates.reduce((acc, template) => {\n    if (!acc[template.category]) {\n      acc[template.category] = [];\n    }\n    acc[template.category].push(template);\n    return acc;\n  }, {} as Record<string, DocumentTemplate[]>);\n\n  if (isLoading) {\n    return (\n      <div className={`space-y-2 ${className}`}>\n        <Label>Tipo de Documento (Carregando...)</Label>\n        <div className=\"h-10 bg-muted animate-pulse rounded-md\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"template-select\" data-testid=\"label-template-selector\">\n          Tipo de Documento\n        </Label>\n        <Select value={selectedTemplate} onValueChange={onTemplateChange}>\n          <SelectTrigger id=\"template-select\" data-testid=\"select-template\">\n            <SelectValue placeholder=\"Selecione um tipo de documento para análise especializada\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"no-template\" data-testid=\"option-no-template\">\n              Análise Geral (sem template específico)\n            </SelectItem>\n            {Object.entries(templatesByCategory).map(([category, categoryTemplates]) => (\n              <div key={category}>\n                <div className=\"flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-muted-foreground\">\n                  {getCategoryIcon(category)}\n                  <span className=\"capitalize\">{category}</span>\n                </div>\n                {categoryTemplates.map((template) => (\n                  <SelectItem \n                    key={template.id} \n                    value={template.id}\n                    data-testid={`option-template-${template.id}`}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <span>{template.name}</span>\n                      <Badge variant=\"secondary\" className={getCategoryColor(template.category)}>\n                        {template.documentType}\n                      </Badge>\n                    </div>\n                  </SelectItem>\n                ))}\n              </div>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Template Details Card */}\n      {selectedTemplateData && (\n        <Card data-testid=\"card-template-details\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <CardTitle className=\"text-base\">{selectedTemplateData.name}</CardTitle>\n                <CardDescription className=\"mt-1\">\n                  {selectedTemplateData.description}\n                </CardDescription>\n              </div>\n              <Badge className={getCategoryColor(selectedTemplateData.category)}>\n                {selectedTemplateData.category}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div>\n              <h4 className=\"text-sm font-medium mb-2\">Pontos de Análise Específicos:</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                {selectedTemplateData.keyPoints.map((point, index) => (\n                  <li key={index} className=\"flex items-start gap-2\">\n                    <span className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                    <span>{point}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6318},"client/src/pages/batch.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { BatchJob, BatchStatistics, Template } from \"@shared/schema\";\nimport { Upload, FileText, X, Play, Calculator, AlertCircle, CheckCircle2, Clock, FileWarning } from \"lucide-react\";\n\ninterface BatchUploadFile {\n  file: File;\n  id: string;\n  status: 'pending' | 'uploading' | 'completed' | 'error';\n  error?: string;\n}\n\n\nexport default function BatchProcessingPage() {\n  const [selectedFiles, setSelectedFiles] = useState<BatchUploadFile[]>([]);\n  const [batchName, setBatchName] = useState(\"\");\n  const [batchDescription, setBatchDescription] = useState(\"\");\n  const [analysisType, setAnalysisType] = useState(\"\");\n  const [aiProvider, setAiProvider] = useState(\"openai\");\n  const [aiModel, setAiModel] = useState(\"gpt-4\");\n  const [templateId, setTemplateId] = useState(\"\");\n  const [estimatedCredits, setEstimatedCredits] = useState(0);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user's batch jobs\n  const { data: batchJobs = [], isLoading: loadingJobs } = useQuery<BatchJob[]>({\n    queryKey: ['/api/batch/jobs'],\n    enabled: true\n  });\n\n  // Fetch templates for dropdown\n  const { data: templates = [] } = useQuery<Template[]>({\n    queryKey: ['/api/templates']\n  });\n\n  // Fetch batch statistics\n  const { data: statistics } = useQuery<BatchStatistics>({\n    queryKey: ['/api/batch/statistics']\n  });\n\n  // Calculate credits when files or settings change\n  const calculateCredits = useCallback(() => {\n    if (selectedFiles.length === 0 || !aiProvider || !aiModel) {\n      setEstimatedCredits(0);\n      return;\n    }\n\n    // Credit calculation based on provider and model\n    const creditsPerDocument = getProviderCredits(`${aiProvider}-${aiModel}`);\n    setEstimatedCredits(creditsPerDocument * selectedFiles.length);\n  }, [selectedFiles.length, aiProvider, aiModel]);\n\n  // Helper function to get credits per document (matches backend logic)\n  const getProviderCredits = (providerModel: string): number => {\n    const creditMap: Record<string, number> = {\n      'openai-gpt-4': 5,\n      'openai-gpt-3.5-turbo': 2,\n      'anthropic-claude-3-opus': 6,\n      'anthropic-claude-3-sonnet': 4,\n      'gemini-gemini-pro': 3,\n      'free-basic': 1\n    };\n    return creditMap[providerModel] || 1;\n  };\n\n  // Recalculate credits when dependencies change\n  useEffect(() => {\n    calculateCredits();\n  }, [calculateCredits]);\n\n  // Dropzone configuration\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const newFiles: BatchUploadFile[] = acceptedFiles.map(file => ({\n      file,\n      id: Math.random().toString(36).substr(2, 9),\n      status: 'pending' as const\n    }));\n    \n    setSelectedFiles(prev => [...prev, ...newFiles]);\n    calculateCredits();\n    \n    toast({\n      title: \"Files added\",\n      description: `Added ${acceptedFiles.length} files to batch`\n    });\n  }, [calculateCredits, toast]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'text/plain': ['.txt']\n    },\n    maxSize: 50 * 1024 * 1024, // 50MB per file\n    maxFiles: 25, // UPDATED: Match backend limit (was 50)\n    multiple: true\n  });\n\n  // Remove file from batch\n  const removeFile = (fileId: string) => {\n    setSelectedFiles(prev => prev.filter(f => f.id !== fileId));\n    calculateCredits();\n  };\n\n  // Create batch job mutation\n  const createBatchMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      return await apiRequest('POST', '/api/batch/create', data);\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Batch job created\",\n        description: `Batch \"${batchName}\" created successfully with ${selectedFiles.length} documents`\n      });\n      \n      // Reset form\n      setSelectedFiles([]);\n      setBatchName(\"\");\n      setBatchDescription(\"\");\n      setAnalysisType(\"\");\n      setTemplateId(\"\");\n      \n      // Refresh batch jobs list\n      queryClient.invalidateQueries({ queryKey: ['/api/batch/jobs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/batch/statistics'] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create batch job\",\n        description: error.message || \"An error occurred while creating the batch job\"\n      });\n    }\n  });\n\n  // Submit batch job\n  const handleSubmit = async () => {\n    if (!batchName.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Validation Error\",\n        description: \"Please enter a batch name\"\n      });\n      return;\n    }\n\n    if (selectedFiles.length === 0) {\n      toast({\n        variant: \"destructive\",\n        title: \"Validation Error\",\n        description: \"Please select at least one file\"\n      });\n      return;\n    }\n\n    if (!analysisType) {\n      toast({\n        variant: \"destructive\",\n        title: \"Validation Error\",\n        description: \"Please select an analysis type\"\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', batchName);\n    formData.append('description', batchDescription);\n    formData.append('analysisType', analysisType);\n    formData.append('aiProvider', aiProvider);\n    formData.append('aiModel', aiModel);\n    if (templateId && templateId !== \"no-template\") {\n      formData.append('templateId', templateId);\n    }\n\n    selectedFiles.forEach(({ file }) => {\n      formData.append('files', file);\n    });\n\n    createBatchMutation.mutate(formData);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n      case 'failed':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'processing':\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\n      case 'completed_with_errors':\n        return <FileWarning className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'completed_with_errors':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Batch Document Processing</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Process multiple documents simultaneously with AI analysis\n        </p>\n      </div>\n\n      {/* Statistics Cards */}\n      {statistics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Total Batches</CardDescription>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-total-batches\">{statistics.totalBatches}</CardTitle>\n            </CardHeader>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Completed</CardDescription>\n              <CardTitle className=\"text-2xl text-green-600\" data-testid=\"text-completed-batches\">{statistics.completedBatches}</CardTitle>\n            </CardHeader>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Documents Processed</CardDescription>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-documents-processed\">{statistics.totalDocumentsProcessed}</CardTitle>\n            </CardHeader>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Avg Processing Time</CardDescription>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-avg-processing-time\">\n                {statistics.averageProcessingTime ? `${Math.round(statistics.averageProcessingTime)}s` : '0s'}\n              </CardTitle>\n            </CardHeader>\n          </Card>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Upload Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Upload className=\"h-5 w-5\" />\n              Create New Batch\n            </CardTitle>\n            <CardDescription>\n              Upload multiple documents for batch processing\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Batch Details */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"batch-name\">Batch Name *</Label>\n                <Input\n                  id=\"batch-name\"\n                  data-testid=\"input-batch-name\"\n                  value={batchName}\n                  onChange={(e) => setBatchName(e.target.value)}\n                  placeholder=\"Enter batch name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"batch-description\">Description</Label>\n                <Textarea\n                  id=\"batch-description\"\n                  data-testid=\"input-batch-description\"\n                  value={batchDescription}\n                  onChange={(e) => setBatchDescription(e.target.value)}\n                  placeholder=\"Optional batch description\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"analysis-type\">Analysis Type *</Label>\n                  <Select value={analysisType} onValueChange={setAnalysisType}>\n                    <SelectTrigger data-testid=\"select-analysis-type\">\n                      <SelectValue placeholder=\"Select analysis type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"risk_assessment\">Risk Assessment</SelectItem>\n                      <SelectItem value=\"compliance_check\">Compliance Check</SelectItem>\n                      <SelectItem value=\"contract_review\">Contract Review</SelectItem>\n                      <SelectItem value=\"legal_summary\">Legal Summary</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"template\">Template (Optional)</Label>\n                  <Select value={templateId} onValueChange={setTemplateId}>\n                    <SelectTrigger data-testid=\"select-template\">\n                      <SelectValue placeholder=\"Select template\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"no-template\">No template</SelectItem>\n                      {templates.map((template) => (\n                        <SelectItem key={template.id} value={template.id}>\n                          {template.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"ai-provider\">AI Provider</Label>\n                  <Select value={aiProvider} onValueChange={setAiProvider}>\n                    <SelectTrigger data-testid=\"select-ai-provider\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"openai\">OpenAI</SelectItem>\n                      <SelectItem value=\"anthropic\">Anthropic</SelectItem>\n                      <SelectItem value=\"gemini\">Google Gemini</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"ai-model\">AI Model</Label>\n                  <Select value={aiModel} onValueChange={setAiModel}>\n                    <SelectTrigger data-testid=\"select-ai-model\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {aiProvider === 'openai' && (\n                        <>\n                          <SelectItem value=\"gpt-4\">GPT-4</SelectItem>\n                          <SelectItem value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</SelectItem>\n                        </>\n                      )}\n                      {aiProvider === 'anthropic' && (\n                        <>\n                          <SelectItem value=\"claude-3-opus\">Claude 3 Opus</SelectItem>\n                          <SelectItem value=\"claude-3-sonnet\">Claude 3 Sonnet</SelectItem>\n                        </>\n                      )}\n                      {aiProvider === 'gemini' && (\n                        <SelectItem value=\"gemini-pro\">Gemini Pro</SelectItem>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* File Upload */}\n            <div\n              {...getRootProps()}\n              className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors\n                ${isDragActive ? 'border-primary bg-primary/5' : 'border-muted-foreground/25 hover:border-primary/50'}`}\n              data-testid=\"dropzone-upload\"\n            >\n              <input {...getInputProps()} />\n              <Upload className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-medium mb-2\">\n                {isDragActive ? 'Drop files here' : 'Upload Documents'}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Drag & drop files here, or click to select files\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                Supports PDF, DOC, DOCX, TXT files up to 50MB each\n              </p>\n            </div>\n\n            {/* Selected Files */}\n            {selectedFiles.length > 0 && (\n              <div>\n                <h4 className=\"font-medium mb-3\">Selected Files ({selectedFiles.length})</h4>\n                <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                  {selectedFiles.map(({ file, id, status }) => (\n                    <div\n                      key={id}\n                      className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                      data-testid={`file-item-${id}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <p className=\"text-sm font-medium\">{file.name}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {(file.size / 1024 / 1024).toFixed(2)} MB\n                          </p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(id)}\n                        data-testid={`button-remove-file-${id}`}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Credit Estimation */}\n            {selectedFiles.length > 0 && (\n              <Alert>\n                <Calculator className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Estimated Credits: <strong>{estimatedCredits}</strong></span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {getProviderCredits(`${aiProvider}-${aiModel}`)} credits × {selectedFiles.length} files\n                    </span>\n                  </div>\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {/* Submit Button */}\n            <Button\n              onClick={handleSubmit}\n              disabled={selectedFiles.length === 0 || !batchName.trim() || !analysisType || createBatchMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-create-batch\"\n            >\n              <Play className=\"h-4 w-4 mr-2\" />\n              {createBatchMutation.isPending ? 'Creating Batch...' : `Create Batch (${estimatedCredits} credits)`}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Recent Batches */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Batch Jobs</CardTitle>\n            <CardDescription>\n              Your recent batch processing jobs\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {loadingJobs ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded-lg animate-pulse\" />\n                ))}\n              </div>\n            ) : batchJobs.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No batch jobs yet</p>\n                <p className=\"text-sm\">Create your first batch to get started</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {batchJobs.slice(0, 5).map((job) => (\n                  <div\n                    key={job.id}\n                    className=\"p-4 border rounded-lg space-y-2\"\n                    data-testid={`batch-job-${job.id}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium\">{job.name}</h4>\n                      <Badge className={getStatusColor(job.status)}>\n                        {getStatusIcon(job.status)}\n                        <span className=\"ml-1 capitalize\">{job.status.replace('_', ' ')}</span>\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                      <span>{job.totalDocuments} documents</span>\n                      <span>{job.totalCreditsUsed || job.totalCreditsEstimated} credits</span>\n                    </div>\n\n                    {job.status === 'processing' && (\n                      <Progress \n                        value={(job.processedDocuments / job.totalDocuments) * 100} \n                        className=\"h-2\"\n                      />\n                    )}\n\n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                      <span>Created {new Date(job.createdAt).toLocaleDateString()}</span>\n                      <span>{job.processedDocuments}/{job.totalDocuments} processed</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20486},"server/services/batchProcessor.ts":{"content":"import { storage } from \"../storage\";\nimport { aiService } from \"./ai\";\nimport type { QueueJob, BatchJob, BatchDocument, BatchJobMetadata, BatchDocumentMetadata } from \"@shared/schema\";\nimport fs from \"fs\";\n\ninterface BatchProcessingJob {\n  batchJobId: string;\n  userId: string;\n  aiProvider: string;\n  aiModel: string;\n  analysisType: string;\n  templateId?: string;\n}\n\nclass BatchProcessor {\n  private isProcessing = false;\n  private processingInterval: NodeJS.Timeout | null = null;\n  private maxConcurrentJobs = 5; // Process up to 5 documents in parallel\n  private pollingInterval = 5000; // Check for new jobs every 5 seconds\n\n  constructor() {\n    this.startPolling();\n  }\n\n  private startPolling() {\n    if (this.processingInterval) return;\n    \n    console.log(\"🔄 Starting batch processor polling...\");\n    this.processingInterval = setInterval(async () => {\n      if (!this.isProcessing) {\n        await this.processNextJob();\n      }\n    }, this.pollingInterval);\n  }\n\n  public stopPolling() {\n    if (this.processingInterval) {\n      clearInterval(this.processingInterval);\n      this.processingInterval = null;\n      console.log(\"⏹️ Stopped batch processor polling\");\n    }\n  }\n\n  private async processNextJob() {\n    try {\n      const queueJob = await storage.getNextQueueJob();\n      if (!queueJob) return; // No jobs to process\n\n      console.log(`📋 Processing queue job: ${queueJob.id}`);\n      await this.processQueueJob(queueJob);\n    } catch (error) {\n      console.error(\"❌ Error in batch processor:\", error);\n    }\n  }\n\n  private async processQueueJob(queueJob: QueueJob) {\n    if (queueJob.jobType !== 'batch_processing') {\n      console.log(`⏭️ Skipping non-batch job: ${queueJob.jobType}`);\n      return;\n    }\n\n    this.isProcessing = true;\n\n    try {\n      // Update queue job status to processing\n      await storage.updateQueueJobStatus(queueJob.id, 'processing');\n\n      const jobData = queueJob.jobData as BatchProcessingJob;\n      await this.processBatchJob(jobData);\n\n      // Mark queue job as completed\n      await storage.updateQueueJobStatus(queueJob.id, 'completed');\n      console.log(`✅ Completed queue job: ${queueJob.id}`);\n    } catch (error: any) {\n      console.error(`❌ Failed to process queue job ${queueJob.id}:`, error);\n      \n      // Update queue job with error\n      await storage.updateQueueJobStatus(queueJob.id, 'failed', error.message);\n      \n      // Update batch job status to failed\n      const jobData = queueJob.jobData as BatchProcessingJob;\n      if (jobData.batchJobId) {\n        await storage.updateBatchJobStatus(jobData.batchJobId, 'failed', error.message);\n      }\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  private async processBatchJob(jobData: BatchProcessingJob) {\n    const { batchJobId, userId, aiProvider, aiModel, analysisType, templateId } = jobData;\n\n    console.log(`🚀 Starting batch processing for job: ${batchJobId}`);\n\n    // Get batch job and documents\n    const batchJob = await storage.getBatchJobById(batchJobId);\n    if (!batchJob) {\n      throw new Error(`Batch job not found: ${batchJobId}`);\n    }\n\n    const batchDocuments = await storage.getBatchDocuments(batchJobId);\n    if (batchDocuments.length === 0) {\n      throw new Error(`No documents found for batch job: ${batchJobId}`);\n    }\n\n    // Update batch job status to processing\n    await storage.updateBatchJobStatus(batchJobId, 'processing');\n\n    // Get user to check credits and API keys\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error(`User not found: ${userId}`);\n    }\n\n    // Get user's API key for the provider if needed\n    let userApiKey: string | undefined;\n    if (aiProvider !== 'free') {\n      const providerConfig = await storage.getAiProvider(userId, aiProvider);\n      userApiKey = providerConfig?.apiKey;\n    }\n\n    // Get template data if specified\n    let templateData = null;\n    if (templateId) {\n      templateData = await storage.getTemplateWithPrompts(templateId);\n    }\n\n    let totalCreditsUsed = 0;\n    let processedCount = 0;\n    let failedCount = 0;\n\n    try {\n      // Process documents in parallel batches\n      const chunkSize = this.maxConcurrentJobs;\n      const documentChunks = this.chunkArray(batchDocuments, chunkSize);\n\n      for (const chunk of documentChunks) {\n        const promises = chunk.map(doc => this.processDocument(\n          doc,\n          userId,\n          aiProvider,\n          aiModel,\n          analysisType,\n          userApiKey,\n          templateId\n        ));\n\n        const results = await Promise.allSettled(promises);\n        \n        // Process results\n        for (let i = 0; i < results.length; i++) {\n          const result = results[i];\n          const document = chunk[i];\n\n          if (result.status === 'fulfilled') {\n            const { creditsUsed } = result.value;\n            totalCreditsUsed += creditsUsed;\n            processedCount++;\n            console.log(`✅ Processed document: ${document.originalFileName}`);\n          } else {\n            failedCount++;\n            console.error(`❌ Failed to process document ${document.originalFileName}:`, result.reason);\n            await storage.updateBatchDocumentStatus(document.id, 'failed', result.reason?.message || 'Processing failed');\n          }\n        }\n\n        // Update batch job progress\n        const progressPercentage = Math.round(((processedCount + failedCount) / batchDocuments.length) * 100);\n        await storage.updateBatchJob(batchJobId, {\n          processedDocuments: processedCount,\n          failedDocuments: failedCount,\n          totalCreditsUsed,\n          metadata: { \n            ...(batchJob.metadata as BatchJobMetadata || {}), \n            progressPercentage \n          } as BatchJobMetadata\n        });\n      }\n\n      // Determine final status\n      const finalStatus = failedCount === batchDocuments.length ? 'failed' : \n                         failedCount > 0 ? 'completed_with_errors' : 'completed';\n\n      // Update final batch job status\n      await storage.updateBatchJobStatus(batchJobId, finalStatus);\n\n      console.log(`🎉 Batch processing completed for ${batchJobId}: ${processedCount} success, ${failedCount} failed`);\n\n    } catch (error: any) {\n      console.error(`❌ Batch processing failed for ${batchJobId}:`, error);\n      await storage.updateBatchJobStatus(batchJobId, 'failed', error.message);\n      throw error;\n    }\n  }\n\n  private async processDocument(\n    document: BatchDocument,\n    userId: string,\n    aiProvider: string,\n    aiModel: string,\n    analysisType: string,\n    userApiKey?: string,\n    templateId?: string\n  ): Promise<{ creditsUsed: number }> {\n    // UPDATED: Extract file metadata once for cleanup in finally block\n    const metadata = document.metadata as BatchDocumentMetadata & { filePath?: string; tempFile?: boolean };\n    \n    try {\n      // Update document status to processing\n      await storage.updateBatchDocumentStatus(document.id, 'processing');\n\n      const filePath = metadata?.filePath;\n      \n      if (!filePath) {\n        throw new Error('File path not found in document metadata');\n      }\n      \n      if (!fs.existsSync(filePath)) {\n        throw new Error(`File not found on disk: ${filePath}`);\n      }\n\n      // Read file content from disk - SECURE: No more base64 in memory\n      let content: string;\n      try {\n        const fileBuffer = await fs.promises.readFile(filePath);\n        content = fileBuffer.toString('utf-8');\n        console.log(`📝 Read file from disk: ${document.originalFileName} (${fileBuffer.length} bytes)`);\n      } catch (readError: any) {\n        throw new Error(`Failed to read file ${filePath}: ${readError.message}`);\n      }\n\n      // Calculate credits needed\n      const creditsNeeded = aiService.getProviderCredits(`${aiProvider}-${aiModel}`);\n\n      // Create document analysis record\n      const analysis = await storage.createDocumentAnalysis(userId, {\n        title: `Batch: ${document.originalFileName}`,\n        content,\n        aiProvider,\n        aiModel,\n        analysisType,\n        templateId: templateId || null,\n        result: {},\n        creditsUsed: creditsNeeded,\n      });\n\n      try {\n        // Perform AI analysis\n        const result = await aiService.analyzeDocument(\n          content,\n          analysisType,\n          aiProvider,\n          aiModel,\n          userApiKey,\n          templateId\n        );\n\n        // Update analysis with result\n        await storage.updateDocumentAnalysisResult(analysis.id, result, \"completed\");\n\n        // Link batch document to analysis\n        await storage.linkBatchDocumentToAnalysis(document.id, analysis.id);\n\n        // Update document status to completed\n        await storage.updateBatchDocumentStatus(document.id, 'completed');\n\n        // FIXED: Credits were already deducted at batch creation, so don't deduct again\n        return { creditsUsed: creditsNeeded };\n\n      } catch (analysisError: any) {\n        // Update analysis as failed\n        await storage.updateDocumentAnalysisResult(analysis.id, { error: analysisError.message }, \"failed\");\n        throw analysisError;\n      }\n\n    } catch (error: any) {\n      console.error(`❌ Error processing document ${document.originalFileName}:`, error);\n      await storage.updateBatchDocumentStatus(document.id, 'failed', error.message);\n      throw error;\n    } finally {\n      // REQUIRED: Always clean up temp file in finally block regardless of success/failure\n      try {\n        await this.cleanupDocumentFile(document, metadata);\n      } catch (cleanupError) {\n        console.error(`❌ Failed to cleanup file in finally block:`, cleanupError);\n      }\n    }\n  }\n\n  private chunkArray<T>(array: T[], chunkSize: number): T[][] {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += chunkSize) {\n      chunks.push(array.slice(i, i + chunkSize));\n    }\n    return chunks;\n  }\n\n  // Helper method to clean up temporary files after processing\n  private async cleanupDocumentFile(document: BatchDocument, metadata: any) {\n    if (metadata?.tempFile && metadata?.filePath) {\n      try {\n        if (fs.existsSync(metadata.filePath)) {\n          await fs.promises.unlink(metadata.filePath);\n          console.log(`🗑️ Cleaned up temp file: ${metadata.filePath}`);\n        }\n      } catch (error) {\n        console.error(`❌ Failed to cleanup temp file ${metadata.filePath}:`, error);\n      }\n    }\n  }\n\n  // Public methods for external control\n  public async retryBatchJob(batchJobId: string) {\n    try {\n      const batchJob = await storage.getBatchJobById(batchJobId);\n      if (!batchJob) {\n        throw new Error(`Batch job not found: ${batchJobId}`);\n      }\n\n      // Reset batch job status\n      await storage.updateBatchJobStatus(batchJobId, 'pending');\n\n      // Reset failed documents to pending\n      const documents = await storage.getBatchDocuments(batchJobId);\n      const failedDocuments = documents.filter(doc => doc.status === 'failed');\n      \n      for (const doc of failedDocuments) {\n        await storage.updateBatchDocumentStatus(doc.id, 'pending');\n      }\n\n      // Create new queue job\n      await storage.createQueueJob({\n        jobType: 'batch_processing',\n        jobData: {\n          batchJobId: batchJob.id,\n          userId: batchJob.userId,\n          aiProvider: batchJob.aiProvider,\n          aiModel: batchJob.aiModel,\n          analysisType: batchJob.analysisType,\n          templateId: batchJob.templateId\n        },\n        priority: 2 // Higher priority for retries\n      });\n\n      console.log(`🔄 Retry initiated for batch job: ${batchJobId}`);\n    } catch (error) {\n      console.error(`❌ Error retrying batch job ${batchJobId}:`, error);\n      throw error;\n    }\n  }\n\n  public getStatus() {\n    return {\n      isProcessing: this.isProcessing,\n      pollingActive: this.processingInterval !== null,\n      maxConcurrentJobs: this.maxConcurrentJobs,\n      pollingInterval: this.pollingInterval\n    };\n  }\n}\n\n// Create singleton instance\nexport const batchProcessor = new BatchProcessor();\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('🛑 Shutting down batch processor...');\n  batchProcessor.stopPolling();\n});\n\nprocess.on('SIGINT', () => {\n  console.log('🛑 Shutting down batch processor...');\n  batchProcessor.stopPolling();\n});","size_bytes":12354},"client/src/pages/cookie-policy.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Cookie, Shield, BarChart, Cog, AlertTriangle } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CookieCategory {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  required: boolean;\n  enabled: boolean;\n  cookies: {\n    name: string;\n    purpose: string;\n    duration: string;\n    provider: string;\n  }[];\n}\n\nexport default function CookiePolicy() {\n  const { toast } = useToast();\n  \n  const [cookieCategories, setCookieCategories] = useState<CookieCategory[]>([\n    {\n      id: 'essential',\n      name: 'Cookies Essenciais',\n      description: 'Necessários para o funcionamento básico do site. Não podem ser desabilitados.',\n      icon: <Shield className=\"text-green-600\" size={20} />,\n      required: true,\n      enabled: true,\n      cookies: [\n        {\n          name: 'jusvalida_session',\n          purpose: 'Manter sessão do usuário logado',\n          duration: '24 horas',\n          provider: 'JusValida'\n        },\n        {\n          name: 'jusvalida_csrf',\n          purpose: 'Proteção contra ataques CSRF',\n          duration: 'Sessão',\n          provider: 'JusValida'\n        },\n        {\n          name: 'cookie_consent',\n          purpose: 'Armazenar preferências de cookies',\n          duration: '1 ano',\n          provider: 'JusValida'\n        }\n      ]\n    },\n    {\n      id: 'functional',\n      name: 'Cookies Funcionais',\n      description: 'Melhoram a experiência do usuário com funcionalidades personalizadas.',\n      icon: <Cog className=\"text-blue-600\" size={20} />,\n      required: false,\n      enabled: true,\n      cookies: [\n        {\n          name: 'user_preferences',\n          purpose: 'Salvar configurações de tema e idioma',\n          duration: '6 meses',\n          provider: 'JusValida'\n        },\n        {\n          name: 'ai_provider_selection',\n          purpose: 'Lembrar última seleção de provedor de IA',\n          duration: '30 dias',\n          provider: 'JusValida'\n        }\n      ]\n    },\n    {\n      id: 'analytics',\n      name: 'Cookies de Análise',\n      description: 'Coletam informações sobre como os usuários utilizam o site para melhorias.',\n      icon: <BarChart className=\"text-purple-600\" size={20} />,\n      required: false,\n      enabled: false,\n      cookies: [\n        {\n          name: 'jusvalida_analytics',\n          purpose: 'Análise de uso e performance do site',\n          duration: '2 anos',\n          provider: 'JusValida'\n        },\n        {\n          name: 'page_views',\n          purpose: 'Contar visualizações de páginas',\n          duration: '1 ano',\n          provider: 'JusValida'\n        }\n      ]\n    }\n  ]);\n\n  const handleCategoryToggle = (categoryId: string, enabled: boolean) => {\n    setCookieCategories(prev => \n      prev.map(category => \n        category.id === categoryId \n          ? { ...category, enabled }\n          : category\n      )\n    );\n  };\n\n  const handleSavePreferences = () => {\n    // Save cookie preferences to localStorage\n    const preferences = cookieCategories.reduce((acc, category) => {\n      acc[category.id] = category.enabled;\n      return acc;\n    }, {} as Record<string, boolean>);\n    \n    localStorage.setItem('cookie_preferences', JSON.stringify({\n      ...preferences,\n      timestamp: new Date().toISOString()\n    }));\n    \n    toast({\n      title: \"Preferências Salvas\",\n      description: \"Suas preferências de cookies foram atualizadas com sucesso.\",\n    });\n  };\n\n  const handleAcceptAll = () => {\n    setCookieCategories(prev => \n      prev.map(category => ({ ...category, enabled: true }))\n    );\n    handleSavePreferences();\n  };\n\n  const handleRejectOptional = () => {\n    setCookieCategories(prev => \n      prev.map(category => ({\n        ...category,\n        enabled: category.required\n      }))\n    );\n    handleSavePreferences();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-back-home\">\n                <ArrowLeft size={16} />\n                <span>Voltar ao Início</span>\n              </Button>\n            </Link>\n            <div className=\"flex items-center space-x-2\">\n              <Cookie className=\"text-primary\" size={20} />\n              <span className=\"text-lg font-semibold\">Política de Cookies</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          \n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-2xl flex items-center space-x-2\" data-testid=\"text-policy-title\">\n                  <Cookie className=\"text-primary\" />\n                  <span>Política de Cookies</span>\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Última atualização: {new Date().toLocaleDateString('pt-BR')}\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                \n                {/* Introduction */}\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-intro-section\">O que são Cookies?</h2>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Cookies são pequenos arquivos de texto que são armazenados no seu navegador quando você \n                    visita nosso site. Eles nos ajudam a fornecer uma experiência melhor, lembrar suas \n                    preferências e entender como você usa nossa plataforma.\n                  </p>\n                  \n                  <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertTriangle className=\"text-blue-600 mt-1\" size={20} />\n                      <div>\n                        <p className=\"font-medium text-blue-900 dark:text-blue-100\">Conformidade com LGPD</p>\n                        <p className=\"text-sm text-blue-700 dark:text-blue-200\">\n                          Esta política está em conformidade com a Lei Geral de Proteção de Dados (LGPD) \n                          e garante transparência sobre o uso de cookies em nossa plataforma.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </section>\n\n                <Separator />\n\n                {/* Cookie Categories */}\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-4\" data-testid=\"text-categories-section\">Categorias de Cookies</h2>\n                  \n                  <div className=\"space-y-6\">\n                    {cookieCategories.map((category) => (\n                      <div key={category.id} className=\"border border-border rounded-lg p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            {category.icon}\n                            <div>\n                              <h3 className=\"font-semibold text-lg\">{category.name}</h3>\n                              <p className=\"text-muted-foreground text-sm\">{category.description}</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            {category.required && (\n                              <Badge variant=\"outline\" className=\"text-xs\">Obrigatório</Badge>\n                            )}\n                            <Switch\n                              checked={category.enabled}\n                              onCheckedChange={(enabled) => handleCategoryToggle(category.id, enabled)}\n                              disabled={category.required}\n                              data-testid={`switch-${category.id}`}\n                            />\n                          </div>\n                        </div>\n                        \n                        {/* Cookie Details */}\n                        <div className=\"space-y-3\">\n                          <h4 className=\"font-medium text-sm\">Cookies nesta categoria:</h4>\n                          <div className=\"grid grid-cols-1 gap-3\">\n                            {category.cookies.map((cookie, index) => (\n                              <div key={index} className=\"bg-muted p-3 rounded border\">\n                                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-2 text-sm\">\n                                  <div>\n                                    <span className=\"font-medium\">Nome:</span>\n                                    <p className=\"text-muted-foreground\">{cookie.name}</p>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium\">Finalidade:</span>\n                                    <p className=\"text-muted-foreground\">{cookie.purpose}</p>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium\">Duração:</span>\n                                    <p className=\"text-muted-foreground\">{cookie.duration}</p>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium\">Provedor:</span>\n                                    <p className=\"text-muted-foreground\">{cookie.provider}</p>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </section>\n\n                <Separator />\n\n                {/* Third Party Cookies */}\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-third-party-section\">Cookies de Terceiros</h2>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Nossa plataforma pode utilizar serviços de terceiros que definem seus próprios cookies:\n                  </p>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"border border-border rounded p-4\">\n                      <h4 className=\"font-medium\">Stripe (Pagamentos)</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Para processamento seguro de pagamentos. \n                        <a href=\"https://stripe.com/privacy\" className=\"text-primary hover:underline ml-1\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          Ver política de privacidade\n                        </a>\n                      </p>\n                    </div>\n                    \n                    <div className=\"border border-border rounded p-4\">\n                      <h4 className=\"font-medium\">Replit (Infraestrutura)</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Para hospedagem e funcionamento da plataforma.\n                        <a href=\"https://replit.com/privacy\" className=\"text-primary hover:underline ml-1\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          Ver política de privacidade\n                        </a>\n                      </p>\n                    </div>\n                  </div>\n                </section>\n\n                <Separator />\n\n                {/* Managing Cookies */}\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-manage-section\">Como Gerenciar Cookies</h2>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium mb-2\">1. Através desta página</h4>\n                      <p className=\"text-muted-foreground text-sm\">\n                        Use os controles acima para ativar/desativar categorias específicas de cookies.\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium mb-2\">2. Configurações do navegador</h4>\n                      <p className=\"text-muted-foreground text-sm mb-2\">\n                        Você pode gerenciar cookies diretamente nas configurações do seu navegador:\n                      </p>\n                      <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                        <li>• <a href=\"https://support.google.com/chrome/answer/95647\" className=\"text-primary hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome</a></li>\n                        <li>• <a href=\"https://support.mozilla.org/en-US/kb/cookies-information-websites-store-on-your-computer\" className=\"text-primary hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox</a></li>\n                        <li>• <a href=\"https://support.apple.com/guide/safari/manage-cookies-and-website-data-sfri11471/mac\" className=\"text-primary hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">Safari</a></li>\n                        <li>• <a href=\"https://support.microsoft.com/en-us/help/4027947/microsoft-edge-delete-cookies\" className=\"text-primary hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">Edge</a></li>\n                      </ul>\n                    </div>\n                    \n                    <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg\">\n                      <p className=\"text-sm text-amber-800 dark:text-amber-200\">\n                        <strong>Importante:</strong> Desabilitar cookies essenciais pode afetar o funcionamento \n                        da plataforma e impedir o acesso a certas funcionalidades.\n                      </p>\n                    </div>\n                  </div>\n                </section>\n\n                <Separator />\n\n                {/* Contact */}\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-contact-section\">Contato</h2>\n                  <p className=\"text-muted-foreground\">\n                    Se você tiver dúvidas sobre esta política de cookies, entre em contato conosco:\n                  </p>\n                  <div className=\"mt-3 space-y-1 text-sm\">\n                    <p><strong>E-mail:</strong> dpo@jusvalida.com.br</p>\n                    <p><strong>Telefone:</strong> +55 (11) 3000-0001</p>\n                  </div>\n                </section>\n\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar - Cookie Controls */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"sticky top-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\" data-testid=\"text-preferences-title\">Suas Preferências</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  \n                  {/* Quick Stats */}\n                  <div className=\"bg-muted p-3 rounded text-center\">\n                    <p className=\"text-2xl font-bold text-primary\">\n                      {cookieCategories.filter(c => c.enabled).length}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      de {cookieCategories.length} categorias ativas\n                    </p>\n                  </div>\n                  \n                  {/* Quick Actions */}\n                  <div className=\"space-y-2\">\n                    <Button \n                      onClick={handleAcceptAll}\n                      className=\"w-full\"\n                      data-testid=\"button-accept-all\"\n                    >\n                      Aceitar Todos\n                    </Button>\n                    \n                    <Button \n                      onClick={handleRejectOptional}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      data-testid=\"button-reject-optional\"\n                    >\n                      Apenas Essenciais\n                    </Button>\n                    \n                    <Button \n                      onClick={handleSavePreferences}\n                      variant=\"secondary\"\n                      className=\"w-full\"\n                      data-testid=\"button-save-preferences\"\n                    >\n                      Salvar Preferências\n                    </Button>\n                  </div>\n                  \n                  <Separator />\n                  \n                  {/* Category Summary */}\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-sm\">Resumo por categoria:</h4>\n                    {cookieCategories.map((category) => (\n                      <div key={category.id} className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">{category.name}</span>\n                        <Badge variant={category.enabled ? \"default\" : \"secondary\"} className=\"text-xs\">\n                          {category.enabled ? \"Ativo\" : \"Inativo\"}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                  \n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18337},"client/src/pages/privacy-policy.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { ArrowLeft, Shield, Mail, Phone, AlertTriangle } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-back-home\">\n                <ArrowLeft size={16} />\n                <span>Voltar ao Início</span>\n              </Button>\n            </Link>\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"text-primary\" size={20} />\n              <span className=\"text-lg font-semibold\">Política de Privacidade</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\" data-testid=\"text-policy-title\">\n              Política de Privacidade - JusValida\n            </CardTitle>\n            <p className=\"text-muted-foreground\">\n              Última atualização: {new Date().toLocaleDateString('pt-BR')}\n            </p>\n          </CardHeader>\n          <CardContent className=\"prose prose-slate max-w-none space-y-6\">\n            \n            {/* Identificação do Controlador - Art. 9º LGPD */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-controller-section\">1. Identificação do Controlador</h2>\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <h3 className=\"font-medium mb-2\">JusValida - Análise Jurídica por IA</h3>\n                <p><strong>CNPJ:</strong> 12.345.678/0001-90</p>\n                <p><strong>Endereço:</strong> Av. Paulista, 1000 - 10º andar, Bela Vista, São Paulo - SP, CEP 01310-100</p>\n                <p><strong>E-mail:</strong> contato@jusvalida.com.br</p>\n                <p><strong>Telefone:</strong> +55 (11) 3000-0000</p>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Dados Pessoais Coletados */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-data-collection-section\">2. Dados Pessoais Coletados</h2>\n              <p className=\"mb-4\">Coletamos os seguintes dados pessoais:</p>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium\">2.1 Dados de Identificação</h3>\n                  <ul className=\"list-disc list-inside ml-4 space-y-1 text-muted-foreground\">\n                    <li>Nome completo</li>\n                    <li>E-mail</li>\n                    <li>Nome de usuário</li>\n                    <li>Data e hora de cadastro</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"font-medium\">2.2 Dados de Uso da Plataforma</h3>\n                  <ul className=\"list-disc list-inside ml-4 space-y-1 text-muted-foreground\">\n                    <li>Documentos analisados (conteúdo e metadados)</li>\n                    <li>Histórico de análises realizadas</li>\n                    <li>Configurações de preferências</li>\n                    <li>Logs de acesso e utilização</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"font-medium\">2.3 Dados Técnicos</h3>\n                  <ul className=\"list-disc list-inside ml-4 space-y-1 text-muted-foreground\">\n                    <li>Endereço IP</li>\n                    <li>Informações do navegador e dispositivo</li>\n                    <li>Cookies e tecnologias similares</li>\n                    <li>Data e hora de acesso</li>\n                  </ul>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Finalidades do Tratamento */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-purposes-section\">3. Finalidades do Tratamento</h2>\n              <p className=\"mb-4\">Seus dados são tratados para as seguintes finalidades:</p>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium\">Prestação dos Serviços</h4>\n                    <p className=\"text-muted-foreground\">Análise de documentos jurídicos, geração de relatórios, histórico de análises</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium\">Gestão da Conta</h4>\n                    <p className=\"text-muted-foreground\">Autenticação, controle de acesso, gerenciamento de créditos</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium\">Comunicação</h4>\n                    <p className=\"text-muted-foreground\">Notificações de serviço, suporte técnico, atualizações importantes</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium\">Melhoria dos Serviços</h4>\n                    <p className=\"text-muted-foreground\">Análise estatística, desenvolvimento de funcionalidades, otimização da plataforma</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <h4 className=\"font-medium\">Cumprimento de Obrigações Legais</h4>\n                    <p className=\"text-muted-foreground\">Atendimento a requisições judiciais, fiscais e regulamentares</p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Base Legal */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-legal-basis-section\">4. Base Legal para o Tratamento</h2>\n              <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                <p className=\"mb-3\">O tratamento dos seus dados pessoais é fundamentado nas seguintes bases legais da LGPD:</p>\n                <ul className=\"space-y-2\">\n                  <li><strong>Art. 7º, I:</strong> Consentimento do titular (cadastro e uso voluntário)</li>\n                  <li><strong>Art. 7º, V:</strong> Execução de contrato (prestação dos serviços)</li>\n                  <li><strong>Art. 7º, VI:</strong> Cumprimento de obrigação legal ou regulatória</li>\n                  <li><strong>Art. 7º, IX:</strong> Legítimo interesse (melhoria dos serviços)</li>\n                </ul>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Direitos dos Titulares */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-rights-section\">5. Seus Direitos (Art. 18º da LGPD)</h2>\n              <p className=\"mb-4\">Você tem os seguintes direitos sobre seus dados pessoais:</p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"border border-border rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">Confirmação e Acesso</h4>\n                  <p className=\"text-sm text-muted-foreground\">Confirmar a existência e acessar seus dados pessoais</p>\n                </div>\n                \n                <div className=\"border border-border rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">Correção</h4>\n                  <p className=\"text-sm text-muted-foreground\">Corrigir dados incompletos, inexatos ou desatualizados</p>\n                </div>\n                \n                <div className=\"border border-border rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">Eliminação</h4>\n                  <p className=\"text-sm text-muted-foreground\">Solicitar a exclusão de dados desnecessários ou excessivos</p>\n                </div>\n                \n                <div className=\"border border-border rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">Portabilidade</h4>\n                  <p className=\"text-sm text-muted-foreground\">Portabilidade dos dados para outro fornecedor</p>\n                </div>\n                \n                <div className=\"border border-border rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">Oposição</h4>\n                  <p className=\"text-sm text-muted-foreground\">Opor-se ao tratamento realizado com base no legítimo interesse</p>\n                </div>\n                \n                <div className=\"border border-border rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">Revogação</h4>\n                  <p className=\"text-sm text-muted-foreground\">Revogar o consentimento para tratamentos específicos</p>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Processadores de Dados */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-processors-section\">6. Processadores de Dados e Transferências Internacionais</h2>\n              <p className=\"mb-4\">Para prestação dos nossos serviços, contamos com processadores de dados terceiros:</p>\n              \n              <div className=\"space-y-4\">\n                <div className=\"border border-orange-200 dark:border-orange-800 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-orange-900 dark:text-orange-100 mb-2\">🤖 Provedores de Inteligência Artificial</h3>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"bg-orange-50 dark:bg-orange-950 p-3 rounded\">\n                      <h4 className=\"font-medium\">OpenAI Inc. (Estados Unidos)</h4>\n                      <p className=\"text-muted-foreground mt-1\">\n                        <strong>Finalidade:</strong> Análise de documentos jurídicos via GPT-4 e modelos relacionados<br/>\n                        <strong>Dados processados:</strong> Conteúdo dos documentos, metadados de análise<br/>\n                        <strong>Base legal:</strong> Execução de contrato e legítimo interesse<br/>\n                        <strong>Retenção:</strong> OpenAI não retém dados conforme política zero-retention<br/>\n                        <strong>Garantias:</strong> Cláusulas contratuais padrão, certificação SOC 2\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-orange-50 dark:bg-orange-950 p-3 rounded\">\n                      <h4 className=\"font-medium\">Anthropic PBC (Estados Unidos)</h4>\n                      <p className=\"text-muted-foreground mt-1\">\n                        <strong>Finalidade:</strong> Análise de documentos jurídicos via Claude e modelos relacionados<br/>\n                        <strong>Dados processados:</strong> Conteúdo dos documentos, metadados de análise<br/>\n                        <strong>Base legal:</strong> Execução de contrato e legítimo interesse<br/>\n                        <strong>Retenção:</strong> Dados não são utilizados para treinamento<br/>\n                        <strong>Garantias:</strong> Cláusulas contratuais padrão, certificação SOC 2\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-orange-50 dark:bg-orange-950 p-3 rounded\">\n                      <h4 className=\"font-medium\">Google LLC (Estados Unidos)</h4>\n                      <p className=\"text-muted-foreground mt-1\">\n                        <strong>Finalidade:</strong> Análise de documentos jurídicos via Gemini<br/>\n                        <strong>Dados processados:</strong> Conteúdo dos documentos, metadados de análise<br/>\n                        <strong>Base legal:</strong> Execução de contrato e legítimo interesse<br/>\n                        <strong>Retenção:</strong> Dados não são utilizados para treinamento<br/>\n                        <strong>Garantias:</strong> Cláusulas contratuais padrão, adequação GDPR\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">🏗️ Infraestrutura e Serviços</h3>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"bg-blue-50 dark:bg-blue-950 p-3 rounded\">\n                      <h4 className=\"font-medium\">Replit Inc. (Estados Unidos)</h4>\n                      <p className=\"text-muted-foreground mt-1\">\n                        <strong>Finalidade:</strong> Hospedagem da aplicação e banco de dados<br/>\n                        <strong>Dados processados:</strong> Dados de usuários, documentos, análises<br/>\n                        <strong>Base legal:</strong> Execução de contrato<br/>\n                        <strong>Garantias:</strong> Certificação SOC 2, criptografia em trânsito e repouso\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-blue-50 dark:bg-blue-950 p-3 rounded\">\n                      <h4 className=\"font-medium\">Stripe Inc. (Estados Unidos)</h4>\n                      <p className=\"text-muted-foreground mt-1\">\n                        <strong>Finalidade:</strong> Processamento de pagamentos<br/>\n                        <strong>Dados processados:</strong> Dados de pagamento, transações<br/>\n                        <strong>Base legal:</strong> Execução de contrato<br/>\n                        <strong>Garantias:</strong> Certificação PCI DSS Level 1, adequação GDPR\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg mt-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <AlertTriangle className=\"text-amber-600 mt-1\" size={20} />\n                  <div>\n                    <p className=\"font-medium text-amber-900 dark:text-amber-100\">Transferências Internacionais</p>\n                    <p className=\"text-sm text-amber-700 dark:text-amber-200 mt-1\">\n                      Alguns processadores estão localizados fora do Brasil. Todas as transferências são \n                      realizadas com base em cláusulas contratuais padrão aprovadas pela ANPD e garantias \n                      adequadas de proteção conforme Art. 33 da LGPD.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Segurança */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-security-section\">7. Segurança dos Dados</h2>\n              <p className=\"mb-4\">Adotamos medidas técnicas e organizacionais adequadas para proteger seus dados:</p>\n              \n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>• Criptografia de dados em trânsito e em repouso</li>\n                <li>• Controles de acesso baseados em função</li>\n                <li>• Monitoramento e auditoria contínua</li>\n                <li>• Backup e recuperação de dados</li>\n                <li>• Treinamento regular da equipe</li>\n              </ul>\n            </section>\n\n            <Separator />\n\n            {/* Retenção */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-retention-section\">8. Retenção de Dados</h2>\n              <div className=\"space-y-3\">\n                <p><strong>Dados de conta:</strong> Mantidos enquanto a conta estiver ativa ou conforme necessário para prestação dos serviços</p>\n                <p><strong>Documentos analisados:</strong> Armazenados por até 2 anos após a última análise, salvo solicitação de exclusão</p>\n                <p><strong>Logs de acesso:</strong> Mantidos por 6 meses para fins de segurança</p>\n                <p><strong>Dados para cumprimento legal:</strong> Conforme prazo estabelecido pela legislação aplicável</p>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Contato */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-contact-section\">9. Contato e Exercício de Direitos</h2>\n              \n              <div className=\"bg-muted p-6 rounded-lg\">\n                <h3 className=\"font-medium mb-4\">Encarregado de Proteção de Dados (DPO)</h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Mail className=\"text-primary\" size={20} />\n                    <div>\n                      <p className=\"font-medium\">E-mail</p>\n                      <p className=\"text-muted-foreground\">dpo@jusvalida.com.br</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Phone className=\"text-primary\" size={20} />\n                    <div>\n                      <p className=\"font-medium\">Telefone</p>\n                      <p className=\"text-muted-foreground\">+55 (11) 3000-0001</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950 rounded\">\n                  <p className=\"text-sm\">\n                    <strong>Prazo de resposta:</strong> Até 15 dias úteis conforme Art. 19º da LGPD\n                  </p>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Alterações */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-changes-section\">10. Alterações nesta Política</h2>\n              <p className=\"text-muted-foreground\">\n                Esta política pode ser atualizada periodicamente. Notificaremos sobre alterações significativas \n                por e-mail e através de aviso na plataforma. O uso continuado dos serviços após as alterações \n                constitui aceitação da nova política.\n              </p>\n            </section>\n\n            <Separator />\n\n            {/* ANPD */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-anpd-section\">11. Autoridade Nacional de Proteção de Dados</h2>\n              <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg\">\n                <p className=\"mb-2\">\n                  Em caso de descumprimento desta política, você pode registrar reclamação na ANPD:\n                </p>\n                <p><strong>Website:</strong> www.gov.br/anpd</p>\n                <p><strong>E-mail:</strong> faleconosco@anpd.gov.br</p>\n              </div>\n            </section>\n\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20391},"client/src/pages/terms-of-service.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Scale, AlertTriangle, Shield, FileText, CreditCard } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function TermsOfService() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background/95 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-back-home\">\n                <ArrowLeft size={16} />\n                <span>Voltar ao Início</span>\n              </Button>\n            </Link>\n            <div className=\"flex items-center space-x-2\">\n              <Scale className=\"text-primary\" size={20} />\n              <span className=\"text-lg font-semibold\">Termos de Uso</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center space-x-2\" data-testid=\"text-terms-title\">\n              <Scale className=\"text-primary\" />\n              <span>Termos de Uso - JusValida</span>\n            </CardTitle>\n            <p className=\"text-muted-foreground\">\n              Última atualização: {new Date().toLocaleDateString('pt-BR')}\n            </p>\n            <div className=\"flex items-center space-x-2 mt-2\">\n              <Badge variant=\"outline\">Versão 1.0</Badge>\n              <Badge variant=\"secondary\">Vigente</Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"prose prose-slate max-w-none space-y-6\">\n            \n            {/* Acceptance */}\n            <section>\n              <div className=\"bg-blue-50 dark:bg-blue-950 p-6 rounded-lg border-l-4 border-blue-500\">\n                <div className=\"flex items-start space-x-3\">\n                  <AlertTriangle className=\"text-blue-600 mt-1\" size={20} />\n                  <div>\n                    <h2 className=\"text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n                      Aceitação dos Termos\n                    </h2>\n                    <p className=\"text-blue-800 dark:text-blue-200 text-sm\">\n                      Ao criar uma conta e utilizar os serviços do JusValida, você aceita integralmente \n                      estes termos de uso e nossa Política de Privacidade. Estes documentos constituem \n                      um acordo legal vinculativo entre você e o JusValida.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Company Info */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-company-section\">1. Identificação da Empresa</h2>\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <h3 className=\"font-medium mb-2\">JusValida - Análise Jurídica por IA</h3>\n                <p><strong>CNPJ:</strong> 12.345.678/0001-90</p>\n                <p><strong>Endereço:</strong> Av. Paulista, 1000 - 10º andar, Bela Vista, São Paulo - SP, CEP 01310-100</p>\n                <p><strong>E-mail:</strong> contato@jusvalida.com.br</p>\n                <p><strong>Telefone:</strong> +55 (11) 3000-0000</p>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Services */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3 flex items-center space-x-2\" data-testid=\"text-services-section\">\n                <FileText className=\"text-primary\" size={20} />\n                <span>2. Descrição dos Serviços</span>\n              </h2>\n              \n              <p className=\"mb-4 text-muted-foreground\">\n                O JusValida é uma plataforma digital que oferece análise automatizada de documentos jurídicos \n                utilizando inteligência artificial avançada.\n              </p>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium text-lg mb-2\">2.1 Serviços Oferecidos</h3>\n                  <ul className=\"space-y-2 text-muted-foreground\">\n                    <li>• Análise automatizada de contratos, petições e documentos jurídicos</li>\n                    <li>• Identificação de falhas críticas e oportunidades de melhoria</li>\n                    <li>• Verificação de compliance legal e regulamentário</li>\n                    <li>• Relatórios detalhados com recomendações especializadas</li>\n                    <li>• Análise de riscos jurídicos em documentos</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium text-lg mb-2\">2.2 Limitações dos Serviços</h3>\n                  <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg border-l-4 border-amber-500\">\n                    <p className=\"text-amber-800 dark:text-amber-200 text-sm\">\n                      <strong>IMPORTANTE:</strong> Os serviços do JusValida são ferramentas de apoio e não \n                      substituem o aconselhamento jurídico profissional. As análises são geradas por IA e \n                      podem conter imprecisões ou limitações. Recomendamos sempre a revisão por advogados \n                      qualificados antes de tomar decisões legais importantes.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* User Eligibility */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-eligibility-section\">3. Elegibilidade e Cadastro</h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium mb-2\">3.1 Requisitos para Uso</h3>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Ter pelo menos 18 anos de idade</li>\n                    <li>• Possuir capacidade jurídica plena</li>\n                    <li>• Fornecer informações verdadeiras e atualizadas no cadastro</li>\n                    <li>• Concordar com estes termos e a Política de Privacidade</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">3.2 Responsabilidades do Usuário</h3>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Manter suas credenciais de acesso seguras</li>\n                    <li>• Não compartilhar sua conta com terceiros</li>\n                    <li>• Notificar imediatamente sobre uso não autorizado</li>\n                    <li>• Manter seus dados de cadastro atualizados</li>\n                  </ul>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Credits System */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3 flex items-center space-x-2\" data-testid=\"text-credits-section\">\n                <CreditCard className=\"text-primary\" size={20} />\n                <span>4. Sistema de Créditos</span>\n              </h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium mb-2\">4.1 Funcionamento dos Créditos</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Nossos serviços utilizam um sistema de créditos. Cada análise de documento consome \n                    uma quantidade específica de créditos baseada na complexidade e no provedor de IA utilizado.\n                  </p>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                    <div className=\"border border-border rounded p-3\">\n                      <h4 className=\"font-medium\">Análise Geral</h4>\n                      <p className=\"text-muted-foreground\">1-3 créditos</p>\n                    </div>\n                    <div className=\"border border-border rounded p-3\">\n                      <h4 className=\"font-medium\">Análise Especializada</h4>\n                      <p className=\"text-muted-foreground\">3-7 créditos</p>\n                    </div>\n                    <div className=\"border border-border rounded p-3\">\n                      <h4 className=\"font-medium\">Análise Premium</h4>\n                      <p className=\"text-muted-foreground\">5-15 créditos</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">4.2 Política de Créditos</h3>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Créditos gratuitos: 10 créditos para novos usuários</li>\n                    <li>• Validade: créditos não expiram enquanto a conta estiver ativa</li>\n                    <li>• Reembolso: créditos não utilizados não são reembolsáveis</li>\n                    <li>• Transferência: créditos não podem ser transferidos entre contas</li>\n                  </ul>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Usage Rules */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3 flex items-center space-x-2\" data-testid=\"text-usage-section\">\n                <Shield className=\"text-primary\" size={20} />\n                <span>5. Regras de Uso Aceitável</span>\n              </h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium mb-2 text-green-700 dark:text-green-300\">5.1 Usos Permitidos</h3>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Análise de documentos jurídicos legítimos</li>\n                    <li>• Revisão de contratos e petições próprias ou autorizadas</li>\n                    <li>• Pesquisa e educação jurídica</li>\n                    <li>• Uso profissional por advogados e escritórios</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2 text-red-700 dark:text-red-300\">5.2 Usos Proibidos</h3>\n                  <div className=\"bg-red-50 dark:bg-red-950 p-4 rounded-lg border-l-4 border-red-500\">\n                    <ul className=\"space-y-1 text-red-800 dark:text-red-200\">\n                      <li>• Análise de documentos obtidos ilegalmente</li>\n                      <li>• Violação de confidencialidade ou sigilo profissional</li>\n                      <li>• Uso para atividades fraudulentas ou ilegais</li>\n                      <li>• Compartilhamento de documentos sigilosos sem autorização</li>\n                      <li>• Tentativas de engenharia reversa da plataforma</li>\n                      <li>• Spam, abuso ou uso excessivo dos recursos</li>\n                      <li>• Criação de múltiplas contas para burlar limites</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Intellectual Property */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-ip-section\">6. Propriedade Intelectual</h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium mb-2\">6.1 Propriedade do JusValida</h3>\n                  <p className=\"text-muted-foreground\">\n                    Todos os direitos de propriedade intelectual sobre a plataforma, incluindo código, \n                    design, algoritmos, marca e conteúdo, pertencem ao JusValida ou seus licenciadores.\n                  </p>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">6.2 Seus Documentos</h3>\n                  <p className=\"text-muted-foreground\">\n                    Você mantém todos os direitos sobre os documentos que carrega na plataforma. \n                    Concedemos apenas a licença necessária para processar e analisar seus arquivos, \n                    conforme descrito em nossa Política de Privacidade.\n                  </p>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">6.3 Relatórios e Análises</h3>\n                  <p className=\"text-muted-foreground\">\n                    Os relatórios gerados pela nossa IA são de sua propriedade, mas podem conter \n                    elementos protegidos por direitos autorais do JusValida (formatação, metodologia, etc.).\n                  </p>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Liability */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-liability-section\">7. Responsabilidades e Limitações</h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium mb-2\">7.1 Natureza dos Serviços</h3>\n                  <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg\">\n                    <p className=\"text-amber-800 dark:text-amber-200 text-sm\">\n                      <strong>DISCLAMER IMPORTANTE:</strong> O JusValida fornece análises automatizadas \n                      baseadas em inteligência artificial. Estas análises são ferramentas de apoio e não \n                      constituem aconselhamento jurídico formal. Não garantimos a precisão absoluta das \n                      análises e recomendamos sempre validação por profissionais qualificados.\n                    </p>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">7.2 Limitação de Responsabilidade</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Nossa responsabilidade está limitada ao valor pago pelos serviços no período de \n                    12 meses anteriores ao evento. Não nos responsabilizamos por:\n                  </p>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Decisões tomadas com base nas análises</li>\n                    <li>• Danos indiretos ou consequenciais</li>\n                    <li>• Perda de lucros ou oportunidades</li>\n                    <li>• Falhas em decisões judiciais ou administrativas</li>\n                  </ul>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Data Privacy */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-privacy-section\">8. Proteção de Dados e Privacidade</h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium mb-2\">8.1 Compromisso com a LGPD</h3>\n                  <p className=\"text-muted-foreground\">\n                    Levamos a proteção de dados pessoais muito a sério e cumprimos integralmente a \n                    Lei Geral de Proteção de Dados (LGPD). Para detalhes completos, consulte nossa \n                    <Link href=\"/privacy-policy\" className=\"text-primary hover:underline ml-1\">\n                      Política de Privacidade\n                    </Link>.\n                  </p>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">8.2 Confidencialidade</h3>\n                  <p className=\"text-muted-foreground\">\n                    Implementamos medidas técnicas e organizacionais adequadas para proteger a \n                    confidencialidade dos documentos analisados. Nossos funcionários e prestadores \n                    estão sujeitos a rigorosos acordos de confidencialidade.\n                  </p>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Termination */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-termination-section\">9. Encerramento da Conta</h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium mb-2\">9.1 Encerramento pelo Usuário</h3>\n                  <p className=\"text-muted-foreground\">\n                    Você pode encerrar sua conta a qualquer momento através das configurações da conta \n                    ou entrando em contato conosco. Créditos não utilizados não são reembolsáveis.\n                  </p>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">9.2 Encerramento pelo JusValida</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Podemos suspender ou encerrar contas em caso de violação destes termos, incluindo:\n                  </p>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Uso indevido da plataforma</li>\n                    <li>• Atividades fraudulentas ou ilegais</li>\n                    <li>• Violação de direitos de terceiros</li>\n                    <li>• Não pagamento de valores devidos</li>\n                  </ul>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Changes */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-changes-section\">10. Alterações nos Termos</h2>\n              <div className=\"space-y-3\">\n                <p className=\"text-muted-foreground\">\n                  Podemos atualizar estes termos periodicamente para refletir mudanças em nossos \n                  serviços, legislação aplicável ou práticas empresariais.\n                </p>\n                <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Processo de Notificação</h4>\n                  <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                    <li>• Notificação por e-mail para alterações significativas</li>\n                    <li>• Aviso na plataforma por 30 dias</li>\n                    <li>• Entrada em vigor após 30 dias da notificação</li>\n                    <li>• Direito de encerrar a conta antes da vigência</li>\n                  </ul>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Governing Law */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-law-section\">11. Lei Aplicável e Foro</h2>\n              \n              <div className=\"bg-muted p-4 rounded-lg\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"font-medium\">Lei Aplicável</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Estes termos são regidos pela legislação brasileira, especialmente:\n                    </p>\n                    <ul className=\"text-sm text-muted-foreground mt-2 space-y-1\">\n                      <li>• Código de Defesa do Consumidor (Lei 8.078/90)</li>\n                      <li>• Lei Geral de Proteção de Dados (Lei 13.709/18)</li>\n                      <li>• Marco Civil da Internet (Lei 12.965/14)</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium\">Foro Competente</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Fica eleito o foro da Comarca de São Paulo - SP para dirimir quaisquer \n                      controvérsias decorrentes destes termos, renunciando as partes a qualquer outro.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            <Separator />\n\n            {/* Contact */}\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-contact-section\">12. Contato</h2>\n              \n              <div className=\"bg-muted p-6 rounded-lg\">\n                <p className=\"mb-4\">\n                  Para dúvidas, sugestões ou exercício de direitos relacionados a estes termos, \n                  entre em contato conosco:\n                </p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <h4 className=\"font-medium\">Atendimento Geral</h4>\n                    <p>📧 contato@jusvalida.com.br</p>\n                    <p>📞 +55 (11) 3000-0000</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium\">Questões Legais e Privacidade</h4>\n                    <p>📧 dpo@jusvalida.com.br</p>\n                    <p>📞 +55 (11) 3000-0001</p>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950 rounded\">\n                  <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                    <strong>Horário de atendimento:</strong> Segunda a sexta, das 9h às 18h (horário de Brasília)\n                  </p>\n                </div>\n              </div>\n            </section>\n\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":22151},"client/src/components/ui/cookie-banner.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from '@/components/ui/dialog';\nimport { \n  Cookie, \n  Settings, \n  Shield, \n  BarChart, \n  Cog, \n  ExternalLink,\n  X\n} from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useCookiePreferences, CookiePreferences } from '@/hooks/use-cookie-preferences';\n\ninterface CookieCategory {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  required: boolean;\n  enabled: boolean;\n  details: string;\n}\n\nexport function CookieBanner() {\n  const { \n    showBanner, \n    hideBanner, \n    updatePreferences, \n    cookieSettingsOpen, \n    setCookieSettingsOpen,\n    preferences \n  } = useCookiePreferences();\n  \n  const [cookieCategories, setCookieCategories] = useState<CookieCategory[]>([\n    {\n      id: 'essential',\n      name: 'Cookies Essenciais',\n      description: 'Necessários para o funcionamento básico do site.',\n      details: 'Incluem cookies de sessão, autenticação e segurança. Não podem ser desabilitados.',\n      icon: <Shield className=\"text-green-600\" size={16} />,\n      required: true,\n      enabled: true,\n    },\n    {\n      id: 'functional',\n      name: 'Cookies Funcionais',\n      description: 'Melhoram a experiência com funcionalidades personalizadas.',\n      details: 'Salvam suas preferências como tema, idioma e configurações da interface.',\n      icon: <Cog className=\"text-blue-600\" size={16} />,\n      required: false,\n      enabled: false,\n    },\n    {\n      id: 'analytics',\n      name: 'Cookies de Análise',\n      description: 'Coletam informações sobre uso do site para melhorias.',\n      details: 'Ajudam a entender como você usa o site para oferecermos uma experiência melhor.',\n      icon: <BarChart className=\"text-purple-600\" size={16} />,\n      required: false,\n      enabled: false,\n    },\n  ]);\n\n  // Initialize categories based on current preferences\n  useEffect(() => {\n    if (preferences) {\n      setCookieCategories(prev => prev.map(category => ({\n        ...category,\n        enabled: category.required || Boolean(preferences[category.id as keyof Omit<CookiePreferences, 'timestamp' | 'version'>])\n      })));\n    }\n  }, [preferences]);\n\n  const handleCategoryToggle = (categoryId: string, enabled: boolean) => {\n    setCookieCategories(prev => \n      prev.map(category => \n        category.id === categoryId \n          ? { ...category, enabled }\n          : category\n      )\n    );\n  };\n\n  const savePreferences = (prefs?: Partial<CookiePreferences>) => {\n    const finalPreferences: Partial<CookiePreferences> = {\n      functional: prefs?.functional ?? cookieCategories.find(c => c.id === 'functional')?.enabled ?? false,\n      analytics: prefs?.analytics ?? cookieCategories.find(c => c.id === 'analytics')?.enabled ?? false,\n    };\n\n    updatePreferences(finalPreferences);\n    \n    // Update local categories\n    setCookieCategories(prev => prev.map(category => ({\n      ...category,\n      enabled: category.required || Boolean(finalPreferences[category.id as keyof CookiePreferences] ?? false)\n    })));\n  };\n\n  const handleAcceptAll = () => {\n    savePreferences({\n      functional: true,\n      analytics: true\n    });\n  };\n\n  const handleAcceptEssential = () => {\n    savePreferences({\n      functional: false,\n      analytics: false\n    });\n  };\n\n  const handleSaveCustom = () => {\n    savePreferences();\n  };\n\n  const handleRejectAll = () => {\n    // Show only essential cookies\n    setCookieCategories(prev => prev.map(category => ({\n      ...category,\n      enabled: category.required\n    })));\n    savePreferences({\n      functional: false,\n      analytics: false\n    });\n  };\n\n  // Don't render if banner shouldn't be shown\n  if (!showBanner) return null;\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-50 p-4\" data-testid=\"cookie-banner\">\n      <Card className=\"max-w-6xl mx-auto border-2 shadow-xl bg-background/95 backdrop-blur-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Cookie className=\"text-primary\" size={24} />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\" data-testid=\"text-banner-title\">\n                  Consentimento de Cookies\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Conforme a LGPD (Lei Geral de Proteção de Dados)\n                </p>\n              </div>\n            </div>\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={hideBanner}\n              className=\"h-8 w-8 p-0\"\n              data-testid=\"button-close-banner\"\n            >\n              <X size={16} />\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 items-start\">\n            \n            {/* Main Message */}\n            <div className=\"lg:col-span-2 space-y-4\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-banner-description\">\n                Utilizamos cookies para melhorar sua experiência, personalizar conteúdo e analisar \n                o uso do site. Você pode escolher quais categorias aceitar ou configurar suas \n                preferências detalhadamente.\n              </p>\n              \n              {/* Quick Category Overview */}\n              <div className=\"flex flex-wrap gap-2\">\n                {cookieCategories.map((category) => (\n                  <Badge\n                    key={category.id}\n                    variant={category.enabled ? \"default\" : \"secondary\"}\n                    className=\"text-xs flex items-center space-x-1\"\n                  >\n                    {category.icon}\n                    <span>{category.name}</span>\n                    {category.required && <span className=\"text-xs opacity-75\">(Obrigatório)</span>}\n                  </Badge>\n                ))}\n              </div>\n              \n              {/* Links */}\n              <div className=\"flex flex-wrap items-center gap-4 text-sm\">\n                <Link href=\"/cookie-policy\" className=\"text-primary hover:underline flex items-center space-x-1\" data-testid=\"link-cookie-policy\">\n                  <span>Política de Cookies</span>\n                  <ExternalLink size={12} />\n                </Link>\n                <Link href=\"/privacy-policy\" className=\"text-primary hover:underline flex items-center space-x-1\" data-testid=\"link-privacy-policy\">\n                  <span>Política de Privacidade</span>\n                  <ExternalLink size={12} />\n                </Link>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleAcceptAll}\n                className=\"w-full\"\n                data-testid=\"button-accept-all\"\n              >\n                Aceitar Todos\n              </Button>\n              \n              <Button \n                onClick={handleAcceptEssential}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-accept-essential\"\n              >\n                Apenas Essenciais\n              </Button>\n              \n              <Dialog open={cookieSettingsOpen} onOpenChange={setCookieSettingsOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full flex items-center justify-center space-x-2\"\n                    data-testid=\"button-customize\"\n                  >\n                    <Settings size={16} />\n                    <span>Personalizar</span>\n                  </Button>\n                </DialogTrigger>\n                \n                <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center space-x-2\">\n                      <Cookie className=\"text-primary\" size={20} />\n                      <span>Configurações de Cookies</span>\n                    </DialogTitle>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-6\">\n                    <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                      <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                        <strong>Sobre cookies:</strong> Pequenos arquivos que armazenamos no seu navegador \n                        para melhorar sua experiência. Você pode controlar quais tipos aceitar.\n                      </p>\n                    </div>\n                    \n                    {cookieCategories.map((category) => (\n                      <div key={category.id} className=\"border border-border rounded-lg p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            {category.icon}\n                            <div>\n                              <h4 className=\"font-medium\">{category.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {category.description}\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            {category.required && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                Sempre Ativo\n                              </Badge>\n                            )}\n                            <Switch\n                              checked={category.enabled}\n                              onCheckedChange={(enabled) => handleCategoryToggle(category.id, enabled)}\n                              disabled={category.required}\n                              data-testid={`switch-${category.id}-detailed`}\n                            />\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-sm text-muted-foreground\">\n                          {category.details}\n                        </p>\n                      </div>\n                    ))}\n                    \n                    <Separator />\n                    \n                    <div className=\"flex justify-between space-x-3\">\n                      <Button \n                        onClick={handleRejectAll}\n                        variant=\"outline\"\n                        data-testid=\"button-reject-all-detailed\"\n                      >\n                        Rejeitar Opcionais\n                      </Button>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button \n                          onClick={handleSaveCustom}\n                          data-testid=\"button-save-custom\"\n                        >\n                          Salvar Configurações\n                        </Button>\n                        \n                        <Button \n                          onClick={handleAcceptAll}\n                          variant=\"secondary\"\n                          data-testid=\"button-accept-all-detailed\"\n                        >\n                          Aceitar Todos\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-muted p-3 rounded text-center\">\n                      <p className=\"text-xs text-muted-foreground\">\n                        Suas preferências serão salvas e aplicadas imediatamente. \n                        Você pode alterá-las a qualquer momento na nossa \n                        <Link href=\"/cookie-policy\" className=\"text-primary hover:underline ml-1\">\n                          Política de Cookies\n                        </Link>.\n                      </p>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n","size_bytes":12708},"client/src/components/ui/footer.tsx":{"content":"import { Separator } from '@/components/ui/separator';\nimport { \n  Gavel, \n  Mail, \n  Phone, \n  MapPin, \n  Shield, \n  Cookie, \n  FileText,\n  Linkedin,\n  Twitter,\n  Instagram,\n  Facebook\n} from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useCookiePreferences } from '@/hooks/use-cookie-preferences';\n\nexport function Footer() {\n  const currentYear = new Date().getFullYear();\n  const { openCookieSettings } = useCookiePreferences();\n  \n  return (\n    <footer className=\"bg-muted/30 border-t border-border mt-auto\">\n      <div className=\"container mx-auto px-4 py-12\">\n        \n        {/* Main Footer Content */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-8\">\n          \n          {/* Company Info */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <Gavel className=\"text-primary-foreground\" size={16} />\n              </div>\n              <span className=\"text-xl font-bold text-primary\">JusValida</span>\n            </div>\n            \n            <p className=\"text-sm text-muted-foreground\">\n              Análise jurídica inteligente com IA avançada. Transformando a revisão de documentos \n              jurídicos com tecnologia de ponta e expertise legal.\n            </p>\n            \n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <MapPin size={14} />\n                <span>São Paulo, SP - Brasil</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Mail size={14} />\n                <a href=\"mailto:contato@jusvalida.com.br\" className=\"hover:text-primary transition-colors\">\n                  contato@jusvalida.com.br\n                </a>\n              </div>\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Phone size={14} />\n                <a href=\"tel:+5511300000000\" className=\"hover:text-primary transition-colors\">\n                  +55 (11) 3000-0000\n                </a>\n              </div>\n            </div>\n          </div>\n          \n          {/* Quick Links */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground\">Plataforma</h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/dashboard\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors block\">\n                  Dashboard\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/analyses\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors block\">\n                  Minhas Análises\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/batch\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors block\">\n                  Análise em Lote\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/billing\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors block\">\n                  Planos e Créditos\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/support\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors block\">\n                  Suporte\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Legal Pages */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground flex items-center space-x-2\">\n              <Shield size={16} />\n              <span>Legal & Privacidade</span>\n            </h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\">\n                  <FileText size={14} className=\"mr-2\" />\n                  Política de Privacidade\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/cookie-policy\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\">\n                  <Cookie size={14} className=\"mr-2\" />\n                  Política de Cookies\n                </Link>\n              </li>\n              <li>\n                <button \n                  className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\"\n                  onClick={openCookieSettings}\n                  data-testid=\"button-manage-cookies\"\n                >\n                  <Cookie size={14} className=\"mr-2\" />\n                  Gerenciar Cookies\n                </button>\n              </li>\n              <li>\n                <Link href=\"/terms-of-service\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\">\n                  <Gavel size={14} className=\"mr-2\" />\n                  Termos de Uso\n                </Link>\n              </li>\n            </ul>\n            \n            <Separator className=\"my-4\" />\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-sm text-foreground\">Encarregado de Dados (DPO)</h4>\n              <div className=\"space-y-1 text-xs text-muted-foreground\">\n                <div className=\"flex items-center space-x-2\">\n                  <Mail size={12} />\n                  <a href=\"mailto:dpo@jusvalida.com.br\" className=\"hover:text-primary transition-colors\">\n                    dpo@jusvalida.com.br\n                  </a>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Phone size={12} />\n                  <a href=\"tel:+5511300000001\" className=\"hover:text-primary transition-colors\">\n                    +55 (11) 3000-0001\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Company Details & Social */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground\">Empresa</h3>\n            \n            <div className=\"space-y-3\">\n              {/* Company Legal Info */}\n              <div className=\"bg-muted p-3 rounded-lg text-xs\">\n                <div className=\"space-y-1 text-muted-foreground\">\n                  <p><strong className=\"text-foreground\">Razão Social:</strong></p>\n                  <p>JusValida Análise Jurídica por IA Ltda.</p>\n                  \n                  <p className=\"pt-2\"><strong className=\"text-foreground\">CNPJ:</strong></p>\n                  <p>12.345.678/0001-90</p>\n                  \n                  <p className=\"pt-2\"><strong className=\"text-foreground\">Endereço:</strong></p>\n                  <p>Av. Paulista, 1000 - 10º andar<br />Bela Vista, São Paulo - SP<br />CEP 01310-100</p>\n                </div>\n              </div>\n              \n              {/* Social Media */}\n              <div>\n                <h4 className=\"font-medium text-sm text-foreground mb-3\">Siga-nos</h4>\n                <ul className=\"space-y-3\">\n                  <li>\n                    <a href=\"#\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\">\n                      <Linkedin size={14} className=\"mr-2\" />\n                      LinkedIn\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"#\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\">\n                      <Twitter size={14} className=\"mr-2\" />\n                      Twitter\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"#\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\">\n                      <Instagram size={14} className=\"mr-2\" />\n                      Instagram\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"#\" className=\"text-muted-foreground hover:text-primary text-sm transition-colors flex items-center\">\n                      <Facebook size={14} className=\"mr-2\" />\n                      Facebook\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <Separator className=\"mb-6\" />\n        \n        {/* Bottom Footer */}\n        <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n          \n          {/* Copyright */}\n          <div className=\"flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-4 text-sm text-muted-foreground\">\n            <p>© {currentYear} JusValida. Todos os direitos reservados.</p>\n            <div className=\"hidden md:block\">•</div>\n            <p>Desenvolvido com ❤️ para advogados</p>\n          </div>\n          \n          {/* Compliance Badges */}\n          <div className=\"flex items-center space-x-4 text-xs\">\n            <div className=\"flex items-center space-x-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n              <Shield size={12} />\n              <span>LGPD</span>\n            </div>\n            <div className=\"flex items-center space-x-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded\">\n              <Gavel size={12} />\n              <span>OAB</span>\n            </div>\n            <div className=\"flex items-center space-x-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 px-2 py-1 rounded\">\n              <FileText size={12} />\n              <span>ISO 27001</span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Regulatory Notice */}\n        <div className=\"mt-6 pt-6 border-t border-border\">\n          <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg\">\n            <div className=\"flex items-start space-x-3\">\n              <Shield className=\"text-amber-600 mt-1 flex-shrink-0\" size={16} />\n              <div className=\"text-xs text-amber-800 dark:text-amber-200\">\n                <p className=\"font-medium mb-1\">Aviso Regulatório Importante</p>\n                <p>\n                  Os serviços do JusValida são ferramentas de apoio tecnológico e não substituem \n                  o aconselhamento jurídico profissional. As análises são geradas por inteligência \n                  artificial e podem conter limitações. Sempre consulte um advogado qualificado \n                  para decisões legais importantes. Este serviço está em conformidade com a LGPD \n                  (Lei 13.709/2018) e demais regulamentações aplicáveis.\n                </p>\n                \n                <div className=\"mt-3 pt-2 border-t border-amber-200 dark:border-amber-800\">\n                  <p className=\"font-medium\">Ouvidoria ANPD</p>\n                  <p>\n                    Em caso de questões sobre proteção de dados: \n                    <a href=\"https://www.gov.br/anpd\" className=\"underline hover:no-underline ml-1\" target=\"_blank\" rel=\"noopener noreferrer\">\n                      www.gov.br/anpd\n                    </a>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":11644},"client/src/hooks/use-cookie-preferences.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode } from 'react';\n\nexport interface CookiePreferences {\n  essential: boolean;\n  functional: boolean;\n  analytics: boolean;\n  timestamp: string;\n  version: string;\n}\n\ninterface CookieConsentContextType {\n  preferences: CookiePreferences | null;\n  hasConsent: boolean;\n  canUseAnalytics: boolean;\n  canUseFunctional: boolean;\n  updatePreferences: (newPreferences: Partial<CookiePreferences>) => void;\n  clearPreferences: () => void;\n  showBanner: boolean;\n  hideBanner: () => void;\n  openCookieSettings: () => void;\n  setCookieSettingsOpen: (open: boolean) => void;\n  cookieSettingsOpen: boolean;\n}\n\nconst CookieConsentContext = createContext<CookieConsentContextType | undefined>(undefined);\n\nexport function CookieConsentProvider({ children }: { children: ReactNode }) {\n  const [preferences, setPreferences] = useState<CookiePreferences | null>(null);\n  const [showBanner, setShowBanner] = useState(false);\n  const [cookieSettingsOpen, setCookieSettingsOpen] = useState(false);\n  \n  // Check if consent has been given\n  useEffect(() => {\n    try {\n      const consent = localStorage.getItem('cookie_preferences');\n      if (!consent) {\n        // Show banner after a brief delay for better UX\n        const timer = setTimeout(() => setShowBanner(true), 1000);\n        return () => clearTimeout(timer);\n      } else {\n        try {\n          setPreferences(JSON.parse(consent));\n        } catch (error) {\n          console.error('Error parsing cookie preferences:', error);\n          setShowBanner(true);\n        }\n      }\n    } catch (error) {\n      console.error('Error in CookieConsentProvider useEffect:', error);\n      setShowBanner(true);\n    }\n  }, []);\n\n  const updatePreferences = (newPreferences: Partial<CookiePreferences>) => {\n    const updated: CookiePreferences = {\n      essential: true,\n      functional: preferences?.functional ?? false,\n      analytics: preferences?.analytics ?? false,\n      timestamp: new Date().toISOString(),\n      version: '1.0',\n      ...newPreferences\n    };\n    \n    localStorage.setItem('cookie_preferences', JSON.stringify(updated));\n    setPreferences(updated);\n    setShowBanner(false);\n    setCookieSettingsOpen(false);\n  };\n  \n  const clearPreferences = () => {\n    localStorage.removeItem('cookie_preferences');\n    setPreferences(null);\n    setShowBanner(true);\n  };\n\n  const hideBanner = () => {\n    setShowBanner(false);\n  };\n\n  const openCookieSettings = () => {\n    setCookieSettingsOpen(true);\n  };\n  \n  const contextValue: CookieConsentContextType = {\n    preferences,\n    updatePreferences,\n    clearPreferences,\n    hasConsent: !!preferences,\n    canUseAnalytics: preferences?.analytics ?? false,\n    canUseFunctional: preferences?.functional ?? false,\n    showBanner,\n    hideBanner,\n    openCookieSettings,\n    setCookieSettingsOpen,\n    cookieSettingsOpen\n  };\n\n  return (\n    <CookieConsentContext.Provider value={contextValue}>\n      {children}\n    </CookieConsentContext.Provider>\n  );\n}\n\nexport function useCookiePreferences() {\n  const context = useContext(CookieConsentContext);\n  if (context === undefined) {\n    throw new Error('useCookiePreferences must be used within a CookieConsentProvider');\n  }\n  return context;\n}\n\n// Hook for checking if a specific cookie type is allowed\nexport function useCookieConsent(type: 'essential' | 'functional' | 'analytics') {\n  const { preferences } = useCookiePreferences();\n  \n  if (type === 'essential') return true;\n  if (!preferences) return false;\n  \n  return preferences[type] ?? false;\n}\n\n// Hook for analytics tracking (only if consent given)\nexport function useAnalytics() {\n  const { canUseAnalytics } = useCookiePreferences();\n  \n  const trackEvent = (eventName: string, properties?: Record<string, any>) => {\n    if (!canUseAnalytics) return;\n    \n    // Only track if user has given analytics consent\n    console.log('Analytics event:', eventName, properties);\n    // Here you would integrate with your analytics service\n  };\n  \n  const trackPageView = (path: string) => {\n    if (!canUseAnalytics) return;\n    \n    console.log('Page view:', path);\n    // Here you would track page views\n  };\n  \n  return {\n    trackEvent,\n    trackPageView,\n    canTrack: canUseAnalytics\n  };\n}","size_bytes":4265},"server/services/costCalculator.ts":{"content":"import { db } from '../db';\nimport { costModels } from '@shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\ninterface TokenUsage {\n  inputTokens: number;\n  outputTokens: number;\n}\n\ninterface CostCalculation {\n  inputTokenCost: number;\n  outputTokenCost: number;\n  totalCost: number;\n  creditsRequired: number;\n  profitMargin: number;\n  operationalCosts: number;\n}\n\nexport class CostCalculator {\n  private static costCache = new Map<string, any>();\n  private static cacheExpiry = 5 * 60 * 1000; // 5 minutes\n  \n  /**\n   * Calculate credits required for a given provider/model and token usage\n   */\n  static async calculateCredits(\n    provider: string, \n    model: string, \n    tokenUsage: TokenUsage\n  ): Promise<CostCalculation> {\n    const cacheKey = `${provider}-${model}`;\n    const cached = this.costCache.get(cacheKey);\n    \n    // Use cache if available and not expired\n    if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {\n      return this.computeCredits(cached.model, tokenUsage);\n    }\n\n    // Fetch cost model from database\n    const costModel = await db\n      .select()\n      .from(costModels)\n      .where(and(\n        eq(costModels.provider, provider),\n        eq(costModels.model, model),\n        eq(costModels.isActive, true)\n      ))\n      .limit(1);\n\n    if (!costModel.length) {\n      throw new Error(`Cost model not found for ${provider}/${model}`);\n    }\n\n    // Cache the result\n    this.costCache.set(cacheKey, {\n      model: costModel[0],\n      timestamp: Date.now()\n    });\n\n    return this.computeCredits(costModel[0], tokenUsage);\n  }\n\n  /**\n   * Compute actual credits based on cost model and token usage\n   */\n  private static computeCredits(costModel: any, tokenUsage: TokenUsage): CostCalculation {\n    const inputCost = Number(costModel.inputTokenCost) * tokenUsage.inputTokens;\n    const outputCost = Number(costModel.outputTokenCost) * tokenUsage.outputTokens;\n    const baseCost = inputCost + outputCost;\n\n    // Apply operational multiplier and profit margin\n    const operationalCosts = baseCost * (Number(costModel.operationalMultiplier) - 1);\n    const totalCost = baseCost * Number(costModel.operationalMultiplier);\n    const profitMargin = totalCost * Number(costModel.profitMargin);\n    const finalCost = totalCost + profitMargin;\n\n    // Calculate credits (each credit = R$ 0.10, so R$ 2.50-3.00 = 25-30 credits per analysis)\n    const creditsRequired = Math.ceil(finalCost / 0.10); // Convert to credits\n\n    return {\n      inputTokenCost: inputCost,\n      outputTokenCost: outputCost,\n      totalCost: finalCost,\n      creditsRequired,\n      profitMargin,\n      operationalCosts\n    };\n  }\n\n  /**\n   * Estimate credits for a document analysis based on content length\n   */\n  static estimateCreditsForDocument(content: string, provider: string, model: string): Promise<CostCalculation> {\n    // Rough estimation: 4 characters ≈ 1 token\n    const estimatedInputTokens = Math.ceil(content.length / 4);\n    // Assume output is about 20% of input for document analysis\n    const estimatedOutputTokens = Math.ceil(estimatedInputTokens * 0.2);\n\n    return this.calculateCredits(provider, model, {\n      inputTokens: estimatedInputTokens,\n      outputTokens: estimatedOutputTokens\n    });\n  }\n\n  /**\n   * Get current pricing for a provider/model\n   */\n  static async getCurrentPricing(provider: string, model: string) {\n    const costModel = await db\n      .select()\n      .from(costModels)\n      .where(and(\n        eq(costModels.provider, provider),\n        eq(costModels.model, model),\n        eq(costModels.isActive, true)\n      ))\n      .limit(1);\n\n    if (!costModel.length) {\n      return null;\n    }\n\n    const model_data = costModel[0];\n    return {\n      provider,\n      model,\n      inputTokenCost: Number(model_data.inputTokenCost),\n      outputTokenCost: Number(model_data.outputTokenCost),\n      creditsPerInputToken: Number(model_data.creditsPerInputToken),\n      creditsPerOutputToken: Number(model_data.creditsPerOutputToken),\n      profitMargin: Number(model_data.profitMargin),\n      operationalMultiplier: Number(model_data.operationalMultiplier),\n      lastUpdated: model_data.lastUpdated\n    };\n  }\n\n  /**\n   * Initialize cost models with current market rates (call this during app startup)\n   */\n  static async initializeCostModels() {\n    const models = [\n      {\n        provider: 'openai',\n        model: 'gpt-4',\n        inputTokenCost: 0.00003, // $0.03 per 1K tokens (current as of Sept 2024)\n        outputTokenCost: 0.00006, // $0.06 per 1K tokens\n        profitMargin: 0.35, // 35% profit margin\n        operationalMultiplier: 1.25, // 25% operational costs\n        notes: 'OpenAI GPT-4 pricing as of September 2024'\n      },\n      {\n        provider: 'openai',\n        model: 'gpt-4-turbo',\n        inputTokenCost: 0.00001, // $0.01 per 1K tokens\n        outputTokenCost: 0.00003, // $0.03 per 1K tokens\n        profitMargin: 0.35,\n        operationalMultiplier: 1.25,\n        notes: 'OpenAI GPT-4 Turbo pricing as of September 2024'\n      },\n      {\n        provider: 'anthropic',\n        model: 'claude-3-sonnet',\n        inputTokenCost: 0.000003, // $0.003 per 1K tokens\n        outputTokenCost: 0.000015, // $0.015 per 1K tokens\n        profitMargin: 0.35,\n        operationalMultiplier: 1.25,\n        notes: 'Anthropic Claude 3 Sonnet pricing as of September 2024'\n      },\n      {\n        provider: 'anthropic',\n        model: 'claude-3-haiku',\n        inputTokenCost: 0.00000025, // $0.00025 per 1K tokens\n        outputTokenCost: 0.00000125, // $0.00125 per 1K tokens\n        profitMargin: 0.35,\n        operationalMultiplier: 1.25,\n        notes: 'Anthropic Claude 3 Haiku pricing as of September 2024'\n      },\n      {\n        provider: 'gemini',\n        model: 'gemini-pro',\n        inputTokenCost: 0.0000005, // $0.0005 per 1K tokens\n        outputTokenCost: 0.0000015, // $0.0015 per 1K tokens\n        profitMargin: 0.35,\n        operationalMultiplier: 1.25,\n        notes: 'Google Gemini Pro pricing as of September 2024'\n      }\n    ];\n\n    for (const model of models) {\n      // Calculate credits per token based on cost + margin + operations\n      const finalInputCost = model.inputTokenCost * model.operationalMultiplier * (1 + model.profitMargin);\n      const finalOutputCost = model.outputTokenCost * model.operationalMultiplier * (1 + model.profitMargin);\n      \n      // Convert USD to BRL (approximately 5.5 exchange rate) and then to credits (R$ 0.10 per credit)\n      const exchangeRate = 5.5;\n      const creditValue = 0.10; // Each credit = R$ 0.10\n      \n      const creditsPerInputToken = (finalInputCost * exchangeRate) / creditValue;\n      const creditsPerOutputToken = (finalOutputCost * exchangeRate) / creditValue;\n\n      try {\n        await db.insert(costModels).values({\n          provider: model.provider,\n          model: model.model,\n          inputTokenCost: model.inputTokenCost.toString(),\n          outputTokenCost: model.outputTokenCost.toString(),\n          creditsPerInputToken: creditsPerInputToken.toString(),\n          creditsPerOutputToken: creditsPerOutputToken.toString(),\n          profitMargin: model.profitMargin.toString(),\n          operationalMultiplier: model.operationalMultiplier.toString(),\n          notes: model.notes,\n          isActive: true\n        }).onConflictDoNothing(); // Don't insert if already exists\n      } catch (error) {\n        console.log(`Cost model for ${model.provider}/${model.model} already exists or error:`, error);\n      }\n    }\n\n    console.log('✅ Cost models initialized');\n  }\n\n  /**\n   * Validate pricing sustainability - check if R$ 2.50-3.00 per analysis is sustainable\n   */\n  static async validatePricingSustainability() {\n    const targetCreditRange = { min: 25, max: 30 }; // R$ 2.50 - R$ 3.00\n    const averageDocumentSize = 5000; // characters\n    \n    const providers = ['openai', 'anthropic', 'gemini'];\n    const models = ['gpt-4', 'claude-3-sonnet', 'gemini-pro'];\n    \n    console.log('\\n📊 PRICING SUSTAINABILITY ANALYSIS\\n');\n    console.log('Target: R$ 2.50 - R$ 3.00 per analysis (25-30 credits)\\n');\n    \n    for (const provider of providers) {\n      for (const model of models) {\n        try {\n          const estimate = await this.estimateCreditsForDocument(\n            'x'.repeat(averageDocumentSize), \n            provider, \n            model\n          );\n          \n          const sustainable = estimate.creditsRequired >= targetCreditRange.min && \n                             estimate.creditsRequired <= targetCreditRange.max;\n          \n          console.log(`${provider}/${model}:`);\n          console.log(`  Credits Required: ${estimate.creditsRequired}`);\n          console.log(`  Cost: R$ ${(estimate.creditsRequired * 0.10).toFixed(2)}`);\n          console.log(`  Sustainable: ${sustainable ? '✅' : '❌'}`);\n          console.log(`  Profit Margin: R$ ${estimate.profitMargin.toFixed(4)}`);\n          console.log(`  Operational Costs: R$ ${estimate.operationalCosts.toFixed(4)}`);\n          console.log('');\n          \n        } catch (error) {\n          console.log(`${provider}/${model}: Model not found`);\n        }\n      }\n    }\n  }\n}","size_bytes":9164},"client/src/pages/analysis-details.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useRoute, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { ArrowLeft, Clock, Coins, AlertTriangle, CheckCircle, FileText, Download, Share, Eye, EyeOff, Trash2 } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Link } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\ninterface DocumentAnalysis {\n  id: string;\n  title: string;\n  fileName: string;\n  fileSize: number;\n  content: string;\n  analysisType: string;\n  aiProvider: string;\n  aiModel: string;\n  creditsUsed: number;\n  result: {\n    riskLevel: string;\n    summary: string;\n    criticalFlaws: string[];\n    recommendations: string[];\n    legalCompliance: {\n      score: number;\n      issues: string[];\n    };\n  };\n  createdAt: string;\n}\n\nexport default function AnalysisDetails() {\n  const [match, params] = useRoute(\"/analyses/:id\");\n  const [showFullText, setShowFullText] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const analysisId = params?.id;\n\n  // Scroll to top when page loads or analysis ID changes\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, [analysisId]);\n\n  const { data: analysis, isLoading, error } = useQuery<DocumentAnalysis>({\n    queryKey: ['/api/analyses', analysisId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/analyses/${analysisId}`);\n      return response.json();\n    },\n    enabled: !!analysisId\n  });\n\n  const deleteAnalysisMutation = useMutation({\n    mutationFn: async () => {\n      if (!analysisId) throw new Error('No analysis ID');\n      const response = await apiRequest('DELETE', `/api/analyses/${analysisId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Análise Excluída\",\n        description: \"Análise movida para lixeira. Você pode restaurá-la nos próximos 7 dias.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/analyses'] });\n      setLocation('/dashboard');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao Excluir\",\n        description: error.message || \"Erro inesperado ao excluir análise\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getRiskBadgeColor = (risk: string) => {\n    switch (risk.toLowerCase()) {\n      case 'low':\n      case 'baixo':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'medium':\n      case 'médio':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'high':\n      case 'alto':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      case 'critical':\n      case 'crítico':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n            <div className=\"space-y-4\">\n              <div className=\"h-32 bg-muted rounded\"></div>\n              <div className=\"h-24 bg-muted rounded\"></div>\n              <div className=\"h-40 bg-muted rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !analysis) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <Link href=\"/analyses\">\n            <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back-analyses\">\n              <ArrowLeft size={16} className=\"mr-2\" />\n              Voltar para Análises\n            </Button>\n          </Link>\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Análise não encontrada</h2>\n              <p className=\"text-muted-foreground\">Esta análise não existe ou você não tem permissão para acessá-la.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Link href=\"/analyses\">\n            <Button variant=\"ghost\" data-testid=\"button-back-analyses\">\n              <ArrowLeft size={16} className=\"mr-2\" />\n              Voltar para Análises\n            </Button>\n          </Link>\n          \n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share-analysis\">\n              <Share size={14} className=\"mr-2\" />\n              Compartilhar\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-download-analysis\">\n              <Download size={14} className=\"mr-2\" />\n              Baixar PDF\n            </Button>\n            <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n              <DialogTrigger asChild>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-950\" \n                  data-testid=\"button-delete-analysis\"\n                >\n                  <Trash2 size={14} className=\"mr-2\" />\n                  Excluir\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Confirmar Exclusão</DialogTitle>\n                  <DialogDescription>\n                    Tem certeza que deseja excluir esta análise? Ela será movida para a lixeira e \n                    poderá ser restaurada nos próximos 7 dias. Após esse período, será excluída permanentemente.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"flex justify-end gap-2 mt-4\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setShowDeleteDialog(false)}\n                    data-testid=\"button-cancel-delete\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    variant=\"destructive\" \n                    onClick={() => deleteAnalysisMutation.mutate()}\n                    disabled={deleteAnalysisMutation.isPending}\n                    data-testid=\"button-confirm-delete\"\n                  >\n                    {deleteAnalysisMutation.isPending ? 'Excluindo...' : 'Excluir Análise'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Analysis Header Card */}\n        <Card className=\"mb-6\" data-testid=\"card-analysis-header\">\n          <CardHeader>\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-2xl mb-2\" data-testid=\"text-analysis-title\">\n                  {analysis.title}\n                </CardTitle>\n                <CardDescription className=\"text-base\">\n                  <div className=\"flex items-center gap-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock size={14} />\n                      <span>{new Date(analysis.createdAt).toLocaleDateString('pt-BR', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">Provedor:</span>\n                      <span>{analysis.aiProvider} - {analysis.aiModel}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Coins className=\"h-4 w-4 text-primary\" />\n                      <span>{analysis.creditsUsed} créditos</span>\n                    </div>\n                  </div>\n                </CardDescription>\n              </div>\n              <Badge \n                className={getRiskBadgeColor(analysis.result.riskLevel)}\n                data-testid=\"badge-risk-level\"\n              >\n                Risco: {analysis.result.riskLevel}\n              </Badge>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Original Document */}\n        <Card className=\"mb-6\" data-testid=\"card-original-document\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText size={20} />\n              Documento Original\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  <strong>Fonte:</strong> {analysis.fileName || 'Texto colado'} \n                  {analysis.fileSize && analysis.fileSize > 0 && (\n                    <>\n                      {' • '}\n                      <strong>Tamanho:</strong> {Math.round(analysis.fileSize / 1024)} KB\n                    </>\n                  )}\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setShowFullText(!showFullText)}\n                  data-testid=\"button-toggle-document-text\"\n                >\n                  {showFullText ? <EyeOff size={14} /> : <Eye size={14} />}\n                  <span className=\"ml-2\">{showFullText ? 'Ocultar' : 'Ver'} Texto</span>\n                </Button>\n              </div>\n              \n              {showFullText && (\n                <div className=\"bg-muted/50 p-4 rounded-lg border\">\n                  <p className=\"text-sm font-mono whitespace-pre-wrap\" data-testid=\"text-document-content\">\n                    {analysis.content}\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Summary */}\n          <Card data-testid=\"card-summary\">\n            <CardHeader>\n              <CardTitle>Resumo Executivo</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm leading-relaxed\" data-testid=\"text-summary\">\n                {analysis.result.summary}\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Legal Compliance */}\n          <Card data-testid=\"card-compliance\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                Conformidade Legal\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Score Geral</span>\n                  <Badge variant=\"secondary\" data-testid=\"badge-compliance-score\">\n                    {analysis.result.legalCompliance.score}%\n                  </Badge>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  <div data-testid=\"text-compliance-details\">\n                    {analysis.result.legalCompliance.issues && analysis.result.legalCompliance.issues.length > 0 ? (\n                      <ul className=\"space-y-1\">\n                        {analysis.result.legalCompliance.issues.map((issue, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <span className=\"text-xs\">•</span>\n                            <span>{issue}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>Nenhum problema de conformidade identificado</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Critical Flaws */}\n        {analysis.result.criticalFlaws.length > 0 && (\n          <Card className=\"mt-6 border-red-200 dark:border-red-800\" data-testid=\"card-critical-flaws\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-red-700 dark:text-red-400\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                Problemas Críticos ({analysis.result.criticalFlaws.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {analysis.result.criticalFlaws.map((flaw: string, index: number) => (\n                  <div key={index} className=\"flex gap-3 p-3 bg-red-50 dark:bg-red-950/50 rounded-lg border border-red-200 dark:border-red-800\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-500 mt-0.5 flex-shrink-0\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-red-900 dark:text-red-100\" data-testid={`text-critical-flaw-${index}`}>\n                        {flaw}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Recommendations */}\n        {analysis.result.recommendations.length > 0 && (\n          <Card className=\"mt-6\" data-testid=\"card-recommendations\">\n            <CardHeader>\n              <CardTitle>Recomendações</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {analysis.result.recommendations.map((recommendation: string, index: number) => (\n                  <div key={index} className=\"flex gap-3 p-3 bg-blue-50 dark:bg-blue-950/50 rounded-lg border border-blue-200 dark:border-blue-800\">\n                    <CheckCircle className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\" data-testid={`text-recommendation-${index}`}>\n                        {recommendation}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Technical Details */}\n        <Card className=\"mt-6\" data-testid=\"card-technical-details\">\n          <CardHeader>\n            <CardTitle>Detalhes Técnicos</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Tipo de Análise:</span>\n                <p className=\"font-medium\">{analysis.analysisType}</p>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Provedor IA:</span>\n                <p className=\"font-medium\">{analysis.aiProvider}</p>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Modelo:</span>\n                <p className=\"font-medium\">{analysis.aiModel}</p>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Créditos:</span>\n                <p className=\"font-medium\">{analysis.creditsUsed}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16611},"client/src/pages/trash.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { DashboardHeader } from '@/components/layout/dashboard-header';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Trash2, RotateCcw, Clock, Coins, AlertTriangle, FileText } from 'lucide-react';\n\ninterface DeletedAnalysis {\n  id: string;\n  title: string;\n  content: string;\n  analysisType: string;\n  aiProvider: string;\n  aiModel: string;\n  creditsUsed: number;\n  result: {\n    riskLevel: string;\n    summary: string;\n    criticalFlaws: string[];\n    recommendations: string[];\n    legalCompliance: {\n      score: number;\n      issues: string[];\n    };\n  };\n  createdAt: string;\n  deletedAt: string;\n}\n\nexport default function Trash() {\n  const { user } = useSupabaseAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAnalysisId, setSelectedAnalysisId] = useState<string | null>(null);\n  const [showRestoreDialog, setShowRestoreDialog] = useState(false);\n\n  const { data: deletedAnalyses = [], isLoading } = useQuery<DeletedAnalysis[]>({\n    queryKey: ['/api/analyses/trash/list'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/analyses/trash/list');\n      return response.json();\n    },\n    enabled: !!user\n  });\n\n  const restoreAnalysisMutation = useMutation({\n    mutationFn: async (analysisId: string) => {\n      const response = await apiRequest('POST', `/api/analyses/${analysisId}/restore`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Análise Restaurada\",\n        description: \"A análise foi restaurada com sucesso e está disponível novamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/analyses/trash/list'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analyses'] });\n      setShowRestoreDialog(false);\n      setSelectedAnalysisId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao Restaurar\",\n        description: error.message || \"Erro inesperado ao restaurar análise\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getRiskBadgeColor = (risk: string) => {\n    switch (risk.toLowerCase()) {\n      case 'low':\n      case 'baixo':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'medium':\n      case 'médio':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'high':\n      case 'alto':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      case 'critical':\n      case 'crítico':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getDaysUntilPermanentDelete = (deletedAt: string) => {\n    const deletedDate = new Date(deletedAt);\n    const sevenDaysLater = new Date(deletedDate);\n    sevenDaysLater.setDate(deletedDate.getDate() + 7);\n    \n    const now = new Date();\n    const diffTime = sevenDaysLater.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return Math.max(0, diffDays);\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-trash-title\">\n            Lixeira\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-trash-description\">\n            Análises excluídas são mantidas por 7 dias antes da exclusão permanente\n          </p>\n        </div>\n\n        {isLoading && (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"h-6 bg-muted rounded w-1/2\"></div>\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {!isLoading && deletedAnalyses.length === 0 && (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Trash2 className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Lixeira Vazia</h2>\n              <p className=\"text-muted-foreground\">\n                Nenhuma análise excluída encontrada. Análises excluídas aparecerão aqui.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {!isLoading && deletedAnalyses.length > 0 && (\n          <div className=\"space-y-4\">\n            {deletedAnalyses.map((analysis) => {\n              const daysLeft = getDaysUntilPermanentDelete(analysis.deletedAt);\n              return (\n                <Card key={analysis.id} className=\"border-red-200 dark:border-red-800\" data-testid={`card-deleted-analysis-${analysis.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <FileText className=\"h-5 w-5 text-muted-foreground\" />\n                          <h3 className=\"font-semibold text-lg\" data-testid={`text-analysis-title-${analysis.id}`}>\n                            {analysis.title}\n                          </h3>\n                          <Badge \n                            className={getRiskBadgeColor(analysis.result.riskLevel)}\n                            data-testid={`badge-risk-${analysis.id}`}\n                          >\n                            {analysis.result.riskLevel}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"text-sm text-muted-foreground space-y-1\">\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"flex items-center gap-2\">\n                              <Clock size={14} />\n                              <span>Excluído em: {formatDate(analysis.deletedAt)}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-medium\">Provedor:</span>\n                              <span>{analysis.aiProvider} - {analysis.aiModel}</span>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Coins className=\"h-4 w-4 text-primary\" />\n                              <span>{analysis.creditsUsed} créditos</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2 mt-2\">\n                            {daysLeft > 0 ? (\n                              <div className=\"flex items-center gap-2\">\n                                <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                                <span className=\"text-orange-600 dark:text-orange-400 font-medium\">\n                                  Será excluída permanentemente em {daysLeft} dia{daysLeft > 1 ? 's' : ''}\n                                </span>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center gap-2\">\n                                <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                                <span className=\"text-red-600 dark:text-red-400 font-medium\">\n                                  Será excluída permanentemente em breve\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <Dialog open={showRestoreDialog && selectedAnalysisId === analysis.id} onOpenChange={setShowRestoreDialog}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedAnalysisId(analysis.id)}\n                            data-testid={`button-restore-${analysis.id}`}\n                            className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50 dark:text-blue-400 dark:hover:bg-blue-950\"\n                          >\n                            <RotateCcw size={14} className=\"mr-2\" />\n                            Restaurar\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Confirmar Restauração</DialogTitle>\n                            <DialogDescription>\n                              Tem certeza que deseja restaurar esta análise? Ela voltará para sua lista de análises ativas.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"flex justify-end gap-2 mt-4\">\n                            <Button \n                              variant=\"outline\" \n                              onClick={() => {\n                                setShowRestoreDialog(false);\n                                setSelectedAnalysisId(null);\n                              }}\n                              data-testid=\"button-cancel-restore\"\n                            >\n                              Cancelar\n                            </Button>\n                            <Button \n                              onClick={() => restoreAnalysisMutation.mutate(analysis.id)}\n                              disabled={restoreAnalysisMutation.isPending}\n                              data-testid=\"button-confirm-restore\"\n                            >\n                              {restoreAnalysisMutation.isPending ? 'Restaurando...' : 'Restaurar Análise'}\n                            </Button>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11393},"lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;\n\nif (!supabaseUrl || !supabaseServiceKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\n// Server-side client with service key for admin operations\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false\n  }\n});\n\n// Client-side function for frontend\nexport const createSupabaseClient = () => {\n  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\n  \n  if (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase environment variables');\n  }\n  \n  return createClient(supabaseUrl, supabaseAnonKey);\n};","size_bytes":789},"server/middleware/supabase-auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { supabaseAdmin } from '../../lib/supabase';\nimport { storage } from '../storage';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    username: string;\n    role: 'user' | 'admin' | 'support';\n    credits: number;\n    stripeCustomerId?: string | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n}\n\n// Middleware to verify Supabase JWT tokens and get user data from our database\nexport const requireSupabaseAuth = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const token = authHeader.split(' ')[1];\n    \n    // Verify the token with Supabase\n    const { data: { user }, error } = await supabaseAdmin.auth.getUser(token);\n    \n    if (error || !user) {\n      return res.status(401).json({ message: 'Invalid or expired token' });\n    }\n\n    // Map role from Supabase app_metadata (defaults to 'user')\n    const supabaseRole = user.app_metadata?.role || 'user';\n    \n    // Ensure user exists with Supabase mapping (safe and idempotent)\n    let dbUser;\n    try {\n      dbUser = await storage.ensureUserBySupabase(user.id, user.email || '', {\n        first_name: user.user_metadata?.first_name,\n        last_name: user.user_metadata?.last_name,\n        username: user.user_metadata?.username,\n        role: supabaseRole\n      });\n    } catch (ensureError: any) {\n      console.error('User ensure failed:', ensureError);\n      return res.status(500).json({ message: 'User setup failed', details: ensureError.message });\n    }\n    \n    req.user = {\n      id: dbUser.id, // CRITICAL: Use local DB ID, not Supabase ID\n      email: dbUser.email,\n      firstName: dbUser.firstName,\n      lastName: dbUser.lastName,\n      username: dbUser.username,\n      role: supabaseRole, // Use role from Supabase metadata\n      credits: dbUser.credits,\n      stripeCustomerId: dbUser.stripeCustomerId,\n      createdAt: dbUser.createdAt.toISOString(),\n      updatedAt: dbUser.updatedAt.toISOString(),\n    };\n    next();\n  } catch (error: any) {\n    // This should only catch unexpected errors, not auth or migration issues\n    console.error('Unexpected auth middleware error:', error);\n    return res.status(500).json({ message: 'Internal server error' });\n  }\n};\n\n// Middleware that requires admin role (checks Supabase app_metadata)\nexport const requireSupabaseAdmin = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const token = authHeader.split(' ')[1];\n    \n    // Verify the token with Supabase\n    const { data: { user }, error } = await supabaseAdmin.auth.getUser(token);\n    \n    if (error || !user) {\n      return res.status(401).json({ message: 'Invalid or expired token' });\n    }\n\n    // Check admin role directly from Supabase app_metadata\n    const userRole = user.app_metadata?.role;\n    if (!userRole || !['admin', 'support'].includes(userRole)) {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    // Set user data on request (same logic as requireSupabaseAuth)\n    try {\n      const dbUser = await storage.ensureUserBySupabase(user.id, user.email || '', {\n        first_name: user.user_metadata?.first_name,\n        last_name: user.user_metadata?.last_name,\n        username: user.user_metadata?.username,\n        role: userRole\n      });\n      req.user = {\n        id: dbUser.id, // CRITICAL: Use local DB ID, not Supabase ID\n        email: dbUser.email,\n        firstName: dbUser.firstName,\n        lastName: dbUser.lastName,\n        username: dbUser.username,\n        role: userRole, // Use role from Supabase metadata\n        credits: dbUser.credits,\n        stripeCustomerId: dbUser.stripeCustomerId,\n        createdAt: dbUser.createdAt.toISOString(),\n        updatedAt: dbUser.updatedAt.toISOString(),\n      };\n      next();\n    } catch (ensureError: any) {\n      console.error('Admin user ensure failed:', ensureError);\n      return res.status(500).json({ message: 'Admin user setup failed', details: ensureError.message });\n    }\n  } catch (error: any) {\n    // This should only catch unexpected errors, not auth or database issues\n    console.error('Unexpected admin auth middleware error:', error);\n    return res.status(500).json({ message: 'Internal server error' });\n  }\n};","size_bytes":4777},"client/src/hooks/use-supabase-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { User, Session, AuthChangeEvent } from '@supabase/supabase-js';\nimport { supabase } from '@/lib/supabase';\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signUp: (email: string, password: string, metadata: { firstName: string; lastName: string; username: string }) => Promise<{ error: any }>;\n  signOut: () => Promise<void>;\n  updateProfile: (updates: { firstName?: string; lastName?: string; username?: string }) => Promise<{ error: any }>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function SupabaseAuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      setSession(session);\n      setUser(session?.user || null);\n      setLoading(false);\n    };\n\n    getInitialSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event: AuthChangeEvent, session: Session | null) => {\n        setSession(session);\n        setUser(session?.user || null);\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    return { error };\n  };\n\n  const signUp = async (\n    email: string, \n    password: string, \n    metadata: { firstName: string; lastName: string; username: string }\n  ) => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          first_name: metadata.firstName,\n          last_name: metadata.lastName,\n          username: metadata.username,\n        },\n      },\n    });\n    return { error };\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const updateProfile = async (updates: { \n    firstName?: string; \n    lastName?: string; \n    username?: string; \n  }) => {\n    const { error } = await supabase.auth.updateUser({\n      data: {\n        first_name: updates.firstName,\n        last_name: updates.lastName,\n        username: updates.username,\n      },\n    });\n    return { error };\n  };\n\n  const value: AuthContextType = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    updateProfile,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useSupabaseAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useSupabaseAuth must be used within a SupabaseAuthProvider');\n  }\n  return context;\n}","size_bytes":3108},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\n// Try to get env vars from multiple sources in development\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || \n  (typeof window !== 'undefined' && (window as any).__SUPABASE_URL__) ||\n  'https://lwqeysdqcepqfzmwvwsq.supabase.co'; // Fallback for development\n\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY ||\n  (typeof window !== 'undefined' && (window as any).__SUPABASE_ANON_KEY__) ||\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx3cWV5c2RxY2VwcWZ6bXd2d3NxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgwMjQ3OTksImV4cCI6MjA3MzYwMDc5OX0.5B6Jnpqh7zEIHHABF13ylltIZgttJ-ZKHC6AgzSMKlc'; // Fallback for development\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Missing Supabase environment variables. Using fallback values for development.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true\n  }\n});\n\n// Database types for TypeScript\nexport interface Database {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string;\n          email: string;\n          username: string;\n          first_name: string;\n          last_name: string;\n          credits: number;\n          stripe_customer_id: string | null;\n          role: 'user' | 'admin' | 'support';\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          email: string;\n          username: string;\n          first_name: string;\n          last_name: string;\n          credits?: number;\n          stripe_customer_id?: string | null;\n          role?: 'user' | 'admin' | 'support';\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          email?: string;\n          username?: string;\n          first_name?: string;\n          last_name?: string;\n          credits?: number;\n          stripe_customer_id?: string | null;\n          role?: 'user' | 'admin' | 'support';\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      document_analyses: {\n        Row: {\n          id: string;\n          user_id: string;\n          title: string;\n          content: string;\n          analysis_type: string;\n          ai_provider: string;\n          ai_model: string;\n          credits_used: number;\n          result: any;\n          deleted_at: string | null;\n          deleted_by: string | null;\n          created_at: string;\n        };\n        Insert: {\n          id?: string;\n          user_id: string;\n          title: string;\n          content: string;\n          analysis_type: string;\n          ai_provider: string;\n          ai_model: string;\n          credits_used: number;\n          result: any;\n          deleted_at?: string | null;\n          deleted_by?: string | null;\n          created_at?: string;\n        };\n        Update: {\n          id?: string;\n          user_id?: string;\n          title?: string;\n          content?: string;\n          analysis_type?: string;\n          ai_provider?: string;\n          ai_model?: string;\n          credits_used?: number;\n          result?: any;\n          deleted_at?: string | null;\n          deleted_by?: string | null;\n          created_at?: string;\n        };\n      };\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      [_ in never]: never;\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n  };\n}","size_bytes":3488},"client/src/pages/login-supabase.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { Gavel, Eye, EyeOff } from 'lucide-react';\n\nexport default function LoginSupabase() {\n  const [, setLocation] = useLocation();\n  const { signIn } = useSupabaseAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.email || !formData.password) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const { error } = await signIn(formData.email, formData.password);\n\n      if (error) {\n        toast({\n          title: \"Erro no Login\",\n          description: error.message === 'Invalid login credentials' \n            ? \"Email ou senha incorretos.\"\n            : \"Erro inesperado. Tente novamente.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: \"Redirecionando para o dashboard...\",\n      });\n\n      // Redirect to dashboard\n      setLocation('/dashboard');\n    } catch (error: any) {\n      console.error('Login error:', error);\n      toast({\n        title: \"Erro no Login\",\n        description: \"Erro inesperado. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/20 via-background to-accent/20 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <Gavel className=\"text-primary-foreground\" size={24} />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Entrar no JusValida</CardTitle>\n          <CardDescription>\n            Faça login para acessar sua conta e analisar documentos jurídicos\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Sua senha\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  required\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? 'Entrando...' : 'Entrar'}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            Não tem uma conta?{' '}\n            <Link href=\"/register\">\n              <a className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                Criar conta\n              </a>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5282},"client/src/pages/register-supabase.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { Gavel, Eye, EyeOff } from 'lucide-react';\n\nexport default function RegisterSupabase() {\n  const [, setLocation] = useLocation();\n  const { signUp } = useSupabaseAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.firstName || !formData.lastName || !formData.username || \n        !formData.email || !formData.password || !formData.confirmPassword) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Senhas não coincidem\",\n        description: \"Por favor, verifique se as senhas são iguais.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Senha muito curta\",\n        description: \"A senha deve ter pelo menos 6 caracteres.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const { error } = await signUp(formData.email, formData.password, {\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        username: formData.username,\n      });\n\n      if (error) {\n        toast({\n          title: \"Erro no Cadastro\",\n          description: error.message === 'User already registered' \n            ? \"Este email já está cadastrado.\"\n            : \"Erro inesperado. Tente novamente.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      toast({\n        title: \"Cadastro realizado com sucesso!\",\n        description: \"Verifique seu email para confirmar sua conta.\",\n      });\n\n      // Redirect to login\n      setLocation('/login');\n    } catch (error: any) {\n      console.error('Register error:', error);\n      toast({\n        title: \"Erro no Cadastro\",\n        description: \"Erro inesperado. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/20 via-background to-accent/20 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <Gavel className=\"text-primary-foreground\" size={24} />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Criar Conta</CardTitle>\n          <CardDescription>\n            Crie sua conta no JusValida para começar a analisar documentos jurídicos\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">Nome</Label>\n                <Input\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  placeholder=\"João\"\n                  value={formData.firstName}\n                  onChange={handleInputChange}\n                  required\n                  data-testid=\"input-first-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Sobrenome</Label>\n                <Input\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  placeholder=\"Silva\"\n                  value={formData.lastName}\n                  onChange={handleInputChange}\n                  required\n                  data-testid=\"input-last-name\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Usuário</Label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                placeholder=\"joaosilva\"\n                value={formData.username}\n                onChange={handleInputChange}\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"joao@email.com\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Mínimo 6 caracteres\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  required\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirmar Senha</Label>\n              <Input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"Digite a senha novamente\"\n                value={formData.confirmPassword}\n                onChange={handleInputChange}\n                required\n                data-testid=\"input-confirm-password\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-register\"\n            >\n              {isLoading ? 'Cadastrando...' : 'Criar Conta'}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            Já tem uma conta?{' '}\n            <Link href=\"/login\">\n              <a className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                Fazer login\n              </a>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7990},"client/src/pages/payment-success.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useSupabaseAuth } from '@/hooks/use-supabase-auth';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, CreditCard, ArrowRight, Download } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport default function PaymentSuccess() {\n  const { user } = useSupabaseAuth();\n  const [, setLocation] = useLocation();\n  const [countdown, setCountdown] = useState(10);\n\n  // Get payment intent ID from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const paymentIntentId = urlParams.get('payment_intent');\n  const paymentIntentClientSecret = urlParams.get('payment_intent_client_secret');\n\n  // Fetch updated user profile to show new credit balance\n  const { data: userProfile, isLoading } = useQuery<{userProfile: {credits: number}}>({\n    queryKey: ['/api/user/profile'],\n    enabled: !!user,\n    refetchInterval: 2000, // Refresh every 2 seconds to catch webhook updates\n    staleTime: 0, // Always fetch fresh data\n  });\n\n  // Auto redirect countdown\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCountdown((prev) => {\n        if (prev <= 1) {\n          setLocation('/dashboard');\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [setLocation]);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!user) {\n      setLocation('/login');\n    }\n  }, [user, setLocation]);\n\n  if (!user) {\n    return null; // Will redirect to login\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900\">\n      <div className=\"container mx-auto px-4 py-16 max-w-2xl\">\n        {/* Success Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-12 h-12 text-green-600 dark:text-green-400\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Pagamento Realizado com Sucesso!\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300\">\n            Obrigado por confiar na JusValida\n          </p>\n        </div>\n\n        {/* Payment Details Card */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"w-5 h-5 text-blue-600\" />\n              Detalhes do Pagamento\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {paymentIntentId && (\n              <div className=\"flex justify-between items-center py-2 border-b\">\n                <span className=\"text-gray-600 dark:text-gray-400\">ID da Transação:</span>\n                <span className=\"font-mono text-sm text-gray-900 dark:text-white\">\n                  {paymentIntentId.slice(0, 20)}...\n                </span>\n              </div>\n            )}\n            \n            <div className=\"flex justify-between items-center py-2 border-b\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Status:</span>\n              <span className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-md text-sm font-medium\">\n                Aprovado\n              </span>\n            </div>\n\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Saldo Atual de Créditos:</span>\n              {isLoading ? (\n                <Skeleton className=\"h-6 w-16\" />\n              ) : (\n                <span className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {userProfile?.userProfile?.credits || 0}\n                </span>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps Card */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Próximos Passos</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                <span className=\"text-blue-600 dark:text-blue-400 text-sm font-bold\">1</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900 dark:text-white\">Seus créditos foram adicionados</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  O processamento pode levar alguns segundos. Seus créditos aparecerão automaticamente no dashboard.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                <span className=\"text-blue-600 dark:text-blue-400 text-sm font-bold\">2</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900 dark:text-white\">Comece a analisar documentos</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Acesse o dashboard para fazer upload e análise de seus documentos legais.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                <Download className=\"w-3 h-3 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900 dark:text-white\">Recibo por email</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Você receberá um recibo detalhado por email em alguns minutos.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n          <Button \n            onClick={() => setLocation('/dashboard')} \n            className=\"flex-1 bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600\"\n            data-testid=\"button-goto-dashboard\"\n          >\n            <ArrowRight className=\"w-4 h-4 mr-2\" />\n            Ir para o Dashboard\n          </Button>\n          \n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation('/billing')}\n            className=\"flex-1\"\n            data-testid=\"button-view-billing\"\n          >\n            Ver Histórico de Pagamentos\n          </Button>\n        </div>\n\n        {/* Auto Redirect Notice */}\n        <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n          Redirecionando automaticamente para o dashboard em {countdown} segundos...\n          <br />\n          <button \n            onClick={() => setLocation('/dashboard')} \n            className=\"underline hover:text-blue-600 dark:hover:text-blue-400 mt-1\"\n            data-testid=\"link-skip-countdown\"\n          >\n            Pular contagem regressiva\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7729},"client/src/hooks/use-user.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { User as SupabaseUser, Session } from '@supabase/supabase-js';\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/lib/supabase';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface BackendUser {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  role: 'user' | 'admin' | 'support';\n  credits: number;\n  stripeCustomerId?: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface UserContextType {\n  // Supabase user data\n  supabaseUser: SupabaseUser | null;\n  session: Session | null;\n  \n  // Backend user data\n  user: BackendUser | null;\n  \n  // Combined state\n  loading: boolean;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  isSupport: boolean;\n  \n  // Auth functions\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signUp: (email: string, password: string, metadata: { firstName: string; lastName: string; username: string }) => Promise<{ error: any }>;\n  signOut: () => Promise<void>;\n  updateProfile: (updates: { firstName?: string; lastName?: string; username?: string }) => Promise<{ error: any }>;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport function UserProvider({ children }: { children: React.ReactNode }) {\n  const [supabaseUser, setSupabaseUser] = useState<SupabaseUser | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [supabaseLoading, setSupabaseLoading] = useState(true);\n\n  // Track Supabase auth state\n  useEffect(() => {\n    const getInitialSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      setSession(session);\n      setSupabaseUser(session?.user || null);\n      setSupabaseLoading(false);\n    };\n\n    getInitialSession();\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        setSession(session);\n        setSupabaseUser(session?.user || null);\n        setSupabaseLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // Fetch backend user data when authenticated\n  const { data: backendUserData, isLoading: backendLoading } = useQuery({\n    queryKey: ['/api/auth/me', supabaseUser?.id],\n    queryFn: async () => {\n      if (!supabaseUser) return null;\n      const response = await apiRequest('GET', '/api/auth/me');\n      const data = await response.json();\n      return data.user as BackendUser;\n    },\n    enabled: !!supabaseUser && !supabaseLoading,\n    retry: false\n  });\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    return { error };\n  };\n\n  const signUp = async (\n    email: string, \n    password: string, \n    metadata: { firstName: string; lastName: string; username: string }\n  ) => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          first_name: metadata.firstName,\n          last_name: metadata.lastName,\n          username: metadata.username,\n        },\n      },\n    });\n    return { error };\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const updateProfile = async (updates: { \n    firstName?: string; \n    lastName?: string; \n    username?: string; \n  }) => {\n    const { error } = await supabase.auth.updateUser({\n      data: {\n        first_name: updates.firstName,\n        last_name: updates.lastName,\n        username: updates.username,\n      },\n    });\n    return { error };\n  };\n\n  const loading = supabaseLoading || backendLoading;\n  const isAuthenticated = !!supabaseUser && !!backendUserData;\n  const isAdmin = backendUserData?.role === 'admin';\n  const isSupport = backendUserData?.role === 'support';\n\n  const value: UserContextType = {\n    supabaseUser,\n    session,\n    user: backendUserData || null,\n    loading,\n    isAuthenticated,\n    isAdmin,\n    isSupport,\n    signIn,\n    signUp,\n    signOut,\n    updateProfile,\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUser() {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n}\n\n// Backward compatibility export\nexport const useSupabaseAuth = useUser;","size_bytes":4504},"server/lib/encryption.ts":{"content":"import crypto from 'crypto';\n\n// SECURE Encryption configuration\nconst ALGORITHM = 'aes-256-gcm'; // FIXED: Using GCM for authentication\nconst KEY_LENGTH = 32; // 256 bits\nconst IV_LENGTH = 12; // 96 bits for GCM (recommended)\nconst TAG_LENGTH = 16; // 128 bits for GCM auth tag\n\n// Versioning for migration support\nconst CURRENT_VERSION = 'v2_gcm';\nconst LEGACY_VERSION = 'v1_cbc';\n\n// Get encryption key from environment variable\nfunction getEncryptionKey(): Buffer {\n  const keyString = process.env.ENCRYPTION_KEY;\n  if (!keyString) {\n    throw new Error('ENCRYPTION_KEY environment variable is required for API key encryption');\n  }\n  \n  // SECURITY: Validate key length at runtime\n  if (keyString.length < 32) {\n    throw new Error('ENCRYPTION_KEY must be at least 32 characters long for security');\n  }\n  \n  // Create a consistent 32-byte key from the environment variable\n  return crypto.createHash('sha256').update(keyString).digest();\n}\n\n/**\n * SECURE: Encrypts a plain text API key using AES-256-GCM with authentication\n * @param plainText - The plain text API key to encrypt\n * @returns Encrypted string in format: version:base64(iv:ciphertext:authTag)\n */\nexport function encryptApiKey(plainText: string): string {\n  if (!plainText) {\n    throw new Error('Cannot encrypt empty or null API key');\n  }\n\n  const key = getEncryptionKey();\n  const iv = crypto.randomBytes(IV_LENGTH); // FIXED: Random IV for each encryption\n  \n  // FIXED: Using secure createCipheriv with IV\n  const cipher = crypto.createCipheriv(ALGORITHM, key, iv);\n  \n  let encrypted = cipher.update(plainText, 'utf8', 'base64');\n  encrypted += cipher.final('base64');\n  \n  // SECURITY: Get authentication tag for GCM\n  const authTag = cipher.getAuthTag();\n  \n  // SECURE FORMAT: version:iv:ciphertext:authTag (all base64 encoded)\n  const combinedData = Buffer.concat([\n    iv,\n    Buffer.from(encrypted, 'base64'),\n    authTag\n  ]);\n  \n  return `${CURRENT_VERSION}:${combinedData.toString('base64')}`;\n}\n\n/**\n * SECURE: Decrypts an encrypted API key with authentication verification\n * @param encryptedText - The encrypted text in format: version:base64(iv:ciphertext:authTag)\n * @returns The decrypted plain text API key\n */\nexport function decryptApiKey(encryptedText: string): string {\n  if (!encryptedText) {\n    throw new Error('Cannot decrypt empty or null encrypted data');\n  }\n\n  const parts = encryptedText.split(':');\n  if (parts.length < 2) {\n    throw new Error('Invalid encrypted API key format');\n  }\n\n  const version = parts[0];\n  \n  // Handle legacy format for migration\n  if (version === LEGACY_VERSION || (!version.startsWith('v') && parts.length === 2)) {\n    return decryptLegacyApiKey(encryptedText);\n  }\n  \n  // Handle current secure format\n  if (version !== CURRENT_VERSION) {\n    throw new Error(`Unsupported encryption version: ${version}`);\n  }\n\n  const key = getEncryptionKey();\n  const combinedData = Buffer.from(parts[1], 'base64');\n  \n  // Extract components: iv (12) + ciphertext + authTag (16)\n  if (combinedData.length < IV_LENGTH + TAG_LENGTH) {\n    throw new Error('Invalid encrypted data: too short');\n  }\n  \n  const iv = combinedData.subarray(0, IV_LENGTH);\n  const authTag = combinedData.subarray(-TAG_LENGTH);\n  const encrypted = combinedData.subarray(IV_LENGTH, -TAG_LENGTH);\n\n  // FIXED: Using secure createDecipheriv with IV and auth tag\n  const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);\n  decipher.setAuthTag(authTag);\n  \n  let decrypted = decipher.update(encrypted, undefined, 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  return decrypted;\n}\n\n/**\n * LEGACY: Decrypts old format for migration (INSECURE - only for migration)\n * @param encryptedText - Legacy encrypted text\n * @returns Decrypted text\n */\nfunction decryptLegacyApiKey(encryptedText: string): string {\n  console.warn('SECURITY WARNING: Decrypting legacy insecure format for migration');\n  \n  const parts = encryptedText.split(':');\n  if (parts.length !== 2) {\n    throw new Error('Invalid legacy encrypted API key format');\n  }\n\n  const key = getEncryptionKey();\n  const iv = Buffer.from(parts[0], 'base64');\n  const encrypted = parts[1];\n\n  // Legacy insecure method (for migration only)\n  const decipher = crypto.createDecipher('aes-256-cbc', key);\n  \n  let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  return decrypted;\n}\n\n/**\n * Migrates a legacy encrypted key to the new secure format\n * @param legacyEncryptedText - Legacy encrypted API key\n * @returns New secure encrypted API key\n */\nexport function migrateApiKey(legacyEncryptedText: string): string {\n  try {\n    // First decrypt using legacy method\n    const plainText = decryptLegacyApiKey(legacyEncryptedText);\n    \n    // Re-encrypt using secure method\n    const secureEncrypted = encryptApiKey(plainText);\n    \n    console.log('Successfully migrated API key to secure format');\n    return secureEncrypted;\n  } catch (error) {\n    console.error('Failed to migrate API key:', error);\n    throw new Error('API key migration failed');\n  }\n}\n\n/**\n * Detects if an encrypted key is in legacy format\n * @param encryptedText - Encrypted text to check\n * @returns True if legacy format\n */\nexport function isLegacyFormat(encryptedText: string): boolean {\n  if (!encryptedText) return false;\n  \n  const parts = encryptedText.split(':');\n  // Legacy format: iv:ciphertext (no version prefix)\n  // New format: version:data\n  return parts.length === 2 && !parts[0].startsWith('v');\n}\n\n/**\n * Creates a masked version of an API key showing only the last 4 characters\n * @param apiKey - The plain text API key\n * @returns Masked string like \"****abcd\"\n */\nexport function maskApiKey(apiKey: string): string {\n  if (!apiKey || apiKey.length < 4) {\n    return '****';\n  }\n  \n  const lastFour = apiKey.slice(-4);\n  const maskLength = Math.min(apiKey.length - 4, 12); // Limit mask to reasonable length\n  const mask = '*'.repeat(maskLength);\n  \n  return `${mask}${lastFour}`;\n}\n\n/**\n * SECURITY: Validates that the encryption/decryption system is working\n * Tests both deterministic behavior and round-trip functionality\n */\nexport function validateEncryption(): boolean {\n  try {\n    const testKey = 'test-api-key-12345';\n    \n    // Test 1: Round-trip encryption/decryption\n    const encrypted1 = encryptApiKey(testKey);\n    const decrypted1 = decryptApiKey(encrypted1);\n    \n    if (testKey !== decrypted1) {\n      console.error('Encryption validation failed: Round-trip mismatch');\n      return false;\n    }\n    \n    // Test 2: NON-deterministic behavior (security requirement)\n    const encrypted2 = encryptApiKey(testKey);\n    \n    if (encrypted1 === encrypted2) {\n      console.error('SECURITY FAILURE: Encryption is deterministic! Same plaintext produces same ciphertext');\n      return false;\n    }\n    \n    // Test 3: Both encrypt differently but decrypt to same value\n    const decrypted2 = decryptApiKey(encrypted2);\n    if (testKey !== decrypted2) {\n      console.error('Encryption validation failed: Second decryption mismatch');\n      return false;\n    }\n    \n    // Test 4: Validate key length requirements\n    const originalKey = process.env.ENCRYPTION_KEY;\n    if (!originalKey || originalKey.length < 32) {\n      console.error('ENCRYPTION_KEY validation failed: Key too short');\n      return false;\n    }\n    \n    console.log('✅ Encryption validation passed: Secure, non-deterministic AES-256-GCM');\n    return true;\n    \n  } catch (error) {\n    console.error('Encryption validation failed:', error);\n    return false;\n  }\n}\n\n/**\n * SECURITY: Runtime validation called at application startup\n * Ensures encryption system is properly configured and secure\n */\nexport function validateEncryptionStartup(): void {\n  console.log('🔐 Validating encryption system...');\n  \n  // Check environment variable\n  const keyString = process.env.ENCRYPTION_KEY;\n  if (!keyString) {\n    console.error('❌ CRITICAL: ENCRYPTION_KEY environment variable is missing');\n    process.exit(1);\n  }\n  \n  if (keyString.length < 32) {\n    console.error('❌ CRITICAL: ENCRYPTION_KEY must be at least 32 characters for security');\n    process.exit(1);\n  }\n  \n  // Validate encryption functionality\n  if (!validateEncryption()) {\n    console.error('❌ CRITICAL: Encryption validation failed');\n    process.exit(1);\n  }\n  \n  console.log('✅ Encryption system validated successfully');\n}\n\n/**\n * Batch migration utility for upgrading all legacy encrypted keys\n * @param legacyKeys - Array of legacy encrypted keys\n * @returns Array of securely encrypted keys\n */\nexport function batchMigrateApiKeys(legacyKeys: string[]): string[] {\n  const results: string[] = [];\n  const errors: Array<{index: number, error: string}> = [];\n  \n  legacyKeys.forEach((legacyKey, index) => {\n    try {\n      if (isLegacyFormat(legacyKey)) {\n        const migrated = migrateApiKey(legacyKey);\n        results.push(migrated);\n        console.log(`✅ Migrated key ${index + 1}/${legacyKeys.length}`);\n      } else {\n        // Already in new format\n        results.push(legacyKey);\n        console.log(`✅ Key ${index + 1}/${legacyKeys.length} already secure`);\n      }\n    } catch (error) {\n      errors.push({index, error: error instanceof Error ? error.message : 'Unknown error'});\n      results.push(legacyKey); // Keep original on error\n      console.error(`❌ Failed to migrate key ${index + 1}:`, error);\n    }\n  });\n  \n  if (errors.length > 0) {\n    console.warn(`⚠️  Migration completed with ${errors.length} errors`);\n  } else {\n    console.log('✅ All keys migrated successfully');\n  }\n  \n  return results;\n}","size_bytes":9610},"client/src/pages/contact.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Mail, \n  Phone, \n  MapPin, \n  Clock,\n  Send,\n  Building,\n  Users,\n  Shield,\n  MessageSquare\n} from 'lucide-react';\n\n// Contact form validation schema\nconst contactFormSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"E-mail inválido\"),\n  company: z.string().optional(),\n  subject: z.enum([\n    \"general\",\n    \"support\",\n    \"sales\", \n    \"partnership\",\n    \"legal\",\n    \"press\"\n  ], {\n    required_error: \"Por favor selecione um assunto\",\n  }),\n  message: z.string().min(10, \"Mensagem deve ter pelo menos 10 caracteres\"),\n  phone: z.string().optional(),\n});\n\ntype ContactFormData = z.infer<typeof contactFormSchema>;\n\nconst subjectOptions = [\n  { value: \"general\", label: \"Informações Gerais\" },\n  { value: \"support\", label: \"Suporte Técnico\" },\n  { value: \"sales\", label: \"Vendas e Preços\" },\n  { value: \"partnership\", label: \"Parcerias\" },\n  { value: \"legal\", label: \"Questões Legais\" },\n  { value: \"press\", label: \"Imprensa\" },\n];\n\nexport default function Contact() {\n  const { toast } = useToast();\n  \n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      company: \"\",\n      subject: undefined,\n      message: \"\",\n      phone: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      return await apiRequest('/api/contact', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Mensagem Enviada\",\n        description: \"Sua mensagem foi enviada com sucesso. Entraremos em contato em breve.\",\n      });\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro ao Enviar\",\n        description: \"Não foi possível enviar sua mensagem. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    contactMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-br from-primary/10 via-accent/5 to-secondary/10 pt-16 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n              Entre em Contato\n            </h1>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Nossa equipe está pronta para ajudar você com suas necessidades de análise jurídica. \n              Entre em contato conosco através dos canais abaixo.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n          \n          {/* Contact Information */}\n          <div className=\"lg:col-span-1 space-y-8\">\n            \n            {/* Contact Cards */}\n            <Card data-testid=\"card-contact-info\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Building className=\"text-primary\" size={20} />\n                  <span>Informações da Empresa</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <MapPin className=\"text-muted-foreground mt-1\" size={16} />\n                  <div>\n                    <p className=\"font-medium\">Endereço</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Av. Paulista, 1000 - 10º andar<br />\n                      Bela Vista, São Paulo - SP<br />\n                      CEP 01310-100\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <Phone className=\"text-muted-foreground\" size={16} />\n                  <div>\n                    <p className=\"font-medium\">Telefone</p>\n                    <a \n                      href=\"tel:+5511300000000\" \n                      className=\"text-sm text-primary hover:underline\"\n                      data-testid=\"link-phone\"\n                    >\n                      +55 (11) 3000-0000\n                    </a>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <Mail className=\"text-muted-foreground\" size={16} />\n                  <div>\n                    <p className=\"font-medium\">E-mail</p>\n                    <a \n                      href=\"mailto:contato@jusvalida.com.br\" \n                      className=\"text-sm text-primary hover:underline\"\n                      data-testid=\"link-email\"\n                    >\n                      contato@jusvalida.com.br\n                    </a>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <Clock className=\"text-muted-foreground mt-1\" size={16} />\n                  <div>\n                    <p className=\"font-medium\">Horário de Atendimento</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Segunda a Sexta: 9h às 18h<br />\n                      Sábado: 9h às 13h<br />\n                      Domingo: Fechado\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Support Options */}\n            <Card data-testid=\"card-support-options\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"text-primary\" size={20} />\n                  <span>Canais de Suporte</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 bg-primary/5 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <MessageSquare className=\"text-primary\" size={16} />\n                    <span className=\"font-medium\">Suporte Técnico</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Para questões técnicas e problemas com a plataforma\n                  </p>\n                  <a \n                    href=\"mailto:suporte@jusvalida.com.br\" \n                    className=\"text-sm text-primary hover:underline\"\n                    data-testid=\"link-support-email\"\n                  >\n                    suporte@jusvalida.com.br\n                  </a>\n                </div>\n                \n                <div className=\"p-4 bg-accent/5 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Shield className=\"text-accent\" size={16} />\n                    <span className=\"font-medium\">LGPD e Privacidade</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Questões sobre proteção de dados e privacidade\n                  </p>\n                  <a \n                    href=\"mailto:dpo@jusvalida.com.br\" \n                    className=\"text-sm text-primary hover:underline\"\n                    data-testid=\"link-privacy-email\"\n                  >\n                    dpo@jusvalida.com.br\n                  </a>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <div className=\"lg:col-span-2\">\n            <Card data-testid=\"card-contact-form\">\n              <CardHeader>\n                <CardTitle>Envie sua Mensagem</CardTitle>\n                <CardDescription>\n                  Preencha o formulário abaixo e nossa equipe entrará em contato com você em até 24 horas.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nome *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Seu nome completo\" \n                                data-testid=\"input-name\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>E-mail *</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"email\" \n                                placeholder=\"seu@email.com\" \n                                data-testid=\"input-email\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"company\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Empresa (Opcional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Nome da empresa\" \n                                data-testid=\"input-company\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Telefone (Opcional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"(11) 99999-9999\" \n                                data-testid=\"input-phone\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"subject\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Assunto *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-subject\">\n                                <SelectValue placeholder=\"Selecione o assunto da sua mensagem\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {subjectOptions.map((option) => (\n                                <SelectItem key={option.value} value={option.value}>\n                                  {option.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mensagem *</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Escreva sua mensagem aqui. Seja específico sobre o que precisa de ajuda.\"\n                              className=\"min-h-[120px]\"\n                              data-testid=\"input-message\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={contactMutation.isPending}\n                      data-testid=\"button-send-message\"\n                    >\n                      {contactMutation.isPending ? (\n                        \"Enviando...\"\n                      ) : (\n                        <>\n                          <Send className=\"mr-2\" size={16} />\n                          Enviar Mensagem\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15066},"server/services/email.ts":{"content":"import nodemailer from 'nodemailer';\nimport { storage } from '../storage';\nimport { decryptApiKey } from '../lib/encryption';\n\nexport class EmailService {\n  private transporter: nodemailer.Transporter | null = null;\n  private lastConfigUpdate: Date | null = null;\n\n  async getTransporter(): Promise<nodemailer.Transporter> {\n    // Check if we need to refresh the transporter (every 5 minutes)\n    const shouldRefresh = !this.transporter || \n      !this.lastConfigUpdate || \n      (Date.now() - this.lastConfigUpdate.getTime() > 5 * 60 * 1000);\n\n    if (shouldRefresh) {\n      const config = await storage.getSmtpConfig();\n      \n      if (!config) {\n        throw new Error('Configuração SMTP não encontrada. Configure o SMTP no painel administrativo.');\n      }\n\n      // Decrypt password\n      const decryptedPassword = await decryptApiKey(config.password);\n\n      this.transporter = nodemailer.createTransport({\n        host: config.host,\n        port: config.port,\n        secure: config.secure, // true for 465, false for other ports\n        auth: {\n          user: config.username,\n          pass: decryptedPassword,\n        },\n      });\n\n      this.lastConfigUpdate = new Date();\n    }\n\n    return this.transporter!;\n  }\n\n  async sendContactEmail(params: {\n    name: string;\n    email: string;\n    company?: string;\n    subject: string;\n    message: string;\n    phone?: string;\n  }) {\n    const { name, email, company, subject, message, phone } = params;\n    \n    const transporter = await this.getTransporter();\n    const config = await storage.getSmtpConfig();\n    \n    if (!config) {\n      throw new Error('Configuração SMTP não disponível');\n    }\n\n    const subjectLabels: Record<string, string> = {\n      general: \"Informações Gerais\",\n      support: \"Suporte Técnico\",\n      sales: \"Vendas e Preços\",\n      partnership: \"Parcerias\",\n      legal: \"Questões Legais\",\n      press: \"Imprensa\",\n    };\n\n    const htmlContent = `\n      <html>\n        <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n          <h2 style=\"color: #2563eb;\">Nova Mensagem de Contato - JusValida</h2>\n          \n          <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"margin-top: 0; color: #1e40af;\">Informações do Remetente</h3>\n            <p><strong>Nome:</strong> ${name}</p>\n            <p><strong>E-mail:</strong> ${email}</p>\n            ${company ? `<p><strong>Empresa:</strong> ${company}</p>` : ''}\n            ${phone ? `<p><strong>Telefone:</strong> ${phone}</p>` : ''}\n            <p><strong>Assunto:</strong> ${subjectLabels[subject] || subject}</p>\n          </div>\n          \n          <div style=\"background: #ffffff; padding: 20px; border-left: 4px solid #2563eb; margin: 20px 0;\">\n            <h3 style=\"margin-top: 0; color: #1e40af;\">Mensagem</h3>\n            <div style=\"white-space: pre-wrap;\">${message}</div>\n          </div>\n          \n          <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280;\">\n            <p>Esta mensagem foi enviada através do formulário de contato do JusValida.</p>\n            <p>Data/Hora: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}</p>\n          </div>\n        </body>\n      </html>\n    `;\n\n    const textContent = `\nNova Mensagem de Contato - JusValida\n\nINFORMAÇÕES DO REMETENTE:\nNome: ${name}\nE-mail: ${email}\n${company ? `Empresa: ${company}` : ''}\n${phone ? `Telefone: ${phone}` : ''}\nAssunto: ${subjectLabels[subject] || subject}\n\nMENSAGEM:\n${message}\n\n---\nEsta mensagem foi enviada através do formulário de contato do JusValida.\nData/Hora: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n    `;\n\n    const mailOptions = {\n      from: `\"${config.fromName}\" <${config.fromEmail}>`,\n      to: config.fromEmail, // Send to the same email configured\n      replyTo: email, // Allow replying directly to the contact\n      subject: `[JusValida] ${subjectLabels[subject] || 'Contato'} - ${name}`,\n      text: textContent,\n      html: htmlContent,\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    \n    console.log('Contact email sent:', {\n      messageId: info.messageId,\n      from: email,\n      subject: subjectLabels[subject] || subject,\n      timestamp: new Date().toISOString()\n    });\n\n    return info;\n  }\n\n  async sendTestEmail(testEmail: string) {\n    const transporter = await this.getTransporter();\n    const config = await storage.getSmtpConfig();\n    \n    if (!config) {\n      throw new Error('Configuração SMTP não disponível');\n    }\n\n    const mailOptions = {\n      from: `\"${config.fromName}\" <${config.fromEmail}>`,\n      to: testEmail,\n      subject: '[JusValida] Teste de Configuração SMTP',\n      text: `Este é um e-mail de teste para verificar a configuração SMTP do JusValida.\\n\\nSe você recebeu esta mensagem, a configuração está funcionando corretamente!\\n\\nData/Hora do teste: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`,\n      html: `\n        <html>\n          <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n            <h2 style=\"color: #2563eb;\">Teste de Configuração SMTP - JusValida</h2>\n            <p>Este é um e-mail de teste para verificar a configuração SMTP do JusValida.</p>\n            <div style=\"background: #dcfce7; padding: 15px; border-radius: 8px; border-left: 4px solid #16a34a;\">\n              <p style=\"margin: 0; color: #15803d;\"><strong>✅ Configuração funcionando corretamente!</strong></p>\n            </div>\n            <p style=\"margin-top: 20px; font-size: 12px; color: #6b7280;\">\n              Data/Hora do teste: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n            </p>\n          </body>\n        </html>\n      `,\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    \n    console.log('Test email sent:', {\n      messageId: info.messageId,\n      to: testEmail,\n      timestamp: new Date().toISOString()\n    });\n\n    return info;\n  }\n\n  async verifyConnection(): Promise<boolean> {\n    try {\n      const transporter = await this.getTransporter();\n      await transporter.verify();\n      return true;\n    } catch (error) {\n      console.error('SMTP verification failed:', error);\n      return false;\n    }\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":6432}},"version":1}