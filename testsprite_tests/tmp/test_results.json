[
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "6539b3e2-defd-4053-94e0-7e51c3e3a9a4",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC001-User Registration with Valid Data",
    "description": "Verify that a new user can successfully register using valid email and password data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to the registration page by clicking the 'Começar Grátis' button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill the registration form with valid data: name, surname, username, email, and password, then accept terms and submit.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Anderson')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Narciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[6]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input the registered email and password on the login form and submit to verify successful login and redirection to dashboard or welcome page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert that the user is redirected to the dashboard or welcome page by checking the welcome message on the page.\n        welcome_message = await frame.locator('xpath=//text()[contains(.,\"Bem-vindo de volta\")]/..').text_content()\n        assert welcome_message is not None and 'Bem-vindo de volta' in welcome_message, 'User was not redirected to the welcome page after registration.'\n        # Optionally, assert the user's name is displayed correctly\n        user_name_displayed = await frame.locator('xpath=//text()[contains(.,\"Anderson\")]/..').text_content()\n        assert user_name_displayed is not None and 'Anderson' in user_name_displayed, 'User name not displayed on welcome page.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360686108308//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:52.992Z",
    "modified": "2025-10-01T23:18:06.242Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "eeaf4acd-88ed-40ed-9b8b-9e11bcbe394e",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC002-User Registration with Existing Email",
    "description": "Verify that registration fails when the email is already registered.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to the registration page by clicking the appropriate button or link.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill the registration form with the already registered email and other required details.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Anderson')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Narciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[5]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[6]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the 'Nome' field input and resubmit the registration form to check for duplicate email error message.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Anderson')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected error message for duplicate email registration, but test execution failed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Tested registration with an already registered email. The system failed to show the duplicate email error and redirected to login instead. This is a bug that needs fixing. Stopping further testing.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360716020542//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.000Z",
    "modified": "2025-10-01T23:18:36.187Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "2178b16d-0602-4e42-8595-9778b39c4dee",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC003-User Login with Correct Credentials",
    "description": "Verify that a user can log in successfully using valid credentials.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to the login page by clicking the 'Entrar' button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input valid email and password into the login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        # Click the login button to attempt login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert that the welcome message is displayed indicating successful login.\n        frame = context.pages[-1]\n        welcome_message = await frame.locator('xpath=//text()[contains(.,\"Bem-vindo de volta\")]/..').text_content()\n        assert \"Bem-vindo de volta\" in welcome_message, \"Login failed or welcome message not found\"\n        # Assert that the URL is redirected to the user dashboard page\n        current_url = frame.url\n        assert \"/dashboard\" in current_url, f\"Expected to be on dashboard page but was on {current_url}\"\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360582711183//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.007Z",
    "modified": "2025-10-01T23:16:22.841Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "1cf6fc1a-a775-4c40-9d11-872666d6f868",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC004-User Login with Incorrect Credentials",
    "description": "Verify login fails with incorrect email or password and an error message is shown.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on the 'Entrar' button to go to the login page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input invalid email and password into the login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('invalid@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('wrongpassword')\n        \n\n        # Click the 'Entrar' button to attempt login with invalid credentials.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Close the login modal and complete the task.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        error_message_locator = frame.locator('xpath=html/body/div[3]/form/div[contains(@class, \"error-message\")]')\n        await page.wait_for_timeout(3000)\n        assert await error_message_locator.is_visible(), \"Error message should be visible after failed login attempt.\"\n        error_text = await error_message_locator.text_content()\n        assert error_text and 'invalid' in error_text.lower() or 'erro' in error_text.lower(), f\"Error message text should indicate login failure, got: {error_text}\"\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360722449875//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.014Z",
    "modified": "2025-10-01T23:18:42.616Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "dedef7b6-ed00-4fdd-b2b1-133d04cc2140",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC005-Password Reset - Request Email",
    "description": "Verify that users can request a password reset email with a valid registered address.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and navigate to the password reset page or login page where password reset option is available.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Esqueceu a senha?' link to go to the password reset page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Close the login modal to access the password reset form and then click the 'Enviar Instruções' button to submit the password reset request.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input the registered email 'andersonnarciso@gmail.com' into the email field and click the 'Enviar Instruções' button to submit the password reset request.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert that the password reset email notification message is displayed with the correct registered email address.\n        frame = context.pages[-1]\n        notification = await frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/div').inner_text()\n        assert 'Verifique seu e-mail. Enviamos um link para redefinir sua senha para andersonnarciso@gmail.com' in notification, 'Password reset email notification not found or incorrect.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360631213996//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.020Z",
    "modified": "2025-10-01T23:17:11.356Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "cb3d55b3-77da-422f-9f10-370a2db0ceec",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC006-Password Reset - Invalid Email",
    "description": "Verify that the system handles password reset requests for unregistered emails gracefully.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to the password reset page by finding a relevant link or button.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Look for login or account related buttons or links to find password reset option.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'Esqueceu a senha?' link to open the password reset page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input an unregistered email address into the email field and submit the password reset request.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('unregistered_email@example.com')\n        \n\n        # Verify that the system displays a generic message without revealing the non-existence of the email after submitting the password reset request.\n        frame = context.pages[-1]\n        await page.wait_for_timeout(3000)\n        message_locator = frame.locator('text=Se você cadastrou este e-mail, enviamos instruções para redefinir sua senha')\n        assert await message_locator.is_visible(), 'Expected generic password reset message is not visible'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360600802942//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.026Z",
    "modified": "2025-10-01T23:16:40.938Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "2f9f7a97-69df-4547-aa47-b38dc0249115",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC007-AI Document Analysis - Single Document Upload and Analysis",
    "description": "Verify that a user can upload a supported legal document and receive a detailed AI-powered analysis based on selected AI provider and analysis type.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Entrar' button to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then submit login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a valid legal document file (PDF, DOC, or DOCX) using the upload area.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a single valid legal document file (PDF, DOC, or DOCX) using the upload area.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a valid legal document file (PDF, DOC, or DOCX) using the file upload control (index 16).\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/div/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a valid legal document file (PDF, DOC, or DOCX) using the file upload control (index 16).\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[4]/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The user successfully logged in and navigated to the document upload and analysis page. The interface for selecting AI provider and document type was visible. However, attempts to upload a valid legal document file (PDF, DOC, DOCX) failed as the upload control did not accept the file or trigger analysis. Consequently, the detailed AI-powered analysis based on the selected AI provider and document type could not be verified. The task is incomplete due to this upload issue.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=FdD7LMHtwgCPeFl04oiBD:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360783510095//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.033Z",
    "modified": "2025-10-01T23:19:43.654Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "fd7a9671-6c08-4960-816e-a182d2c7f699",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC008-AI Document Analysis - Unsupported File Format Upload",
    "description": "Verify that the system rejects unsupported file formats with appropriate error messaging.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to the upload section or page where file upload is possible.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/footer/div/div/div[2]/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then submit login form to access user dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        # Input password and click 'Entrar' button to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to upload a file with an unsupported format (e.g., .txt, .exe) to verify rejection and error messaging.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert that the upload is rejected and an error message is shown explaining allowed file formats.\n        error_message_locator = frame.locator('xpath=//div[contains(@class, \"error\") or contains(text(), \"formato\") or contains(text(), \"permitido\")]')\n        await error_message_locator.wait_for(state='visible', timeout=5000)\n        error_text = await error_message_locator.inner_text()\n        assert any(ext in error_text for ext in ['.pdf', '.doc', '.docx', '.txt']), f\"Error message does not mention allowed formats, got: {error_text}\"\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360745865793//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.041Z",
    "modified": "2025-10-01T23:19:06.025Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "65eccd4e-8a47-4eb4-b5a3-69dff90dd639",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC009-Credit System - Initial Free Credit Allocation",
    "description": "Verify that new users receive an initial free credit allowance upon registration for document analyses.",
    "testStatus": "FAILED",
    "testError": "Test execution timed out after 15 minutes",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "",
    "created": "2025-10-01T23:12:53.049Z",
    "modified": "2025-10-01T23:12:53.049Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "bd6a0ba3-8736-4999-ba70-8a1ad9534a12",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC010-Credit System - Credit Consumption on Analysis",
    "description": "Verify that credits are correctly deducted after a document analysis based on dynamic cost calculation.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Entrar' button to go to login page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click 'Entrar' to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select a document type for analysis from the dropdown.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a document file for analysis to trigger credit deduction.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a document file using the file upload input to perform analysis and verify credit deduction.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since the expected result is unknown.\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to upload a document file to perform analysis and verify credit deduction due to file upload input limitations. The 'Analisar Documento' button remains disabled, preventing progress. Reporting this issue and stopping further actions.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=Pg6ObbGh50JLYXJ3amnIS:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360834110288//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.056Z",
    "modified": "2025-10-01T23:20:34.247Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "437fba04-cc41-4bbe-a00a-850ca2b982c3",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC011-Credit System - Billing and Transaction History Accuracy",
    "description": "Verify that the billing system accurately records transactions and displays correct history and invoices for the user.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on Entrar button to go to login page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click Entrar to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to 'Planos e Créditos' page to make a credit purchase.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/footer/div/div/div[2]/ul/li[4]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Fazer Primeira Compra' button to start the credit purchase process.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[5]/div[2]/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate back to 'Planos e Créditos' page to verify billing history and transaction records.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/footer/div/div/div[2]/ul/li[4]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The billing system does not allow initiating a credit purchase as the purchase button is unresponsive. Therefore, it is not possible to verify if transactions are recorded correctly or if the credit balance updates after purchase. The test is stopped due to this blocking issue.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=3yTDGQ1hCHnJgY-1-0gh7:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/credit-packages:0:0)\n[ERROR] API Error 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/credit-packages:0:0)\n[ERROR] API Error 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/credit-packages:0:0)\n[ERROR] API Error 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360663516375//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.065Z",
    "modified": "2025-10-01T23:17:43.684Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "ed040dd2-7db5-46e8-a84e-0b3d7f3d2d33",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC012-Batch Document Upload and Analysis with Progress Tracking",
    "description": "Verify that users can upload multiple documents in batch, monitor progress, and receive a comprehensive report after processing.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Análise em Lote' to navigate to batch upload interface.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/footer/div/div/div[2]/ul/li[3]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to upload multiple files using a file upload input element or drag and drop simulation if supported.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/div/div[2]/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Batch Test Upload')\n        \n\n        # Select an analysis type from the dropdown to enable batch creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/div/div[2]/div/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select an analysis type option to proceed with batch creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/div[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to upload multiple documents. The upload documents area does not open the file selection dialog on click, preventing batch upload testing. Please fix this issue to enable further testing.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/batch/jobs:0:0)\n[ERROR] API Error 401: {\"message\":\"Authentication required\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 401: {\"message\":\"Authentication required\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/batch/statistics:0:0)\n[ERROR] API Error 401: {\"message\":\"Authentication required\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 401: {\"message\":\"Authentication required\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/batch/jobs:0:0)\n[ERROR] API Error 401: {\"message\":\"Authentication required\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 401: {\"message\":\"Authentication required\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/batch/statistics:0:0)\n[ERROR] API Error 401: {\"message\":\"Authentication required\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 401: {\"message\":\"Authentication required\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/batch/jobs:0:0)\n[ERROR] API Error 401: {\"message\":\"Authentication required\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 401: {\"message\":\"Authentication required\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/batch/statistics:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360676298185//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.072Z",
    "modified": "2025-10-01T23:17:56.502Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "f826826d-0c41-42d5-8f2b-40120cafed51",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC013-Admin Dashboard - User Management Functionality",
    "description": "Verify that admins can view, search, filter, and manage user accounts effectively within the dashboard.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click the 'Entrar' button to go to the login page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin email and password, then submit login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the menu or link that leads to the user management section.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/header/div/div/nav/a/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Admin user logged in successfully but the user management section is not accessible or visible on the dashboard page or main navigation. Unable to perform verification of user management features. Reporting this issue and stopping further testing as per instructions.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=jyT9NLvoPTSqYijpqEabM:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360612592387//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.094Z",
    "modified": "2025-10-01T23:16:52.735Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "b2eca63f-a968-4360-8ca4-6caf91ff4e3f",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC014-Admin Dashboard - AI Provider Configuration",
    "description": "Verify admins can add, edit, or disable AI providers and changes affect the user selection options.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on Entrar (login) button to access admin dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin email and password, then click Entrar to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to AI provider configuration in admin dashboard by finding the relevant menu or link.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/header/div/div/nav/a/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Admin user logged in successfully but cannot access AI provider configuration section. No menu or link found on dashboard or navigation to manage AI providers. This prevents verifying admin capabilities to add, edit, or disable AI providers and their effect on user selection options. Reporting this as a critical issue and stopping further testing.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=fBy_2o3KI7toeaWWT_zcv:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360617258076//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.103Z",
    "modified": "2025-10-01T23:16:57.454Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "1788f369-ef82-4d1e-ab90-bd55a97eb698",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC015-Support System - Ticket Creation and Real-Time Chat",
    "description": "Verify users can create support tickets, receive responses, and chat with support agents in real-time.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Entrar' button to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click 'Entrar' to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Suporte' menu item to access support section.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/header/div/div/nav/a[4]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Novo Ticket' button to open ticket creation form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the ticket subject, priority, and message, then submit the ticket.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Problema de teste')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down to reveal message input and 'Criar Ticket' button, then fill message and submit ticket.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try inputting message text by clicking inside the textarea area and sending keys, then click 'Criar Ticket' button by clicking the button with text 'Criar Ticket'.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[4]/div/div/div[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input message text into textarea at index 4 and click 'Criar Ticket' button at index 6 to submit the ticket.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[3]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Este é um ticket de suporte criado para teste.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[4]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The user successfully logged in and navigated to the support section. They opened the ticket creation form and filled in the subject, priority, and message fields. However, when attempting to submit the support ticket, an error appeared indicating an invalid or expired token, preventing ticket creation. Due to this error, it was not possible to verify ticket visibility or test real-time chat with support agents. The task is therefore incomplete due to this authentication issue.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=iJNmJ1K4Jf_55wG8_-xSi:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/support/tickets:0:0)\n[ERROR] API Error 401: {\"message\":\"Invalid or expired token\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/support/tickets:0:0)\n[ERROR] API Error 401: {\"message\":\"Invalid or expired token\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/support/tickets:0:0)\n[ERROR] API Error 401: {\"message\":\"Invalid or expired token\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360774159635//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.110Z",
    "modified": "2025-10-01T23:19:34.350Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "4bd9f204-11c9-4ecf-9f20-cd8654bbd563",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC016-File Upload Validation - Corrupted or Large File",
    "description": "Verify that corrupted or files exceeding the size limit are rejected with appropriate error messages.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Entrar' or 'Começar Grátis' to access the upload feature for legal documents.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the account creation form with valid data and submit to create an account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Anderson')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Narciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[5]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[6]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Log in with the created user credentials to access the document upload feature.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select a document type from the dropdown to enable file upload.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to upload a corrupted legal document file to verify rejection and error message.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Dismiss the cookie consent banner by clicking 'Aceitar Todos' button (index 42) to ensure unobstructed interaction with the file upload area.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/div/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: expected error messages for corrupted or oversized files not verified.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The task to verify that corrupted or oversized files are rejected with appropriate error messages was partially completed. We successfully logged in, created an account, navigated to the document upload interface, selected the document type, and prepared the upload area. However, due to interface constraints, actual file uploads for corrupted and oversized files could not be performed to confirm validation and error messages. Therefore, the task is not fully finished. Further manual or automated testing with file upload capability is required to complete the validation.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=6VvMgFlA9wBDDVedlCxxx:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360863673363//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.119Z",
    "modified": "2025-10-01T23:21:03.845Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "331766fe-0970-443b-aa62-6fb6c80575ea",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC017-Email Notification - User Action Confirmations",
    "description": "Verify that email notifications are sent for key user actions such as registration, password reset requests, credit purchase, and analysis completion.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Começar Grátis' button to start user registration.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill registration form with user data and submit to trigger registration email.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Anderson')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Narciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[5]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[6]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Esqueceu a senha?' link to request password reset email.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div[3]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input registered email and submit password reset request to trigger password reset email.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Proceed to test credit purchase email notification by navigating to login and performing login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input login credentials and submit login form to access user dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to credit purchase page to initiate credit purchase and trigger purchase confirmation email.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/footer/div/div/div[2]/ul/li[4]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Fazer Primeira Compra' button to initiate credit purchase process.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[5]/div[2]/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down to reveal credit packages and purchase options to proceed with credit purchase.\n        await page.mouse.wheel(0, 400)\n        \n\n        assert False, 'Test plan execution failed: Email notification verification could not be completed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to complete credit purchase email notification test because credit packages did not load on the purchase page. Registration email notification test completed successfully. Password reset email request was blocked by system timing restriction. Logged in successfully. Stopped further testing due to blocking issue on credit purchase page.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Failed to load resource: the server responded with a status of 429 () (at https://lwqeysdqcepqfzmwvwsq.supabase.co/auth/v1/recover?redirect_to=http%3A%2F%2Flocalhost%3A3000%2Freset-password:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=1fxo_NhsfAxM3BGMqX-hS:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/credit-packages:0:0)\n[ERROR] API Error 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/credit-packages:0:0)\n[ERROR] API Error 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/credit-packages:0:0)\n[ERROR] API Error 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"} (at http://localhost:3000/src/lib/queryClient.ts:6:12)\n[ERROR] Query function error: Error: 500: {\"message\":\"null value in column \\\"package_id\\\" of relation \\\"credit_packages\\\" violates not-null constraint\"}\n    at throwIfResNotOk (http://localhost:3000/src/lib/queryClient.ts:8:11)\n    at async http://localhost:3000/src/lib/queryClient.ts:68:5 (at http://localhost:3000/src/lib/queryClient.ts:70:12)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360835668946//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.126Z",
    "modified": "2025-10-01T23:20:35.858Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "f055d2f6-35d3-4365-a8b3-7c927ad2f047",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC018-Data Encryption and Security - In Transit and At Rest",
    "description": "Validate that user data, documents, and credentials are encrypted in storage and during network transmission as per security standards.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Entrar' (Login) button to access user login and test API calls for encrypted transmission.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then submit login form to capture network data for encryption validation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Return to the application dashboard page to manually inspect URLs and API calls for HTTPS and encrypted transmission.\n        await page.goto('http://localhost:3000/dashboard', timeout=10000)\n        \n\n        # Click on 'Upload de Arquivo' button to trigger file upload and monitor network requests for encrypted transmission.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: encryption validation could not be confirmed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The task to validate that user data, documents, and credentials are encrypted in storage and during network transmission was partially completed. User login and navigation to the dashboard were successful. The file upload interface was accessed to trigger network API calls for encrypted transmission inspection, but the file upload could not be completed due to interface limitations. Therefore, direct verification of HTTPS and encrypted API calls during file upload was not possible. Cookie consent banner was present but did not block interaction. For full validation, backend or database access is recommended to confirm encryption at rest, and network traffic capture tools should be used to confirm encryption in transit. Task is marked as partially complete due to these limitations.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=eIXS_dHAuO60og3qXEaAX:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)\n[ERROR] Failed to load resource: the server responded with a status of 429 () (at https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dhow%2520to%2520inspect%2520network%2520requests%2520for%2520HTTPS%2520and%2520encrypted%2520API%2520calls%2520in%2520browser%2520developer%2520tools%26udm%3D14%26sei%3D1bXdaI6iGofc1sQP7uHQ8A8&q=EgS6-xeAGNbr9sYGIjANGxTEI3DW8jPjqVWg6VhRIzr7GbCZoQhsO4iJkMjOHO3p_ci5rDR1wBSa6TX9nacyAVJaAUM:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/anchor?ar=1&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&co=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbTo0NDM.&hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&size=normal&s=TaNEhWxZowwuYNqnD5aSoUqSkCC2zPx0T2YgsBRh3LWs3dqGnHg6Otxv5UPAE4rLZXsdYukTy0VVZU5d3b-CrXlj6N60ohttkts6sqqLHbrJ4xXGJCoskpokw08AHv9dhvhz17NBwuo9fRO9sQb2B0Hr5P1SAEuZjE9akBcdozkkTqISCIlZhV3mIdUYd0Qv0fZoSdE2O0O6hLvQQnxRA-bGMs5FANKjoHifp21eEk9A3BJR5ZrPJcNGWwu7j-mAIh9YYP6YxaNOlvp8aaY02vhSXAjKcuU&anchor-ms=20000&execute-ms=15000&cb=5oqvttqqlczj:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/bframe?hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&bft=0dAFcWeA6bymQFr7IIFS8yF6w2_rQXrF21Xry-FDDwHyPzeCl2de8EPULZ5F0Ngrv6hj7Kp1wTDRKb2-_jhQFOkUX8dQktUfwjUA:0:0)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=k1V_ztCS4DanIwr76YBI5:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360738762784//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.133Z",
    "modified": "2025-10-01T23:18:58.944Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "d68eb2d1-2827-4f5d-97c0-c9d5e7c5b928",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC019-User Role Management - Role-Based Access Control Verification",
    "description": "Verify that different user roles (standard user, admin) have proper access restrictions and permissions to features and data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Entrar' button to go to login page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input standard user email and password, then click 'Entrar' to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('standarduser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('userpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Close login modal and input admin credentials to test admin login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Entrar' button to open login modal for admin login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin credentials and click 'Entrar' to log in as admin.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Verify full access to all administrative features and user management on the dashboard.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Log out from admin account and attempt login as a standard user with valid credentials to verify restricted access.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/header/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sair' (Logout) button to log out admin user and prepare for standard user login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Entrar' button to open login modal for standard user login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/nav/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input standard user credentials and click 'Entrar' to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('standarduser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('userpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Admin login successful with full access to admin features verified. Standard user login attempts failed due to invalid credentials, preventing verification of standard user access restrictions. Task partially completed.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://lwqeysdqcepqfzmwvwsq.supabase.co/auth/v1/token?grant_type=password:0:0)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=_83IMsPUXWebYtuw1v8jX:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)\n[WARNING] Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-dialog.js?v=492338c2:341:35)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://lwqeysdqcepqfzmwvwsq.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360857517096//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.142Z",
    "modified": "2025-10-01T23:20:57.739Z"
  },
  {
    "projectId": "3a52e5c3-d061-48ad-a3f8-0dd1ac623a85",
    "testId": "34dbf7b7-95c7-4a81-84b8-5954d801e0b0",
    "userId": "443834b8-20b1-703c-b746-51ff57f30226",
    "title": "TC020-Analysis Result Accuracy Comparison Across AI Providers",
    "description": "Verify that document analysis results correspond accurately and distinctly to each selected AI provider for given same document and analysis type.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Começar Agora' button to start the document upload and analysis process.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/section/div[2]/div/div[2]/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click 'Entrar' to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('andersonnarciso@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a legal document for analysis by clicking 'Upload de Arquivo' button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a legal document file by clicking the 'Upload de Arquivo' button (index 13).\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a legal document file for analysis.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div/div[3]/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Accept cookies to remove popup obstruction, then upload a legal document file using the file upload input (index 16).\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/div/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: Unable to verify document analysis results for AI providers.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The task to verify that document analysis results correspond accurately and distinctly to each selected AI provider for the same document and analysis type is not yet fully completed. The system is ready for document upload and AI provider selection, but no document has been uploaded and no analyses have been performed yet. Therefore, the unique provider-specific feedback and domain relevance comparison cannot be done at this stage. Further steps require uploading a legal document, selecting each AI provider (OpenAI GPT-5, Anthropic Claude Sonnet 4, Google Gemini 2.5 Pro), performing analyses, recording outputs, and comparing them for uniqueness and accuracy.\nBrowser Console Logs:\n[WARNING] You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS. (at https://js.stripe.com/basil/stripe.js:0:710197)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://r.stripe.com/b:0:0)\n[ERROR] Warning: validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s <a> a \n    at a\n    at a\n    at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/wouter.js?v=492338c2:294:18\n    at div\n    at div\n    at header\n    at ProtectedHeader (http://localhost:3000/src/components/layout/protected-header.tsx:8:35)\n    at Header (http://localhost:3000/src/App.tsx?t=1759360328703&v=GYZ86-vH-wglrbj-0sbsr:48:35)\n    at div\n    at Router\n    at Provider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-O2VDSSQ6.js?v=492338c2:38:15)\n    at TooltipProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@radix-ui_react-tooltip.js?v=492338c2:62:5)\n    at UserProvider (http://localhost:3000/src/hooks/use-user.tsx:7:32)\n    at SupabaseAuthProvider (http://localhost:3000/src/hooks/use-supabase-auth.tsx?t=1759360328697:5:40)\n    at CookieConsentProvider (http://localhost:3000/src/hooks/use-cookie-preferences.tsx:4:41)\n    at QueryClientProvider (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:3081:3)\n    at App (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/chunk-W6L2VRDA.js?v=492338c2:520:37)\n[ERROR] Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] (at http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1146:18)\n[ERROR] Backend user data error: Error: [\"/api/user/profile\",\"e936bd36-5d9a-440a-9a89-dc9dd616e81a\"] data is undefined\n    at _a5.fetch (http://localhost:3000/@fs/C:/Users/Anderson%20Narciso/dyad-apps/JusValida/node_modules/.vite/deps/@tanstack_react-query.js?v=492338c2:1151:15) (at http://localhost:3000/src/hooks/use-user.tsx:74:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/443834b8-20b1-703c-b746-51ff57f30226/1759360682750862//tmp/test_task/result.webm",
    "created": "2025-10-01T23:12:53.194Z",
    "modified": "2025-10-01T23:18:02.897Z"
  }
]
